components:
  responses:
    bad-request:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-bad-request'
      description: 400 Bad Request.
    conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-conflict'
      description: 409 Conflict.
    forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-forbidden'
      description: 403 Forbidden.
    internal-server-error:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-internal-server-error'
      description: 500 Internal Server Error.
    not-found:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-not-found'
      description: 404 Not Found.
    service-unavailable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-service-unavailable'
      description: 503 Service Unavailable.
    too-many-requests:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-too-many-requests'
      description: 429 Too Many Requests.
      headers:
        Retry-After:
          schema:
            type: number
            description: Number of seconds to wait before retrying.
    unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-unauthorized'
      description: 401 Unauthorized.
  schemas:
    access-level:
      type: string
      enum:
        - external
        - internal
        - private
        - public
        - restricted
    account:
      allOf:
        - $ref: '#/components/schemas/org-base'
        - type: object
          properties:
            description:
              type: string
              description: Description of the corresponding Account.
              format: text
            domains:
              type: array
              description: Company's domain names. Example - 'devrev.ai'.
              items:
                type: string
                format: text
            external_refs:
              type: array
              description: |
                External refs are unique identifiers from your customer system of
                records, stored as a list.
              items:
                type: string
                format: text
            owned_by:
              type: array
              description: List of Dev user IDs owning this Account.
              items:
                $ref: '#/components/schemas/user-summary'
            primary_account:
              $ref: '#/components/schemas/account-summary'
            tier:
              type: string
              description: The Tier of the corresponding Account.
              format: text
            websites:
              type: array
              description: |
                Company's website links. Filling in this property will also fill in
                domain. Example - 'www.devrev.ai'.
              items:
                type: string
                format: text
          required:
            - owned_by
      title: account
    account-summary:
      allOf:
        - $ref: '#/components/schemas/org-base-summary'
      title: account-summary
    accounts-create-request:
      type: object
      description: |
        Request object to create a new account in the Dev organization.
      properties:
        description:
          type: string
          description: Description of the account.
          format: text
        display_name:
          type: string
          description: Name of the account.
          format: text
        domains:
          type: array
          description: List of company's domain names. Example - ['devrev.ai'].
          items:
            type: string
            format: text
        external_refs:
          type: array
          description: |
            External refs are unique identifiers from your customer system of
            records, stored as a list.
          items:
            type: string
            format: text
        owned_by:
          type: array
          description: List of Dev users owning this account.
          items:
            type: string
            format: id
        tier:
          type: string
          description: The tier of the account.
          format: text
        websites:
          type: array
          description: |
            List of company websites. Example - ['www.devrev.ai',
            'www.marketplace.devrev.ai'].
          items:
            type: string
            format: text
      required:
        - display_name
      title: accounts-create-request
    accounts-create-response:
      type: object
      description: The response to creating a new account.
      properties:
        account:
          $ref: '#/components/schemas/account'
      required:
        - account
      title: accounts-create-response
      x-go-name: AccountsCreateResponseBody
    accounts-delete-request:
      type: object
      description: Request object to delete an account.
      properties:
        id:
          type: string
          description: The ID of account to delete.
          example: ACC-12345
          format: id
      required:
        - id
      title: accounts-delete-request
    accounts-delete-response:
      type: object
      additionalProperties: false
      description: The response to deleting an account.
      title: accounts-delete-response
      x-go-name: AccountsDeleteResponseBody
    accounts-export-request:
      type: object
      description: The request to export a collection of accounts.
      properties:
        created_by:
          type: array
          description: Filters for accounts created by the specified user(s).
          items:
            type: string
            format: id
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        display_name:
          type: array
          description: Array of display names of accounts to be filtered.
          items:
            type: string
            format: text
        external_refs:
          type: array
          description: Array of references of accounts to be filtered.
          items:
            type: string
            format: text
        first:
          type: integer
          description: The number of accounts to return. The default is '50'.
          format: int32
          maximum: 500
          minimum: 1
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        sort_by:
          type: array
          description: |
            Fields to sort the accounts by and the direction to sort them in.
          items:
            type: string
            format: sort-by
        stage:
          type: array
          description: Filters for accounts on specified stages.
          items:
            type: string
            format: id
        tier:
          type: array
          description: Tier of the accounts to be filtered.
          items:
            type: string
            format: text
        websites:
          type: array
          description: Array of websites of accounts to be filtered.
          items:
            type: string
            format: text
      title: accounts-export-request
    accounts-export-response:
      type: object
      description: The response to exporting a collection of accounts.
      properties:
        accounts:
          type: array
          description: The exported accounts.
          items:
            $ref: '#/components/schemas/account'
      required:
        - accounts
      title: accounts-export-response
      x-go-name: AccountsExportResponseBody
    accounts-filters:
      type: object
      properties:
        created_by:
          type: array
          description: Filters for accounts created by the specified user(s).
          items:
            type: string
            format: id
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        display_name:
          type: array
          description: Array of display names of accounts to be filtered.
          items:
            type: string
            format: text
        external_refs:
          type: array
          description: Array of references of accounts to be filtered.
          items:
            type: string
            format: text
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        stage:
          type: array
          description: Filters for accounts on specified stages.
          items:
            type: string
            format: id
        tier:
          type: array
          description: Tier of the accounts to be filtered.
          items:
            type: string
            format: text
        websites:
          type: array
          description: Array of websites of accounts to be filtered.
          items:
            type: string
            format: text
      title: accounts-filters
    accounts-get-request:
      type: object
      description: Request object to get an account's information.
      properties:
        id:
          type: string
          description: The ID of the account to be retrieved.
          example: ACC-12345
          format: id
      required:
        - id
      title: accounts-get-request
    accounts-get-response:
      type: object
      description: The returned account.
      properties:
        account:
          $ref: '#/components/schemas/account'
      required:
        - account
      title: accounts-get-response
      x-go-name: AccountsGetResponseBody
    accounts-list-request:
      type: object
      description: List the accounts.
      properties:
        created_by:
          type: array
          description: Filters for accounts created by the specified user(s).
          items:
            type: string
            format: id
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        display_name:
          type: array
          description: Array of display names of accounts to be filtered.
          items:
            type: string
            format: text
        external_refs:
          type: array
          description: Array of references of accounts to be filtered.
          items:
            type: string
            format: text
        limit:
          type: integer
          description: |
            The maximum number of accounts to return per page. The default is
            '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        sort_by:
          type: array
          description: |
            Fields to sort the accounts by and the direction to sort them in.
          items:
            type: string
            format: sort-by
        stage:
          type: array
          description: Filters for accounts on specified stages.
          items:
            type: string
            format: id
        tier:
          type: array
          description: Tier of the accounts to be filtered.
          items:
            type: string
            format: text
        websites:
          type: array
          description: Array of websites of accounts to be filtered.
          items:
            type: string
            format: text
      title: accounts-list-request
    accounts-list-response:
      type: object
      description: |
        The response to listing all accounts matching the filter criteria.
      properties:
        accounts:
          type: array
          description: List containing all the accounts
          items:
            $ref: '#/components/schemas/account'
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
      required:
        - accounts
      title: accounts-list-response
      x-go-name: AccountsListResponseBody
    accounts-merge-request:
      type: object
      description: Request object to merge two accounts.
      properties:
        primary_account:
          type: string
          description: |
            The ID of the primary account, which will be retained post merge.
          example: ACC-12345
          format: id
        secondary_account:
          type: string
          description: |
            The ID of the secondary account, which will be merged into the
            primary account.
          example: ACC-12345
          format: id
      required:
        - primary_account
        - secondary_account
      title: accounts-merge-request
    accounts-merge-response:
      type: object
      additionalProperties: false
      description: The response to merging an account.
      title: accounts-merge-response
      x-go-name: AccountsMergeResponseBody
    accounts-update-request:
      type: object
      description: Request to update details of the account.
      properties:
        description:
          type: string
          description: Updated description of the account.
          format: text
        display_name:
          type: string
          description: Updated display name for the account.
          format: text
        domains:
          type: array
          description: |
            Updated list of company's domain names. Example - ['devrev.ai'].
          items:
            type: string
            format: text
        external_refs:
          type: array
          description: Updated External Refs of account.
          items:
            type: string
            format: text
        id:
          type: string
          description: The ID of account to update.
          example: ACC-12345
          format: id
        owned_by:
          type: array
          description: Updated list of the users owning this account.
          items:
            type: string
            format: id
        tier:
          type: string
          description: Updated tier of the account.
          format: text
          nullable: true
        websites:
          $ref: '#/components/schemas/accounts-update-request-websites'
      required:
        - id
      title: accounts-update-request
    accounts-update-request-websites:
      type: object
      properties:
        set:
          type: array
          description: Sets the websites field of the account.
          items:
            type: string
            format: text
      title: accounts-update-request-websites
    accounts-update-response:
      type: object
      description: Updated account object.
      properties:
        account:
          $ref: '#/components/schemas/account'
      required:
        - account
      title: accounts-update-response
      x-go-name: AccountsUpdateResponseBody
    add-tag-with-value:
      type: object
      properties:
        id:
          type: string
          description: The ID of the tag.
          example: TAG-12345
          format: id
        value:
          type: string
          description: |
            The value for the object's association with the tag. If specified,
            the value must be one that's specified in the tag's allowed values.
          format: text
      required:
        - id
      title: add-tag-with-value
    aggregated-schema:
      type: object
      description: List of custom fields from multiple source fragments.
      properties:
        apps:
          type: array
          description: |
            Apps corresponding to the app fragments used to populate the same
            in the object.
          items:
            type: string
            format: text
        conditions:
          type: array
          description: The conditions associated with the fields.
          items:
            $ref: '#/components/schemas/custom-schema-fragment-condition'
        custom_composite_schemas:
          type: array
          description: List of all composite schemas used by custom fields.
          items:
            $ref: '#/components/schemas/composite-schema'
        custom_fields:
          type: array
          description: List of all custom fields in this schema.
          items:
            $ref: '#/components/schemas/schema-field-descriptor'
        description:
          type: string
          description: Description of the schema.
          format: text
        is_custom_leaf_type:
          type: boolean
          description: |
            True when the fragments being aggregated correspond to a custom
            leaf type.
        leaf_type:
          type: string
          description: Leaf type of the fragments being aggregated.
          format: text
        stage_diagram_id:
          $ref: '#/components/schemas/stage-diagram-summary'
        stock_composite_schemas:
          type: array
          description: List of all composite schemas used by stock fields.
          items:
            $ref: '#/components/schemas/composite-schema'
        stock_field_overrides:
          type: array
          description: |
            Optional overrides for properties of stock fields. Overrides in the
            custom type fragment take precedence over those defined in the
            tenant fragment.
          items:
            $ref: '#/components/schemas/stock-field-override'
        stock_fields:
          type: array
          description: List of all stock fields in this schema.
          items:
            $ref: '#/components/schemas/schema-field-descriptor'
        subtype:
          type: string
          description: |
            Subtype corresponding to the custom type fragment used to populate
            the same in the object.
          format: text
        subtype_display_name:
          type: string
          description: Display name of the subtype.
          format: text
      required:
        - custom_composite_schemas
        - custom_fields
        - stock_composite_schemas
        - stock_fields
      title: aggregated-schema
    aggregated-schema-get-request:
      type: object
      properties:
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec-for-read'
        is_custom_leaf_type:
          type: boolean
          description: Whether the leaf type corresponds to a custom object.
        leaf_type:
          type: string
          description: |
            The leaf type. Used for inferring the default stage diagram and
            tenant fragment ID.
          format: text
      title: aggregated-schema-get-request
    aggregated-schema-get-response:
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/aggregated-schema'
      required:
        - schema
      title: aggregated-schema-get-response
      x-go-name: AggregatedSchemaGetResponseBody
    ai-agent-event-execute-error:
      type: object
      description: |
        An error object providing the error message for the AI agent event
        execution.
      properties:
        error:
          type: string
          description: The error message for the AI agent event execution.
          format: text
          maxLength: 512
      required:
        - error
      title: ai-agent-event-execute-error
    ai-agent-event-execute-progress:
      type: object
      description: |
        A progress object providing the status of the AI agent event execution.
      properties:
        progress_state:
          type: string
          enum:
            - skill_executed
            - skill_triggered
        skill_executed:
          $ref: '#/components/schemas/ai-agent-event-execute-progress-skill-executed'
        skill_triggered:
          $ref: '#/components/schemas/ai-agent-event-execute-progress-skill-triggered'
      title: ai-agent-event-execute-progress
    ai-agent-event-execute-progress-skill-executed:
      type: object
      description: |
        The progress for the AI agent event execution indicating that the skill
        has been executed.
      properties:
        args:
          type: object
          description: The arguments for the skill call.
        metadata:
          type: object
          description: |
            The metadata of the skill call. The fields depend on the skill that
            was executed.
        output:
          type: object
          description: The output of the skill call.
        skill_name:
          type: string
          description: The name of the skill.
          format: text
          maxLength: 512
      required:
        - output
        - skill_name
      title: ai-agent-event-execute-progress-skill-executed
    ai-agent-event-execute-progress-skill-triggered:
      type: object
      description: |
        The progress for the AI agent event execution indicating that the skill
        has been triggered.
      properties:
        args:
          type: object
          description: The arguments for the skill call.
        skill_name:
          type: string
          description: The name of the skill.
          format: text
          maxLength: 512
        thought:
          type: string
          description: The thought explaining why the skill was called.
          format: text
        workflow:
          $ref: '#/components/schemas/workflow-summary'
        workflow_run:
          $ref: '#/components/schemas/workflow-run-summary'
      required:
        - args
        - skill_name
      title: ai-agent-event-execute-progress-skill-triggered
    ai-agent-event-suggestions:
      type: object
      description: A list of suggestions generated for the AI agent event.
      properties:
        suggestions:
          type: array
          description: The suggestions generated for the AI agent event.
          items:
            $ref: '#/components/schemas/ai-agent-suggestion'
      required:
        - suggestions
      title: ai-agent-event-suggestions
    ai-agent-message-generation-started:
      type: object
      description: |
        Additional metadata to indicate that the message generation has
        started.
      properties:
        request_id:
          type: string
          description: |
            The request ID contains an UUID to fetch the partial message
            generation.
          format: text
          maxLength: 128
      required:
        - request_id
      title: ai-agent-message-generation-started
    ai-agent-suggestion:
      type: object
      description: A suggestion generated for the AI agent event.
      properties:
        suggestion:
          type: string
          description: The text of the suggestion.
          format: text
      required:
        - suggestion
      title: ai-agent-suggestion
    applies-to-part-filter:
      type: object
      description: The filter for applies to part.
      properties:
        include_child_parts:
          type: boolean
          description: |
            Whether to include items belonging to children of any of the
            provided parts.
        parts:
          type: array
          description: Part IDs to filter on.
          example:
            - PROD-12345
          items:
            type: string
            format: id
      required:
        - parts
      title: applies-to-part-filter
    archetype-metric-target:
      type: object
      description: Metric with corresponding target values.
      properties:
        breached_at:
          type: string
          description: |
            For breached metrics the time they entered into breach. This is the
            same as what the target date was, unless the breach happened due to
            a different policy starting to apply.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        completed_at:
          type: string
          description: The time at which the metric completed at.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        completed_in:
          type: integer
          description: |
            For completed metrics the time (in minutes) it took to complete
            them. (Taking into account the schedule if any).
          format: int32
        in_policy:
          type: boolean
          description: If true, the metric is part of the applied policy.
        is_out_of_schedule:
          type: boolean
          description: |
            If true, the schedule attached to this metric is out of schedule at
            the time of the query. It is not set for metrics in *completed*
            stage.
        metric_definition:
          $ref: '#/components/schemas/metric-definition-summary'
        next_schedule_transition:
          type: string
          description: |
            The next time the schedule will change its state, if such is known.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        org_schedule:
          $ref: '#/components/schemas/org-schedule-summary'
        remaining_time:
          type: integer
          description: Time in minutes that remains on a paused metric.
          format: int32
        stage:
          type: string
          description: Metric stage corresponding to the applicable SLA.
          format: text
        status:
          type: string
          description: |
            It is an indicator of whether the metric has ever been breached
            (missed). If not, it shows whether the metric is completed, in
            progress, or not part of the applied policy.
          format: text
        target_time:
          type: string
          description: |
            Time at which the metric would breach SLA if no action taken.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        warning_target_time:
          type: string
          description: |
            Time at which the metric would reach the SLA warning limit if no
            action taken.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
      required:
        - metric_definition
        - stage
      title: archetype-metric-target
    archetype-sla-summary:
      type: object
      description: SLA summary for the object.
      properties:
        closest_to_breach_metric:
          type: string
          description: The name of the metric which is closest to breach.
          format: text
        org_schedule:
          $ref: '#/components/schemas/org-schedule-summary'
        remaining_time:
          type: integer
          description: |
            The remaining time (in minutes) for the closest_to_breach_metric if
            it is paused. A paused metric will only be closest to breach if no
            metrics are running (running, warning and breached stage).
          format: int32
        sla_tracker:
          $ref: '#/components/schemas/sla-tracker'
        stage:
          $ref: '#/components/schemas/sla-summary-stage'
        target_time:
          type: string
          description: |
            The target time to avoid SLA breach. This is the target time of the
            metric which is closest to breach.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
      title: archetype-sla-summary
    article:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            applies_to_parts:
              type: array
              description: Parts relevant to the article.
              items:
                $ref: '#/components/schemas/part-summary'
            article_type:
              $ref: '#/components/schemas/article-type'
            authored_by:
              type: array
              description: Users that authored the article.
              items:
                $ref: '#/components/schemas/user-summary'
            description:
              type: string
              description: Description of the article.
              format: text
            extracted_content:
              type: array
              description: Extracted content of the article.
              items:
                $ref: '#/components/schemas/artifact-summary'
            num_downvotes:
              type: integer
              description: Number of downvotes on the article.
              format: int32
            num_upvotes:
              type: integer
              description: Number of upvotes on the article.
              format: int32
            owned_by:
              type: array
              description: Users that own the article.
              items:
                $ref: '#/components/schemas/user-summary'
            parent:
              $ref: '#/components/schemas/directory-summary'
            rank:
              type: string
              description: Rank of the article.
              format: text
            resource:
              $ref: '#/components/schemas/resource'
            scope:
              $ref: '#/components/schemas/enum-value'
            title:
              type: string
              description: Title of the article.
              format: text
          required:
            - owned_by
      title: article
    article-content-format:
      type: string
      description: Content format of the article.
      enum:
        - drdfv2
        - rt
    article-data-source-create:
      type: object
      properties:
        is_custom_leaf_type:
          type: boolean
          description: Indicates if the leaf type is custom.
        is_default:
          type: boolean
          description: Indicates if the data source is default.
        leaf_type:
          type: string
          description: The object's type.
          format: text
        object:
          type: string
          description: The ID of the object powering article.
          format: id
        reference_id:
          type: string
          description: The reference ID of the data source.
          format: text
      required:
        - is_custom_leaf_type
        - is_default
        - leaf_type
        - object
        - reference_id
      title: article-data-source-create
    article-status:
      type: string
      description: Status of the article.
      enum:
        - archived
        - draft
        - published
        - review_needed
    article-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            article_type:
              $ref: '#/components/schemas/article-type'
            resource:
              $ref: '#/components/schemas/resource-summary'
            title:
              type: string
              description: Title of the article.
              format: text
      title: article-summary
    article-type:
      type: string
      description: Type of the article.
      enum:
        - article
        - content_block
        - page
    articles-create-request:
      type: object
      description: The request to create an article.
      properties:
        access_level:
          $ref: '#/components/schemas/access-level'
        aliases:
          type: array
          description: The aliases of the article.
          items:
            type: string
            format: text
          maxItems: 5
        applies_to_parts:
          type: array
          description: The parts that the article applies to.
          example:
            - PROD-12345
          items:
            type: string
            format: id
        article_type:
          $ref: '#/components/schemas/article-type'
        authored_by:
          type: array
          description: The authors of the article.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        brand:
          type: string
          description: The brand associated with the article.
          format: id
        content_format:
          $ref: '#/components/schemas/article-content-format'
        custom_fields:
          type: object
          description: Application-defined custom fields.
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        data_sources:
          type: array
          description: Data sources provide the backing data for the article.
          items:
            $ref: '#/components/schemas/article-data-source-create'
        description:
          type: string
          description: Description for the article.
          format: text
        extracted_content:
          type: array
          description: ID of the extracted content artifact.
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
        language:
          type: string
          description: Language of the article.
          format: text
        notify:
          type: boolean
          description: |
            Whether to notify the users when the article is published.
        owned_by:
          type: array
          description: The users that own the article.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        parent:
          type: string
          description: The parent directory of the article.
          format: id
        published_at:
          type: string
          description: The published date of the article.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        release_notes:
          type: string
          description: The release notes of the article.
          format: text
        resource:
          $ref: '#/components/schemas/articles-create-request-resource'
        scope:
          type: integer
          description: The scope of the article.
          format: int64
        shared_with:
          type: array
          description: |
            Information about the role the member receives due to the share.
          items:
            $ref: '#/components/schemas/set-shared-with-membership'
        status:
          $ref: '#/components/schemas/article-status'
        tags:
          type: array
          description: Tags associated with the article.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
        title:
          type: string
          description: Name of the article.
          format: text
      required:
        - owned_by
        - resource
        - title
      title: articles-create-request
    articles-create-request-resource:
      type: object
      properties:
        artifacts:
          type: array
          description: IDs of the artifacts.
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
        content_blocks:
          type: array
          description: List of content blocks used in the article.
          example:
            - ARTICLE-12345
          items:
            type: string
            format: id
        published_version:
          type: string
          description: The latest published version.
          format: text
        url:
          type: string
          description: URL of the external article.
          format: text
      title: articles-create-request-resource
    articles-create-response:
      type: object
      description: Create article response.
      properties:
        article:
          $ref: '#/components/schemas/article'
      required:
        - article
      title: articles-create-response
      x-go-name: ArticlesCreateResponseBody
    articles-delete-request:
      type: object
      description: The request to delete an article.
      properties:
        id:
          type: string
          description: The ID of the article to delete.
          example: ARTICLE-12345
          format: id
      required:
        - id
      title: articles-delete-request
    articles-delete-response:
      type: object
      additionalProperties: false
      title: articles-delete-response
      x-go-name: ArticlesDeleteResponseBody
    articles-get-request:
      type: object
      description: The request to get an article.
      properties:
        id:
          type: string
          description: The ID of the required article.
          example: ARTICLE-12345
          format: id
      required:
        - id
      title: articles-get-request
    articles-get-response:
      type: object
      description: Get article response.
      properties:
        article:
          $ref: '#/components/schemas/article'
      required:
        - article
      title: articles-get-response
      x-go-name: ArticlesGetResponseBody
    articles-list-request:
      type: object
      description: The request to list articles.
      properties:
        applies_to_parts:
          type: array
          description: |
            Filters for articles belonging to any of the provided parts.
          example:
            - PROD-12345
          items:
            type: string
            format: id
        article_type:
          type: array
          description: |
            Filter for the type of articles. If this is not provided, then
            articles that are not content blocks are returned.
          items:
            $ref: '#/components/schemas/article-type'
        authored_by:
          type: array
          description: |
            Filters for articles authored by any of the provided users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        brands:
          type: array
          description: |
            Filters for articles belonging to any of the provided brands.
          items:
            type: string
            format: id
        created_by:
          type: array
          description: |
            Filters for articles created by any of the provided users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        limit:
          type: integer
          description: |
            The maximum number of articles to return. The default is '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_by:
          type: array
          description: |
            Filters for articles modified by any of the provided users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        owned_by:
          type: array
          description: Filters for articles owned by any of the provided users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        scope:
          type: array
          description: Filter for the scope of the articles.
          items:
            type: integer
            format: int64
        shared_with:
          type: array
          description: Filter for articles based on intended audience.
          items:
            $ref: '#/components/schemas/shared-with-membership-filter'
        tags:
          type: array
          description: Filters for article with any of the provided tags.
          example:
            - TAG-12345
          items:
            type: string
            format: id
      title: articles-list-request
    articles-list-response:
      type: object
      description: List articles response.
      properties:
        articles:
          type: array
          description: The article entries matching the request.
          items:
            $ref: '#/components/schemas/article'
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        total:
          type: integer
          description: Total number of article items for the request.
          format: int32
      required:
        - articles
        - total
      title: articles-list-response
      x-go-name: ArticlesListResponseBody
    articles-update-request:
      type: object
      description: The request to update an article.
      properties:
        access_level:
          $ref: '#/components/schemas/access-level'
        aliases:
          $ref: '#/components/schemas/articles-update-request-aliases'
        applies_to_parts:
          $ref: '#/components/schemas/articles-update-request-applies-to-parts'
        artifacts:
          $ref: '#/components/schemas/articles-update-request-artifacts'
        authored_by:
          $ref: '#/components/schemas/articles-update-request-authored-by'
        brand:
          type: string
          description: The updated brand of the article.
          format: id
          nullable: true
        content_blocks:
          $ref: '#/components/schemas/articles-update-request-content-blocks'
        content_format:
          $ref: '#/components/schemas/article-content-format'
        custom_fields:
          type: object
          description: Application-defined custom fields.
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        data_sources:
          $ref: '#/components/schemas/articles-update-request-article-data-source-update'
        description:
          type: string
          description: |
            Updated description of the article object, or unchanged if not
            provided.
          format: text
        extracted_content:
          $ref: '#/components/schemas/articles-update-request-extracted-content'
        id:
          type: string
          description: The article's ID.
          example: ARTICLE-12345
          format: id
        language:
          type: string
          description: Updates the language of the article.
          format: text
        notify:
          type: boolean
          description: |
            Whether to notify the users when the article is published.
        owned_by:
          $ref: '#/components/schemas/articles-update-request-owned-by'
        parent:
          type: string
          description: The updated parent directory for the article.
          format: id
          nullable: true
        published_version:
          type: string
          description: Updates the the latest published version.
          format: text
        release_notes:
          type: string
          description: Updates the release notes of the article.
          format: text
        reorder:
          $ref: '#/components/schemas/articles-update-request-reorder'
        shared_with:
          $ref: '#/components/schemas/articles-update-request-shared-with'
        status:
          $ref: '#/components/schemas/article-status'
        tags:
          $ref: '#/components/schemas/articles-update-request-tags'
        title:
          type: string
          description: |
            Updated title of the article object, or unchanged if not provided.
          format: text
        url:
          type: string
          description: Updates the URL of the external article.
          format: text
      required:
        - id
      title: articles-update-request
    articles-update-request-aliases:
      type: object
      properties:
        set:
          type: array
          description: Updates the aliases of the article.
          items:
            type: string
            format: text
          maxItems: 5
      required:
        - set
      title: articles-update-request-aliases
    articles-update-request-applies-to-parts:
      type: object
      properties:
        set:
          type: array
          description: Updates the parts that the article applies to.
          example:
            - PROD-12345
          items:
            type: string
            format: id
      title: articles-update-request-applies-to-parts
    articles-update-request-article-data-source-update:
      type: object
      properties:
        set:
          type: array
          description: |
            Updates data sources provide the backing data for the article.
          items:
            $ref: '#/components/schemas/article-data-source-create'
      title: articles-update-request-article-data-source-update
    articles-update-request-artifacts:
      type: object
      properties:
        set:
          type: array
          description: Updates IDs of the artifacts.
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
      title: articles-update-request-artifacts
    articles-update-request-authored-by:
      type: object
      properties:
        set:
          type: array
          description: Sets the users that authored the article.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
      title: articles-update-request-authored-by
    articles-update-request-content-blocks:
      type: object
      properties:
        set:
          type: array
          description: Updates IDs of the content blocks.
          example:
            - ARTICLE-12345
          items:
            type: string
            format: id
      required:
        - set
      title: articles-update-request-content-blocks
    articles-update-request-extracted-content:
      type: object
      properties:
        set:
          type: array
          description: Update the ID of the extracted content.
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
      title: articles-update-request-extracted-content
    articles-update-request-owned-by:
      type: object
      properties:
        set:
          type: array
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
      title: articles-update-request-owned-by
    articles-update-request-reorder:
      type: object
      properties:
        after:
          type: string
          description: The article after which the reordered article is placed.
          example: ARTICLE-12345
          format: id
        before:
          type: string
          description: |
            The article before which the reordered article is placed.
          example: ARTICLE-12345
          format: id
      title: articles-update-request-reorder
    articles-update-request-shared-with:
      type: object
      properties:
        set:
          type: array
          description: Sets the field to the provided membership list.
          items:
            $ref: '#/components/schemas/set-shared-with-membership'
      title: articles-update-request-shared-with
    articles-update-request-tags:
      type: object
      properties:
        set:
          type: array
          description: Sets the provided tags on the article.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
      title: articles-update-request-tags
    articles-update-response:
      type: object
      properties:
        article:
          $ref: '#/components/schemas/article'
      required:
        - article
      title: articles-update-response
      x-go-name: ArticlesUpdateResponseBody
    artifact:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            file:
              $ref: '#/components/schemas/artifact-file'
      title: artifact
    artifact-configuration-set:
      type: string
      description: |
        Represents a set of configuration to be used with the artifacts object.
      enum:
        - article_media
        - default
        - email_media
        - job_data
        - marketplace_listing_icon
        - marketplace_media
        - org_logo
        - plug_setting
        - plug_setting_banner_card
        - portal_css
        - snap_in_functions_code
        - snap_widget
        - user_profile_picture
        - work
    artifact-file:
      type: object
      description: Defines a file object.
      properties:
        type:
          type: string
          description: Type of the file.
          format: text
        name:
          type: string
          description: Name of the file.
          format: text
        size:
          type: integer
          description: Size of the file in bytes.
          format: int32
      title: artifact-file
    artifact-file-summary:
      type: object
      description: Defines a file object.
      properties:
        type:
          type: string
          description: Type of the file.
          format: text
        name:
          type: string
          description: Name of the file.
          format: text
        size:
          type: integer
          description: Size of the file in bytes.
          format: int32
      title: artifact-file-summary
    artifact-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            file:
              $ref: '#/components/schemas/artifact-file-summary'
      title: artifact-summary
    artifact-version:
      type: object
      description: The version of the artifact.
      properties:
        modified_by:
          $ref: '#/components/schemas/user-summary'
        timestamp:
          type: string
          description: The timestamp at which the version was created.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        version:
          type: string
          description: The version of the artifact.
          format: text
      required:
        - timestamp
        - version
      title: artifact-version
    artifacts-get-request:
      type: object
      description: The request to get an artifact's information.
      properties:
        id:
          type: string
          description: The requested artifact's ID.
          example: ARTIFACT-12345
          format: id
        version:
          type: string
          description: The version of the artifact that needs to be fetched.
          format: text
      required:
        - id
      title: artifacts-get-request
    artifacts-get-response:
      type: object
      description: The response to getting an artifact's information.
      properties:
        artifact:
          $ref: '#/components/schemas/artifact'
        version:
          $ref: '#/components/schemas/artifact-version'
      required:
        - artifact
        - version
      title: artifacts-get-response
      x-go-name: ArtifactsGetResponseBody
    artifacts-hard-delete-version-request:
      type: object
      description: The request to permnanently delete an artifact's version.
      properties:
        id:
          type: string
          description: The ID of the artifact to delete the version for.
          example: ARTIFACT-12345
          format: id
        version:
          type: string
          description: The version of the artifact that needs to be deleted.
          format: text
      required:
        - id
      title: artifacts-hard-delete-version-request
    artifacts-hard-delete-version-response:
      type: object
      additionalProperties: false
      title: artifacts-hard-delete-version-response
      x-go-name: ArtifactsHardDeleteVersionResponseBody
    artifacts-list-request:
      type: object
      description: The request to list artifacts attached to an object.
      properties:
        parent_id:
          type: string
          description: The ID of the object to filter artifacts.
          format: id
      title: artifacts-list-request
    artifacts-list-response:
      type: object
      description: The response to list artifacts attached to an object.
      properties:
        artifacts:
          type: array
          description: The artifact's information.
          items:
            $ref: '#/components/schemas/artifact'
      required:
        - artifacts
      title: artifacts-list-response
      x-go-name: ArtifactsListResponseBody
    artifacts-locate-request:
      type: object
      description: The request to get an artifact's download URL.
      properties:
        id:
          type: string
          description: The ID of the artifact to get the URL for.
          example: ARTIFACT-12345
          format: id
        version:
          type: string
          description: The version of the artifact that needs to be fetched.
          format: text
      required:
        - id
      title: artifacts-locate-request
    artifacts-locate-response:
      type: object
      description: The response to getting an artifact's download URL.
      properties:
        expires_at:
          type: string
          description: The expiration timestamp of the URL.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        url:
          type: string
          description: The artifact's download URL.
          format: text
      required:
        - url
      title: artifacts-locate-response
      x-go-name: ArtifactsLocateResponseBody
    artifacts-prepare-request:
      type: object
      description: The request to prepare a URL to upload a file.
      properties:
        configuration_set:
          $ref: '#/components/schemas/artifact-configuration-set'
        file_name:
          type: string
          description: The name of the file that's being uploaded.
          format: text
        file_type:
          type: string
          description: The type of file that's being uploaded.
          format: text
      required:
        - file_name
      title: artifacts-prepare-request
    artifacts-prepare-response:
      type: object
      description: The response to preparing a URL to upload a file.
      properties:
        form_data:
          type: array
          description: The POST policy form data.
          items:
            $ref: '#/components/schemas/artifacts-prepare-response-form-data'
        id:
          type: string
          description: The generated artifact's ID.
          example: ARTIFACT-12345
          format: id
        url:
          type: string
          description: The URL that the file's data should be uploaded to.
          format: text
      required:
        - form_data
        - id
        - url
      title: artifacts-prepare-response
      x-go-name: ArtifactsPrepareResponseBody
    artifacts-prepare-response-form-data:
      type: object
      properties:
        key:
          type: string
          description: Key of the form field.
          format: text
        value:
          type: string
          description: Value corresponding to the key.
          format: text
      required:
        - key
        - value
      title: artifacts-prepare-response-form-data
    artifacts-versions-prepare-request:
      type: object
      description: The request to prepare a new version of an artifact.
      properties:
        id:
          type: string
          description: The ID of the artifact to prepare a new version for.
          example: ARTIFACT-12345
          format: id
      required:
        - id
      title: artifacts-versions-prepare-request
    artifacts-versions-prepare-response:
      type: object
      description: The response to preparing a new artifact version.
      properties:
        form_data:
          type: array
          description: The POST policy form data.
          items:
            $ref: '#/components/schemas/artifacts-versions-prepare-response-form-data'
        url:
          type: string
          description: The URL that the file's data should be uploaded to.
          format: text
      required:
        - form_data
        - url
      title: artifacts-versions-prepare-response
      x-go-name: ArtifactsVersionsPrepareResponseBody
    artifacts-versions-prepare-response-form-data:
      type: object
      properties:
        key:
          type: string
          description: Key of the form field.
          format: text
        value:
          type: string
          description: Value corresponding to the key.
          format: text
      required:
        - key
        - value
      title: artifacts-versions-prepare-response-form-data
    atom:
      type: object
      discriminator:
        mapping:
          article: '#/components/schemas/article'
          auth_token: '#/components/schemas/auth-token'
          capability: '#/components/schemas/capability'
          conversation: '#/components/schemas/conversation'
          dev_user: '#/components/schemas/dev-user'
          enhancement: '#/components/schemas/enhancement'
          feature: '#/components/schemas/feature'
          group: '#/components/schemas/group'
          issue: '#/components/schemas/issue'
          link: '#/components/schemas/link'
          product: '#/components/schemas/product'
          rev_org: '#/components/schemas/rev-org'
          rev_user: '#/components/schemas/rev-user'
          service_account: '#/components/schemas/service-account'
          sla: '#/components/schemas/sla'
          sla_tracker: '#/components/schemas/sla-tracker'
          sys_user: '#/components/schemas/sys-user'
          tag: '#/components/schemas/tag'
          ticket: '#/components/schemas/ticket'
          timeline_comment: '#/components/schemas/timeline-comment'
          webhook: '#/components/schemas/webhook'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/article'
        - $ref: '#/components/schemas/auth-token'
        - $ref: '#/components/schemas/capability'
        - $ref: '#/components/schemas/conversation'
        - $ref: '#/components/schemas/dev-user'
        - $ref: '#/components/schemas/enhancement'
        - $ref: '#/components/schemas/feature'
        - $ref: '#/components/schemas/group'
        - $ref: '#/components/schemas/issue'
        - $ref: '#/components/schemas/link'
        - $ref: '#/components/schemas/product'
        - $ref: '#/components/schemas/rev-org'
        - $ref: '#/components/schemas/rev-user'
        - $ref: '#/components/schemas/service-account'
        - $ref: '#/components/schemas/sla'
        - $ref: '#/components/schemas/sla-tracker'
        - $ref: '#/components/schemas/sys-user'
        - $ref: '#/components/schemas/tag'
        - $ref: '#/components/schemas/ticket'
        - $ref: '#/components/schemas/timeline-comment'
        - $ref: '#/components/schemas/webhook'
      properties:
        type:
          $ref: '#/components/schemas/atom-type'
      required:
        - type
      title: atom
    atom-base:
      type: object
      properties:
        created_by:
          $ref: '#/components/schemas/user-summary'
        created_date:
          type: string
          description: Timestamp when the object was created.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        display_id:
          type: string
          description: Human-readable object ID unique to the Dev organization.
          format: text
        id:
          type: string
          description: Globally unique object ID.
          format: id
        modified_by:
          $ref: '#/components/schemas/user-summary'
        modified_date:
          type: string
          description: Timestamp when the object was last modified.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
      required:
        - id
      title: atom-base
    atom-base-summary:
      type: object
      properties:
        display_id:
          type: string
          description: Human-readable object ID unique to the Dev organization.
          format: text
        id:
          type: string
          description: Globally unique object ID.
          format: id
      required:
        - id
      title: atom-base-summary
    atom-summary:
      type: object
      discriminator:
        mapping:
          article: '#/components/schemas/article-summary'
          auth_token: '#/components/schemas/auth-token-summary'
          capability: '#/components/schemas/capability-summary'
          conversation: '#/components/schemas/conversation-summary'
          dev_user: '#/components/schemas/dev-user-summary'
          enhancement: '#/components/schemas/enhancement-summary'
          feature: '#/components/schemas/feature-summary'
          group: '#/components/schemas/group-summary'
          issue: '#/components/schemas/issue-summary'
          link: '#/components/schemas/link-summary'
          product: '#/components/schemas/product-summary'
          rev_org: '#/components/schemas/rev-org-summary'
          rev_user: '#/components/schemas/rev-user-summary'
          service_account: '#/components/schemas/service-account-summary'
          sla: '#/components/schemas/sla-summary'
          sla_tracker: '#/components/schemas/sla-tracker-summary'
          sys_user: '#/components/schemas/sys-user-summary'
          tag: '#/components/schemas/tag-summary'
          ticket: '#/components/schemas/ticket-summary'
          timeline_comment: '#/components/schemas/timeline-comment-summary'
          webhook: '#/components/schemas/webhook-summary'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/article-summary'
        - $ref: '#/components/schemas/auth-token-summary'
        - $ref: '#/components/schemas/capability-summary'
        - $ref: '#/components/schemas/conversation-summary'
        - $ref: '#/components/schemas/dev-user-summary'
        - $ref: '#/components/schemas/enhancement-summary'
        - $ref: '#/components/schemas/feature-summary'
        - $ref: '#/components/schemas/group-summary'
        - $ref: '#/components/schemas/issue-summary'
        - $ref: '#/components/schemas/link-summary'
        - $ref: '#/components/schemas/product-summary'
        - $ref: '#/components/schemas/rev-org-summary'
        - $ref: '#/components/schemas/rev-user-summary'
        - $ref: '#/components/schemas/service-account-summary'
        - $ref: '#/components/schemas/sla-summary'
        - $ref: '#/components/schemas/sla-tracker-summary'
        - $ref: '#/components/schemas/sys-user-summary'
        - $ref: '#/components/schemas/tag-summary'
        - $ref: '#/components/schemas/ticket-summary'
        - $ref: '#/components/schemas/timeline-comment-summary'
        - $ref: '#/components/schemas/webhook-summary'
      properties:
        type:
          $ref: '#/components/schemas/atom-type'
      required:
        - type
      title: atom-summary
    atom-type:
      type: string
      enum:
        - article
        - auth_token
        - capability
        - conversation
        - dev_user
        - enhancement
        - feature
        - group
        - issue
        - link
        - product
        - rev_org
        - rev_user
        - service_account
        - sla
        - sla_tracker
        - sys_user
        - tag
        - ticket
        - timeline_comment
        - webhook
    atoms-get-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the object to get.
          format: id
      required:
        - id
      title: atoms-get-request
    atoms-get-response:
      type: object
      properties:
        atom:
          $ref: '#/components/schemas/atom'
      required:
        - atom
      title: atoms-get-response
      x-go-name: AtomsGetResponseBody
    auth-connection:
      type: object
      description: |
        Connection object that specifies the configuration for an
        authentication connection that is set up for a Dev organization.
      discriminator:
        mapping:
          google_apps: '#/components/schemas/auth-connection-options-google-apps'
          oidc: '#/components/schemas/auth-connection-options-oidc'
          okta: '#/components/schemas/auth-connection-options-okta'
          samlp: '#/components/schemas/auth-connection-options-saml'
          social: '#/components/schemas/auth-connection-options-social'
          waad: '#/components/schemas/auth-connection-options-azure-ad'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/auth-connection-options-azure-ad'
        - $ref: '#/components/schemas/auth-connection-options-google-apps'
        - $ref: '#/components/schemas/auth-connection-options-oidc'
        - $ref: '#/components/schemas/auth-connection-options-okta'
        - $ref: '#/components/schemas/auth-connection-options-saml'
        - $ref: '#/components/schemas/auth-connection-options-social'
      properties:
        type:
          $ref: '#/components/schemas/auth-connection-type'
        display_name:
          type: string
          description: |
            Display name of the authentication connection. This name will be
            visible to all the users when they sign in to this Dev
            organization. For example, if the display_name is 'abclogin', then
            it would appear on the login button as 'Log in to abclogin'.
          format: text
        enabled:
          type: boolean
          description: |
            Whether the authentication connection is enabled or disabled. If
            set to false, the authentication connection will not show up on the
            login screen as a login option.
        id:
          type: string
          description: ID of the authentication connection.
          format: text
      required:
        - display_name
        - enabled
        - id
        - type
      title: auth-connection
    auth-connection-options-azure-ad:
      type: object
      deprecated: true
      description: |
        Object encapsulating the configuration parameters for an Azure AD
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the Azure authentication connection.
          format: text
        domain:
          type: string
          description: Domain URL of the Azure authentication connection.
          format: text
      required:
        - client_id
        - domain
      title: auth-connection-options-azure-ad
    auth-connection-options-google-apps:
      type: object
      deprecated: true
      description: |
        Object encapsulating the configuration parameters for a Google Apps
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the Google Apps authentication connection.
          format: text
        tenant_domain:
          type: string
          description: |
            Tenant domain URL of the Google Apps authentication connection.
          format: text
      required:
        - client_id
        - tenant_domain
      title: auth-connection-options-google-apps
    auth-connection-options-oidc:
      type: object
      description: |
        Object encapsulating the configuration parameters for an OIDC
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the OIDC authentication connection.
          format: text
        issuer:
          type: string
          description: Issuer URL of the OIDC authentication connection.
          format: text
      required:
        - client_id
        - issuer
      title: auth-connection-options-oidc
    auth-connection-options-okta:
      type: object
      deprecated: true
      description: |
        Object encapsulating the configuration parameters for an Okta
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the Okta authentication connection.
          format: text
        domain:
          type: string
          description: Domain URL of the Okta authentication connection.
          format: text
      required:
        - client_id
        - domain
      title: auth-connection-options-okta
    auth-connection-options-saml:
      type: object
      description: |
        Object encapsulating the configuration parameters for a SAML
        authentication connection.
      properties:
        connection_name:
          type: string
          description: |
            Connection name for the SAML authentication connection. Must match
            the `connection` query parameter specified in the sign on URL
            during SAML configuration in your identity provider.
          format: text
          maxLength: 128
          minLength: 1
        fields_map:
          $ref: '#/components/schemas/saml-connection-fields-map'
        sign_in_endpoint:
          type: string
          description: Sign In endpoint for the SAML authentication connection.
          format: text
      required:
        - fields_map
        - sign_in_endpoint
      title: auth-connection-options-saml
    auth-connection-options-social:
      type: object
      additionalProperties: false
      title: auth-connection-options-social
    auth-connection-toggle:
      type: string
      enum:
        - disable
        - enable
    auth-connection-type:
      type: string
      description: |
        Defines the type for the authentication connection. The configuration
        for each authentication connection will depend on the type value.
      enum:
        - google_apps
        - oidc
        - okta
        - samlp
        - social
        - waad
    auth-token:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            client_id:
              type: string
              description: |
                An identifier that represents the application that requested the
                token. Only applicable for application access tokens.
              format: text
            expires_at:
              type: string
              description: The time at which the token expires.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
            issued_at:
              type: string
              description: The time at which the token was issued.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
            requested_token_type:
              $ref: '#/components/schemas/auth-token-requested-token-type'
            scopes:
              type: array
              description: The scopes associated with the issued token.
              items:
                type: string
                format: text
            status:
              $ref: '#/components/schemas/auth-token-status'
            subject:
              type: string
              description: The subject of the token.
              format: text
            token_hint:
              type: string
              description: A hint that identifies the token.
              format: text
      title: auth-token
    auth-token-grant-type:
      type: string
      description: Specifies the process of obtaining a token.
      enum:
        - urn:devrev:params:oauth:grant-type:token-issue
        - urn:ietf:params:oauth:grant-type:token-exchange
      x-fern-enum:
        urn:devrev:params:oauth:grant-type:token-issue:
          name: urn-devrev-params-oauth-grant-type-token-issue
        urn:ietf:params:oauth:grant-type:token-exchange:
          name: urn-ietf-params-oauth-grant-type-token-exchange
    auth-token-requested-token-type:
      type: string
      description: The type of the requested token.
      enum:
        - urn:devrev:params:oauth:token-type:aat
        - urn:devrev:params:oauth:token-type:aat:act-as
        - urn:devrev:params:oauth:token-type:aat:public
        - urn:devrev:params:oauth:token-type:dev
        - urn:devrev:params:oauth:token-type:dev:connect
        - urn:devrev:params:oauth:token-type:gat
        - urn:devrev:params:oauth:token-type:pat
        - urn:devrev:params:oauth:token-type:pat:act-as
        - urn:devrev:params:oauth:token-type:rat
        - urn:devrev:params:oauth:token-type:rev
        - urn:devrev:params:oauth:token-type:session
        - urn:devrev:params:oauth:token-type:session:dev0
        - urn:devrev:params:oauth:token-type:session:onetime
        - urn:devrev:params:oauth:token-type:session:rev:act-as
        - urn:devrev:params:oauth:token-type:super
        - urn:devrev:params:oauth:token-type:sys
        - urn:ietf:params:oauth:token-type:jwt
      x-fern-enum:
        urn:devrev:params:oauth:token-type:aat:
          name: urn-devrev-params-oauth-token-type-aat
        urn:devrev:params:oauth:token-type:aat:act-as:
          name: urn-devrev-params-oauth-token-type-aat-act-as
        urn:devrev:params:oauth:token-type:aat:public:
          name: urn-devrev-params-oauth-token-type-aat-public
        urn:devrev:params:oauth:token-type:dev:
          name: urn-devrev-params-oauth-token-type-dev
        urn:devrev:params:oauth:token-type:dev:connect:
          name: urn-devrev-params-oauth-token-type-dev-connect
        urn:devrev:params:oauth:token-type:gat:
          name: urn-devrev-params-oauth-token-type-gat
        urn:devrev:params:oauth:token-type:pat:
          name: urn-devrev-params-oauth-token-type-pat
        urn:devrev:params:oauth:token-type:pat:act-as:
          name: urn-devrev-params-oauth-token-type-pat-act-as
        urn:devrev:params:oauth:token-type:rat:
          name: urn-devrev-params-oauth-token-type-rat
        urn:devrev:params:oauth:token-type:rev:
          name: urn-devrev-params-oauth-token-type-rev
        urn:devrev:params:oauth:token-type:session:
          name: urn-devrev-params-oauth-token-type-session
        urn:devrev:params:oauth:token-type:session:dev0:
          name: urn-devrev-params-oauth-token-type-session-dev0
        urn:devrev:params:oauth:token-type:session:onetime:
          name: urn-devrev-params-oauth-token-type-session-onetime
        urn:devrev:params:oauth:token-type:session:rev:act-as:
          name: urn-devrev-params-oauth-token-type-session-rev-act-as
        urn:devrev:params:oauth:token-type:super:
          name: urn-devrev-params-oauth-token-type-super
        urn:devrev:params:oauth:token-type:sys:
          name: urn-devrev-params-oauth-token-type-sys
        urn:ietf:params:oauth:token-type:jwt:
          name: urn-ietf-params-oauth-token-type-jwt
    auth-token-status:
      type: string
      description: The status of the token.
      enum:
        - active
        - expired
        - revoked
    auth-token-subject-token-type:
      type: string
      description: The type of the subject token.
      enum:
        - urn:devrev:params:oauth:token-type:jwt:auth0
        - urn:devrev:params:oauth:token-type:jwt:dev
        - urn:devrev:params:oauth:token-type:rat
        - urn:devrev:params:oauth:token-type:rev
        - urn:devrev:params:oauth:token-type:revinfo
        - urn:devrev:params:oauth:token-type:session
        - urn:devrev:params:oauth:token-type:sysu
        - urn:devrev:params:oauth:token-type:userinfo
        - urn:ietf:params:oauth:token-type:jwt
      x-fern-enum:
        urn:devrev:params:oauth:token-type:jwt:auth0:
          name: urn-devrev-params-oauth-token-type-jwt-auth0
        urn:devrev:params:oauth:token-type:jwt:dev:
          name: urn-devrev-params-oauth-token-type-jwt-dev
        urn:devrev:params:oauth:token-type:rat:
          name: urn-devrev-params-oauth-token-type-rat
        urn:devrev:params:oauth:token-type:rev:
          name: urn-devrev-params-oauth-token-type-rev
        urn:devrev:params:oauth:token-type:revinfo:
          name: urn-devrev-params-oauth-token-type-revinfo
        urn:devrev:params:oauth:token-type:session:
          name: urn-devrev-params-oauth-token-type-session
        urn:devrev:params:oauth:token-type:sysu:
          name: urn-devrev-params-oauth-token-type-sysu
        urn:devrev:params:oauth:token-type:userinfo:
          name: urn-devrev-params-oauth-token-type-userinfo
        urn:ietf:params:oauth:token-type:jwt:
          name: urn-ietf-params-oauth-token-type-jwt
    auth-token-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
      title: auth-token-summary
    auth-token-token-type:
      type: string
      description: |
        The type of the issued token. Bearer is the only supported token type.
      enum:
        - bearer
    auth-tokens-account-traits:
      type: object
      description: Carries account info.
      properties:
        custom_fields:
          type: object
          description: Application-defined custom fields of the account.
        display_name:
          type: string
          description: The display name of the account.
          format: text
        domains:
          type: array
          description: |
            List of company's domain names on accounts. Example -
            ['devrev.ai'].
          items:
            type: string
            format: text
      title: auth-tokens-account-traits
    auth-tokens-create-request:
      type: object
      description: |
        A request to create a new token corresponding to the requested token
        type.
      properties:
        act_as:
          type: string
          description: |
            The unique ID of the Dev user or the service account to
            impersonate.
          format: id
        aud:
          type: array
          description: The expected audience values with respect to the token.
          items:
            type: string
            format: text
        client_id:
          type: string
          description: |
            An identifier that represents the application which is requesting
            the token. If no client_id is present in the request to generate an
            application access token (AAT), DevRev will generate a client_id.
            This client_id is only associated with an AAT.
          format: text
        expires_in:
          type: integer
          description: |
            The expected validity lifetime of the token in number of days. In
            practice, the value should be based on the usage of the token.
          maximum: 4294967295
          minimum: 0
        grant_type:
          $ref: '#/components/schemas/auth-token-grant-type'
        requested_token_type:
          $ref: '#/components/schemas/auth-token-requested-token-type'
        rev_info:
          $ref: '#/components/schemas/auth-tokens-rev-info'
        scope:
          type: string
          description: |
            The requested set of scopes associated with the issued token. A
            space-delimited list of values in which the order of values does
            not matter.
          format: text
        subject_token:
          type: string
          description: |
            Represents the entity that requests the token. Not required when
            requesting an application access token (AAT).
          format: text
        subject_token_type:
          $ref: '#/components/schemas/auth-token-subject-token-type'
        token_hint:
          type: string
          description: A hint that identifies the token.
          format: text
      title: auth-tokens-create-request
    auth-tokens-create-response:
      type: object
      description: |
        Response for the request to create a new token corresponding to the
        requested token type.
      properties:
        access_token:
          type: string
          description: |
            The issued JSON Web Token (JWT) corresponding to the requested
            token type.
          format: text
        client_id:
          type: string
          description: |
            An identifier that represents the application which is requesting
            the token. Only present in a response corresponding to an
            application access token (AAT).
          format: text
        expires_in:
          type: integer
          description: |
            The validity lifetime of the token specified in seconds since Unix
            epoch.
          format: int64
        refresh_token:
          type: string
          description: A token to refresh the issued token.
          format: text
        scope:
          type: string
          description: |
            The scopes associated with the issued token. A space-delimited list
            of values in which the order of values does not matter.
          format: text
        token_type:
          $ref: '#/components/schemas/auth-token-token-type'
      required:
        - access_token
        - expires_in
        - token_type
      title: auth-tokens-create-response
      x-go-name: AuthTokensCreateResponseBody
    auth-tokens-delete-request:
      type: object
      description: The request to revoke the token.
      properties:
        token_id:
          type: string
          description: |
            The unique identifier for the token under a given Dev organization.
            If no token ID is provided, then the token ID will be set from the
            JTI claim of the token in the authorization header.
          format: id
      title: auth-tokens-delete-request
    auth-tokens-get-request:
      type: object
      description: The request to get the token metadata.
      properties:
        token_id:
          type: string
          description: |
            The unique identifier of the token under a given Dev organization.
          format: id
      required:
        - token_id
      title: auth-tokens-get-request
    auth-tokens-get-response:
      type: object
      description: The response to get the token metadata.
      properties:
        token:
          $ref: '#/components/schemas/auth-token'
      required:
        - token
      title: auth-tokens-get-response
      x-go-name: AuthTokensGetResponseBody
    auth-tokens-info-request:
      type: object
      additionalProperties: false
      description: |
        The request to get the Dev organization, user and token attributes
        extracted from the auth token.
      title: auth-tokens-info-request
    auth-tokens-info-response:
      type: object
      description: |
        The Dev organization, user and token attributes extracted from the auth
        token.
      properties:
        organization:
          $ref: '#/components/schemas/auth-tokens-org-attributes'
        token:
          $ref: '#/components/schemas/auth-tokens-token-attributes'
        user:
          $ref: '#/components/schemas/auth-tokens-user-attributes'
      required:
        - organization
        - token
        - user
      title: auth-tokens-info-response
      x-go-name: AuthTokensInfoResponseBody
    auth-tokens-list-request:
      type: object
      description: A request to list the token metadata.
      properties:
        client_id:
          type: string
          description: |
            An identifier that represents the application, which requested the
            token. Only relevant for application access tokens.
          format: text
        requested_token_type:
          $ref: '#/components/schemas/auth-token-requested-token-type'
        subject:
          type: string
          description: |
            The subject associated with the token. In the absence of this
            parameter, the ID of the authenticated entity is treated as the
            subject.
          format: id
      title: auth-tokens-list-request
    auth-tokens-list-response:
      type: object
      description: The response to list the token metadata.
      properties:
        tokens:
          type: array
          description: The list of token metadata.
          items:
            $ref: '#/components/schemas/auth-token'
      required:
        - tokens
      title: auth-tokens-list-response
      x-go-name: AuthTokensListResponseBody
    auth-tokens-org-attributes:
      type: object
      description: |
        The Dev organization attributes extracted from the auth token.
      properties:
        display_id:
          type: string
          description: The display ID of the Dev organization.
          format: text
        id:
          type: string
          description: The ID of the the Dev organization.
          example: DEV-AbCdEfGh
          format: id
        slug:
          type: string
          description: The slug of the Dev organization.
          format: text
      required:
        - display_id
        - id
      title: auth-tokens-org-attributes
    auth-tokens-org-traits:
      type: object
      description: Carries Rev org info.
      properties:
        custom_fields:
          type: object
          description: Application-defined custom fields of the Rev org.
        description:
          type: string
          description: The description of the Rev org.
          format: text
        display_name:
          type: string
          description: The display name of the Rev org.
          format: text
        domain:
          type: string
          deprecated: true
          description: The domain of the Rev org.
          format: text
        phone_numbers:
          type: array
          description: Phone numbers of the Rev org.
          items:
            type: string
            format: text
        tier:
          type: string
          description: The tier of the Rev org.
          format: text
      title: auth-tokens-org-traits
    auth-tokens-rev-info:
      type: object
      description: |
        Carries info corresponding to the Rev user to be provisioned and/or
        issue a Rev session token.
      properties:
        account_ref:
          type: string
          description: An identifier which uniquely identifies an account.
          format: text
        account_traits:
          $ref: '#/components/schemas/auth-tokens-account-traits'
        org_ref:
          type: string
          deprecated: true
          description: An identifier which uniquely identifies a Rev org.
          format: text
        org_traits:
          $ref: '#/components/schemas/auth-tokens-org-traits'
        user_id:
          type: string
          description: The unique ID of the Rev user.
          format: id
        user_ref:
          type: string
          description: An identifier which uniquely identifies a Rev user.
          format: text
        user_traits:
          $ref: '#/components/schemas/auth-tokens-user-traits'
        workspace_ref:
          type: string
          description: An identifier which uniquely identifies a workspace.
          format: text
        workspace_traits:
          $ref: '#/components/schemas/auth-tokens-org-traits'
      title: auth-tokens-rev-info
    auth-tokens-self-delete-request:
      type: object
      description: |
        The request to delete all the tokens created by the authenticated user,
        that match with the provided token type.
      properties:
        requested_token_type:
          $ref: '#/components/schemas/auth-token-requested-token-type'
      title: auth-tokens-self-delete-request
    auth-tokens-token-attributes:
      type: object
      description: The token attributes extracted from the auth token.
      properties:
        expiry:
          type: integer
          description: |
            The expiry (exp) of the token in seconds from Unix epoch.
          format: int64
        issued_at:
          type: integer
          description: |
            The issued at (iat) time of the token in seconds from Unix epoch.
          format: int64
        issuer:
          type: string
          description: The issuer ID (iss) of the token.
          format: text
        subject:
          type: string
          description: The subject (sub) of the token.
          format: text
      required:
        - expiry
        - issued_at
        - issuer
        - subject
      title: auth-tokens-token-attributes
    auth-tokens-update-request:
      type: object
      description: A request to update the token metadata.
      properties:
        token_hint:
          type: string
          description: A hint that identifies the token.
          format: text
        token_id:
          type: string
          description: |
            The unique identifier of the token under a given Dev organization.
          format: id
      required:
        - token_hint
        - token_id
      title: auth-tokens-update-request
    auth-tokens-update-response:
      type: object
      description: Response for the request to update the token metadata.
      properties:
        token:
          $ref: '#/components/schemas/auth-token'
      required:
        - token
      title: auth-tokens-update-response
      x-go-name: AuthTokensUpdateResponseBody
    auth-tokens-user-attributes:
      type: object
      description: The user attributes extracted from the auth token.
      properties:
        type:
          $ref: '#/components/schemas/user-type'
        display_id:
          type: string
          description: The display ID of the user.
          format: text
        display_name:
          type: string
          description: The display name of the user.
          format: text
        email:
          type: string
          description: The email address of the user.
          format: text
        full_name:
          type: string
          description: The full name of the user.
          format: text
        id:
          type: string
          description: The ID of the user.
          format: id
      required:
        - display_id
        - id
        - type
      title: auth-tokens-user-attributes
    auth-tokens-user-traits:
      type: object
      description: Carries Rev user info.
      properties:
        custom_fields:
          type: object
          description: Application-defined custom fields of the Rev user.
        description:
          type: string
          description: The description of the Rev user.
          format: text
        display_name:
          type: string
          description: The display name of the Rev user.
          format: text
        email:
          type: string
          description: The email address of the Rev user.
          format: text
        full_name:
          type: string
          deprecated: true
          description: The full name of the Rev user.
          format: text
        phone_numbers:
          type: array
          description: Phone numbers of the Rev user.
          items:
            type: string
            format: text
      title: auth-tokens-user-traits
    boolean-expression:
      type: object
      description: Boolean expression.
      discriminator:
        mapping:
          and: '#/components/schemas/boolean-expression-and-expression'
          not: '#/components/schemas/boolean-expression-not-expression'
          or: '#/components/schemas/boolean-expression-or-expression'
          primitive: '#/components/schemas/boolean-expression-primitive-expression'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/boolean-expression-and-expression'
        - $ref: '#/components/schemas/boolean-expression-not-expression'
        - $ref: '#/components/schemas/boolean-expression-or-expression'
        - $ref: '#/components/schemas/boolean-expression-primitive-expression'
      properties:
        type:
          $ref: '#/components/schemas/boolean-expression-type'
      required:
        - type
      title: boolean-expression
    boolean-expression-and-expression:
      type: object
      description: All the expressions would be 'and'ed together.
      properties:
        expressions:
          type: array
          items:
            $ref: '#/components/schemas/boolean-expression'
      required:
        - expressions
      title: boolean-expression-and-expression
    boolean-expression-not-expression:
      type: object
      description: The expression would be negated.
      properties:
        expression:
          $ref: '#/components/schemas/boolean-expression'
      required:
        - expression
      title: boolean-expression-not-expression
    boolean-expression-or-expression:
      type: object
      description: All the expressions would be 'or'ed together.
      properties:
        expressions:
          type: array
          items:
            $ref: '#/components/schemas/boolean-expression'
      required:
        - expressions
      title: boolean-expression-or-expression
    boolean-expression-primitive-expression:
      type: object
      additionalProperties: false
      description: The primitive expression type.
      title: boolean-expression-primitive-expression
    boolean-expression-type:
      type: string
      enum:
        - and
        - not
        - or
        - primitive
    capability:
      allOf:
        - $ref: '#/components/schemas/part-base'
      title: capability
    capability-summary:
      allOf:
        - $ref: '#/components/schemas/part-base-summary'
      title: capability-summary
    chat:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          $ref: '#/components/schemas/chat-type'
      required:
        - type
      title: chat
    chat-type:
      type: string
    chats-create-request:
      type: object
      discriminator:
        mapping:
          dm: '#/components/schemas/chats-create-request-dm'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/chats-create-request-dm'
      properties:
        type:
          $ref: '#/components/schemas/chat-type'
        custom_fields:
          type: object
          description: Application-defined custom fields.
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        get_if_conflict:
          type: boolean
          description: |
            If true and a chat already exists with unique properties that
            conflict with the chat creation, then the existing chat is returned
            without error, otherwise if false, a conflict error is returned.
        title:
          type: string
          description: The title for the chat.
          format: text
      required:
        - type
      title: chats-create-request
    chats-create-request-dm:
      type: object
      properties:
        is_default:
          type: boolean
          description: |
            Whether this is the default DM for messaging the constituent users.
            If true, then this DM is always returned when opening a DM for the
            users. Note only one DM may be the default for a given set of
            users. By Default, this is true.
        records:
          type: array
          description: The associated records for this DM.
          items:
            type: string
            format: id
          maxItems: 16
        users:
          type: array
          description: |
            The users to send direct messages to. The authenticated user must
            be included in this list.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
          maxItems: 16
          minItems: 1
      required:
        - users
      title: chats-create-request-dm
    chats-create-response:
      type: object
      properties:
        chat:
          $ref: '#/components/schemas/chat'
      required:
        - chat
      title: chats-create-response
      x-go-name: ChatsCreateResponseBody
    chats-get-request:
      type: object
      discriminator:
        mapping:
          dm: '#/components/schemas/chats-get-request-dm'
          none: '#/components/schemas/empty'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/chats-get-request-dm'
        - $ref: '#/components/schemas/empty'
      properties:
        type:
          $ref: '#/components/schemas/chat-type'
        id:
          type: string
          description: The chat's ID.
          example: CHAN-AbCdEfGh
          format: id
      title: chats-get-request
    chats-get-request-dm:
      type: object
      properties:
        users:
          type: array
          description: |
            The users to send direct messages to. Note the authenticated user
            must be included in this list.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
          maxItems: 16
          minItems: 1
      required:
        - users
      title: chats-get-request-dm
    chats-get-response:
      type: object
      properties:
        chat:
          $ref: '#/components/schemas/chat'
      required:
        - chat
      title: chats-get-response
      x-go-name: ChatsGetResponseBody
    chats-update-request:
      type: object
      discriminator:
        mapping:
          dm: '#/components/schemas/chats-update-request-dm'
          none: '#/components/schemas/empty'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/chats-update-request-dm'
        - $ref: '#/components/schemas/empty'
      properties:
        type:
          $ref: '#/components/schemas/chat-type'
        custom_fields:
          type: object
          description: Application-defined custom fields.
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        id:
          type: string
          description: The chat's ID.
          example: CHAN-AbCdEfGh
          format: id
        title:
          type: string
          description: |
            The updated title for the chat, or unchanged if not provided.
          format: text
      required:
        - id
      title: chats-update-request
    chats-update-request-dm:
      type: object
      properties:
        records:
          $ref: '#/components/schemas/chats-update-request-dm-records'
        users:
          $ref: '#/components/schemas/chats-update-request-dm-users'
      title: chats-update-request-dm
    chats-update-request-dm-records:
      type: object
      properties:
        set:
          type: array
          description: The associated records to set for this DM.
          items:
            type: string
            format: id
          maxItems: 16
      title: chats-update-request-dm-records
    chats-update-request-dm-users:
      type: object
      properties:
        set:
          type: array
          description: |
            The updated list of users to send direct messages to. The
            authenticated user must be included in this list.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
          maxItems: 16
          minItems: 1
      required:
        - set
      title: chats-update-request-dm-users
    chats-update-response:
      type: object
      properties:
        chat:
          $ref: '#/components/schemas/chat'
      required:
        - chat
      title: chats-update-response
      x-go-name: ChatsUpdateResponseBody
    client-override:
      type: object
      description: UI hint overrides for a client.
      properties:
        client_name:
          type: string
          description: The name of the client.
          format: text
        decimal_places:
          type: integer
          description: |
            Number of decimal places to show. Only applicable for number
            fields.
          format: int32
        display_name:
          type: string
          description: The display name of the field.
          format: text
        is_groupable:
          type: boolean
          description: Whether the field is groupable in the UI.
        is_hidden:
          type: boolean
          description: Whether the field is hidden in the UI.
        order:
          type: integer
          description: Relative order in which the field is shown.
          format: int32
        placeholder:
          type: string
          description: A placeholder for the field.
          format: text
        tooltip:
          type: string
          description: Tooltip for the field.
          format: text
        use_shorthand_notation:
          type: boolean
          description: |
            Whether to use shorthand notation. Example, 1K instead of 1000.
            Only applicable for number fields.
        view_overrides:
          type: array
          description: The view overrides for the client.
          items:
            $ref: '#/components/schemas/view-override'
      title: client-override
    code-change:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            branch:
              type: string
              description: Name of the code branch in the repo.
              format: text
            closed_date:
              type: string
              description: |
                Time at which the code change corresponding to this object reached
                a closed or merged stage. For example, the time at which a Pull
                Request was either closed without merging or successfully merged.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
            commit_id:
              type: string
              description: Commit ID of the merged commit in the target branch.
              format: text
            description:
              type: string
              description: Detailed description of the contents of this change.
              format: text
            external_identifier:
              type: string
              description: |
                Unique external identifier for this change.e.g Pull Request URL.
              format: text
            filtered_loc:
              $ref: '#/components/schemas/lines-of-code'
            repo_url:
              type: string
              description: URL pointing to the repo this change was on.
              format: text
            source:
              $ref: '#/components/schemas/code-change-source'
            target_branch:
              type: string
              description: Name of the target branch in the repo.
              format: text
            title:
              type: string
              description: Title describing in brief the contents of this change.
              format: text
            total_loc:
              $ref: '#/components/schemas/lines-of-code'
      title: code-change
    code-change-source:
      type: string
      description: Source of the code change object.
      enum:
        - azure_devops
        - bitbucket
        - github
        - gitlab
    code-changes-create-request:
      type: object
      properties:
        custom_fields:
          type: object
          description: Application-defined custom fields.
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
      title: code-changes-create-request
    code-changes-create-response:
      type: object
      properties:
        code_change:
          $ref: '#/components/schemas/code-change'
      required:
        - code_change
      title: code-changes-create-response
      x-go-name: CodeChangesCreateResponseBody
    code-changes-delete-request:
      type: object
      properties:
        id:
          type: string
          description: ID of the code change object which is to be deleted.
          format: id
      required:
        - id
      title: code-changes-delete-request
    code-changes-delete-response:
      type: object
      additionalProperties: false
      title: code-changes-delete-response
      x-go-name: CodeChangesDeleteResponseBody
    code-changes-get-request:
      type: object
      properties:
        id:
          type: string
          description: The code change object ID.
          format: id
      required:
        - id
      title: code-changes-get-request
    code-changes-get-response:
      type: object
      properties:
        code_change:
          $ref: '#/components/schemas/code-change'
      required:
        - code_change
      title: code-changes-get-response
      x-go-name: CodeChangesGetResponseBody
    code-changes-list-request:
      type: object
      properties:
        created_date:
          $ref: '#/components/schemas/date-filter'
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        limit:
          type: integer
          description: |
            The maximum number of code change objects to return. The default is
            '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-filter'
      title: code-changes-list-request
    code-changes-list-response:
      type: object
      properties:
        code_changes:
          type: array
          description: The list of requested code change objects.
          items:
            $ref: '#/components/schemas/code-change'
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
      required:
        - code_changes
      title: code-changes-list-response
      x-go-name: CodeChangesListResponseBody
    code-changes-update-request:
      type: object
      properties:
        custom_fields:
          type: object
          description: Application-defined custom fields.
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        id:
          type: string
          description: The ID of the code change object to be updated.
          format: id
      required:
        - id
      title: code-changes-update-request
    code-changes-update-response:
      type: object
      properties:
        code_change:
          $ref: '#/components/schemas/code-change'
      required:
        - code_change
      title: code-changes-update-response
      x-go-name: CodeChangesUpdateResponseBody
    command:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            description:
              type: string
              description: Description of the command.
              format: text
            display_name:
              type: string
              description: Display name of the command.
              format: text
            name:
              type: string
              description: Name of the command.
              format: text
            namespace:
              type: string
              description: Namespace of the command.
              format: text
            shared_with:
              type: array
              description: |
                The list of users, groups and audiences with whom the command is
                shared.
              items:
                $ref: '#/components/schemas/shared-with-membership'
            status:
              $ref: '#/components/schemas/command-status'
            surfaces:
              type: array
              description: Surfaces where this command can be invoked.
              items:
                $ref: '#/components/schemas/command-surface'
            usage_hint:
              type: string
              description: |
                A user friendly description of the parameters which can be passed
                to the command.
              format: text
      title: command
    command-action-executor-type:
      type: string
      description: Specifies how the action is defined.
      enum:
        - rego
        - workflow
    command-action-template-type:
      type: string
      description: The template engine for resolving message.
      enum:
        - devrev_v1
    command-create-request:
      type: object
      description: The request to create a command.
      properties:
        action:
          $ref: '#/components/schemas/create-command-action'
        description:
          type: string
          description: Description of the command.
          format: text
        display_name:
          type: string
          description: Display name of the command.
          format: text
        name:
          type: string
          description: Name of the command.
          format: text
        namespace:
          type: string
          description: Namespace of the command.
          format: text
        shared_with:
          type: array
          description: |
            The list of users, groups and audiences with whom the command is
            shared.
          items:
            $ref: '#/components/schemas/set-shared-with-membership'
        source:
          type: string
          description: ID of the source which created this command.
          format: id
        status:
          $ref: '#/components/schemas/command-status'
        surfaces:
          type: array
          description: Surfaces where this command can be invoked.
          items:
            $ref: '#/components/schemas/create-command-surface'
        usage_hint:
          type: string
          description: |
            A user friendly description of the parameters which can be passed
            to the command.
          format: text
      required:
        - name
        - namespace
      title: command-create-request
    command-create-response:
      type: object
      properties:
        command:
          $ref: '#/components/schemas/command'
      required:
        - command
      title: command-create-response
      x-go-name: CommandCreateResponseBody
    command-get-request:
      type: object
      description: The request to get a command.
      properties:
        id:
          type: string
          description: The command's ID.
          format: id
      required:
        - id
      title: command-get-request
    command-get-response:
      type: object
      properties:
        command:
          $ref: '#/components/schemas/command'
      required:
        - command
      title: command-get-response
      x-go-name: CommandGetResponseBody
    command-status:
      type: string
      description: Status of the command.
      enum:
        - disabled
        - draft
        - enabled
    command-surface:
      type: object
      description: |
        Metadata defining which surfaces this command can be executed on.
      properties:
        object_types:
          type: array
          description: Objects types on which a command can be invoked.
          items:
            $ref: '#/components/schemas/command-surface-object-types'
        surface:
          $ref: '#/components/schemas/command-surface-surface'
      title: command-surface
    command-surface-object-types:
      type: string
      description: Objects types on which a command can be invoked.
      enum:
        - account
        - ai_assistant_chat
        - article
        - conversation
        - custom_object
        - dm
        - engagement
        - flow
        - incident
        - issue
        - opportunity
        - part
        - rev_org
        - rev_user
        - snap_in
        - ticket
    command-surface-surface:
      type: string
      description: Surfaces from where this command can be invoked.
      enum:
        - customer_chat
        - discussions
    command-update-request:
      type: object
      description: The request to update a command.
      properties:
        action:
          $ref: '#/components/schemas/update-command-action'
        description:
          type: string
          description: Description of the command.
          format: text
        display_name:
          type: string
          description: Display name of the command.
          format: text
        id:
          type: string
          description: The ID of the command to update.
          format: id
        name:
          type: string
          description: Name of the command.
          format: text
        namespace:
          type: string
          description: Namespace of the command.
          format: text
        shared_with:
          type: array
          description: |
            The list of users, groups and audiences with whom the command is
            shared.
          items:
            $ref: '#/components/schemas/set-shared-with-membership'
        source:
          type: string
          description: ID of the source which created this command.
          format: id
        status:
          $ref: '#/components/schemas/command-status'
        surfaces:
          type: array
          description: Surfaces where this command can be invoked.
          items:
            $ref: '#/components/schemas/update-command-surface'
        usage_hint:
          type: string
          description: |
            A user friendly description of the parameters which can be passed
            to the command.
          format: text
      required:
        - id
      title: command-update-request
    command-update-response:
      type: object
      properties:
        command:
          $ref: '#/components/schemas/command'
      required:
        - command
      title: command-update-response
      x-go-name: CommandUpdateResponseBody
    commands-list-request:
      type: object
      properties:
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        executor_type:
          type: array
          description: Filtering based on executor_type.
          items:
            $ref: '#/components/schemas/command-action-executor-type'
        limit:
          type: integer
          description: |
            The maximum number of commands to return per page. The default is
            '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        namespace:
          type: array
          description: Filter commands based on namespace.
          items:
            type: string
            format: text
        sort_by:
          type: array
          description: |
            List of fields to sort the commands items by and how to sort them.
          items:
            type: string
            format: sort-by
        source_object_id:
          type: string
          description: |
            ID of the object where command is invoked (work/part/conversation).
          format: id
        status:
          type: array
          description: Filter commands based on status.
          items:
            $ref: '#/components/schemas/command-status'
      title: commands-list-request
    commands-list-response:
      type: object
      properties:
        commands:
          type: array
          description: List of commands.
          items:
            $ref: '#/components/schemas/command'
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
      required:
        - commands
      title: commands-list-response
      x-go-name: CommandsListResponseBody
    composite-schema:
      type: object
      description: The schema of a composite type.
      properties:
        description:
          type: string
          description: Description of this composite type.
          format: text
        fields:
          type: array
          description: List of all fields in this schema.
          items:
            $ref: '#/components/schemas/schema-field-descriptor'
        name:
          type: string
          description: Name of this composite type.
          format: text
      required:
        - fields
      title: composite-schema
    conversation:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            channels:
              type: array
              description: Channel IDs of the conversation.
              items:
                $ref: '#/components/schemas/external-communication-channel-summary'
            description:
              type: string
              description: Description of the conversation object.
              format: text
            group:
              $ref: '#/components/schemas/group-summary'
            members:
              type: array
              description: The users in the conversation.
              items:
                $ref: '#/components/schemas/user-summary'
            messages:
              type: array
              description: The latest messages on the conversation.
              items:
                $ref: '#/components/schemas/timeline-entry'
            metadata:
              $ref: '#/components/schemas/conversation-metadata'
            owned_by:
              type: array
              description: Owner IDs for the conversation.
              items:
                $ref: '#/components/schemas/user-summary'
            sla_summary:
              $ref: '#/components/schemas/archetype-sla-summary'
            sla_tracker:
              $ref: '#/components/schemas/sla-tracker-summary'
            source_channel:
              type: string
              description: Source channel for the conversation.
              format: text
            source_channel_v2:
              $ref: '#/components/schemas/external-communication-channel-summary'
            stage:
              $ref: '#/components/schemas/legacy-stage'
            tags:
              type: array
              description: Tags associated with the object.
              items:
                $ref: '#/components/schemas/tag-with-value'
            title:
              type: string
              description: Title of the conversation object.
              format: text
          required:
            - members
      title: conversation
    conversation-metadata:
      type: object
      description: Metadata on conversation.
      properties:
        url_context:
          type: string
          description: |
            URL from which the conversation was created if the conversation was
            created via PLuG.
          format: text
      title: conversation-metadata
    conversation-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            title:
              type: string
              description: Title of the conversation object.
              format: text
      title: conversation-summary
    conversations-create-request:
      type: object
      description: The request to create a new conversation.
      properties:
        type:
          $ref: '#/components/schemas/conversations-create-request-type-value'
        brand:
          type: string
          description: The brand associated with the conversation.
          format: id
        channels:
          type: array
          description: Channel IDs of the conversation.
          items:
            type: string
            format: id
        custom_fields:
          type: object
          description: Application-defined custom fields.
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        description:
          type: string
          description: Description for the conversation.
          format: text
        group:
          type: string
          description: The group that the conversation is associated with.
          format: id
        is_spam:
          type: boolean
          description: Whether the conversation is spam.
        members:
          type: array
          description: The users in the conversation.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        messages:
          type: array
          description: Initial messages on the conversation.
          items:
            $ref: '#/components/schemas/conversations-create-request-message'
        metadata:
          $ref: '#/components/schemas/conversations-create-request-metadata'
        owned_by:
          type: array
          description: The users that own the conversation.
          items:
            type: string
            format: id
        source_channel:
          type: string
          description: Whether the conversation is from a source channel.
          format: text
        source_channel_v2:
          type: string
          description: Source channel ID of the conversation.
          format: id
        stage:
          $ref: '#/components/schemas/stage-init'
        tags:
          type: array
          description: Tags associated with the conversation.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
        title:
          type: string
          description: The title for the conversation.
          format: text
        user_sessions:
          type: array
          description: |
            The IDs of user sessions associated with the conversation.
          items:
            type: string
            format: id
      required:
        - type
      title: conversations-create-request
    conversations-create-request-message:
      type: object
      properties:
        artifacts:
          type: array
          description: The IDs of the artifacts to the message.
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
        body:
          type: string
          description: The message's body.
          format: text
      title: conversations-create-request-message
    conversations-create-request-metadata:
      type: object
      properties:
        url_context:
          type: string
          format: text
      title: conversations-create-request-metadata
    conversations-create-request-type-value:
      type: string
      enum:
        - support
    conversations-create-response:
      type: object
      description: The response to creating a new conversation.
      properties:
        conversation:
          $ref: '#/components/schemas/conversation'
      required:
        - conversation
      title: conversations-create-response
      x-go-name: ConversationsCreateResponseBody
    conversations-delete-request:
      type: object
      description: The request to delete a conversation.
      properties:
        id:
          type: string
          description: The ID of the conversation to delete.
          format: id
      required:
        - id
      title: conversations-delete-request
    conversations-delete-response:
      type: object
      additionalProperties: false
      description: The response for deleting a conversation.
      title: conversations-delete-response
      x-go-name: ConversationsDeleteResponseBody
    conversations-get-request:
      type: object
      description: The request to get a conversation's information.
      properties:
        id:
          type: string
          description: The requested conversation's ID.
          format: id
      required:
        - id
      title: conversations-get-request
    conversations-get-response:
      type: object
      description: The response to getting a conversation's information.
      properties:
        conversation:
          $ref: '#/components/schemas/conversation'
      required:
        - conversation
      title: conversations-get-response
      x-go-name: ConversationsGetResponseBody
    conversations-list-request:
      type: object
      description: |
        The request to get information about a list of conversations.
      properties:
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        applies_to_parts:
          type: array
          description: |
            Filters for conversations belonging to any of the provided parts.
          example:
            - PROD-12345
          items:
            type: string
            format: id
        brand:
          type: array
          description: |
            Filters for tickets that are associated with any of the brands.
          items:
            type: string
            format: id
        channels:
          type: array
          description: |
            Filters for conversations that are associated with any of the
            channels.
          items:
            type: string
            format: id
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        group:
          type: array
          description: |
            Filters for conversation that belong to the given groups.
          items:
            type: string
            format: id
        is_creator_verified:
          type: boolean
          description: |
            Filters for conversations that are created by verified users.
        is_frozen:
          type: boolean
          description: Filters for conversations that are frozen.
        is_spam:
          type: boolean
          description: Filters for conversations that are spam.
        limit:
          type: integer
          description: |
            The maximum number of conversations to return. The default is '50'.
          format: int32
        members:
          type: array
          description: |
            Filters for conversations where these users are participants.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          type: array
          description: Filters for conversations owned by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        rev_org:
          type: array
          deprecated: true
          description: |
            Filters for conversations that are associated with any of the
            provided Rev organizations.
          example:
            - REV-AbCdEfGh
          items:
            type: string
            format: id
        rev_orgs:
          type: array
          description: |
            Filters for conversations that are associated with any of the
            provided Rev organizations.
          example:
            - REV-AbCdEfGh
          items:
            type: string
            format: id
        sla_summary:
          $ref: '#/components/schemas/sla-summary-filter'
        source_channel:
          type: array
          description: |
            Filters for conversations with any of the provided source channels.
          items:
            type: string
            format: text
        source_channel_v2:
          type: array
          description: |
            Filters for conversations that are associated with the source
            channel.
          items:
            type: string
            format: id
        source_channels:
          type: array
          deprecated: true
          description: |
            Filters for conversations with any of the provided source channels.
          items:
            type: string
            format: text
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          type: array
          description: |
            Filters for conversations with any of the provided states.
          items:
            type: string
            format: text
        tags:
          type: array
          deprecated: true
          description: Filters for conversations with any of the provided tags.
          example:
            - TAG-12345
          items:
            type: string
            format: id
        tags_v2:
          type: array
          description: |
            Filters for conversations with any of the provided tags with value.
          items:
            $ref: '#/components/schemas/tag-with-value-filter'
      title: conversations-list-request
    conversations-list-response:
      type: object
      description: The response to listing the conversations.
      properties:
        conversations:
          type: array
          description: The list of conversations.
          items:
            $ref: '#/components/schemas/conversation'
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
      required:
        - conversations
      title: conversations-list-response
      x-go-name: ConversationsListResponseBody
    conversations-update-request:
      type: object
      description: The request to update a conversation.
      properties:
        applies_to_parts:
          $ref: '#/components/schemas/conversations-update-request-applies-to-parts'
        brand:
          type: string
          description: The brand associated with the conversation.
          format: id
        channels:
          $ref: '#/components/schemas/conversations-update-request-channels'
        custom_fields:
          type: object
          description: Application-defined custom fields.
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        description:
          type: string
          description: The updated description for the conversation.
          format: text
        group:
          type: string
          description: The group that the conversation is associated with.
          format: id
        id:
          type: string
          description: The ID of the conversation to update.
          format: id
        is_frozen:
          type: boolean
          description: Whether the conversation is frozen.
        is_spam:
          type: boolean
          description: Whether the conversation is spam.
        members:
          $ref: '#/components/schemas/conversations-update-request-members'
        metadata:
          $ref: '#/components/schemas/conversations-update-request-metadata'
        owned_by:
          $ref: '#/components/schemas/conversations-update-request-owned-by'
        source_channel_v2:
          type: string
          description: Source channel ID of the conversation.
          format: id
        stage:
          $ref: '#/components/schemas/stage-update'
        status:
          type: string
          description: The updated status of the conversation.
          format: text
        tags:
          $ref: '#/components/schemas/conversations-update-request-tags'
        title:
          type: string
          description: The updated title of the conversation.
          format: text
        user_sessions:
          $ref: '#/components/schemas/conversations-update-request-user-sessions'
      required:
        - id
      title: conversations-update-request
    conversations-update-request-applies-to-parts:
      type: object
      properties:
        set:
          type: array
          description: Updates the parts that the conversation applies to.
          example:
            - PROD-12345
          items:
            type: string
            format: id
      title: conversations-update-request-applies-to-parts
    conversations-update-request-channels:
      type: object
      properties:
        set:
          type: array
          description: Sets the channel IDs of the conversation.
          items:
            type: string
            format: id
      title: conversations-update-request-channels
    conversations-update-request-members:
      type: object
      properties:
        set:
          type: array
          description: Sets the member IDs to the provided user IDs.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
      title: conversations-update-request-members
    conversations-update-request-metadata:
      type: object
      properties:
        url_context:
          type: string
          format: text
      title: conversations-update-request-metadata
    conversations-update-request-owned-by:
      type: object
      properties:
        set:
          type: array
          description: Sets the owner IDs to the provided user IDs.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
      title: conversations-update-request-owned-by
    conversations-update-request-tags:
      type: object
      properties:
        add:
          type: array
          description: Adds the provided tags on the conversation.
          items:
            $ref: '#/components/schemas/add-tag-with-value'
        remove:
          type: array
          description: Removes the provided tags on the conversation.
          items:
            $ref: '#/components/schemas/remove-tag-with-value'
        set:
          type: array
          description: Sets the tag IDs to the provided tags.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
      title: conversations-update-request-tags
    conversations-update-request-user-sessions:
      type: object
      properties:
        set:
          type: array
          description: |
            The updated user sessions that the conversation is associated with.
          items:
            type: string
            format: id
      title: conversations-update-request-user-sessions
    conversations-update-response:
      type: object
      description: The response for updating a conversation.
      properties:
        conversation:
          $ref: '#/components/schemas/conversation'
      required:
        - conversation
      title: conversations-update-response
      x-go-name: ConversationsUpdateResponseBody
    conversations-vista-group-item:
      allOf:
        - $ref: '#/components/schemas/vista-group-base'
        - type: object
          discriminator:
            propertyName: type
          properties:
            type:
              $ref: '#/components/schemas/conversations-vista-group-item-type'
          required:
            - type
      description: Represents a nested conversations vista group object.
      title: conversations-vista-group-item
    conversations-vista-group-item-type:
      type: string
      description: Type of conversations vista group item.
      enum:
        - curated
        - dynamic
    create-command-action:
      type: object
      properties:
        action_details:
          $ref: '#/components/schemas/create-command-action-details'
        artifacts:
          type: array
          description: IDs of the new artifact items
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
        code:
          type: string
          description: |
            The raw code to execute, defined in the language specified by
            executor
          format: text
        executor_config:
          type: object
          description: Executor specific config
        executor_type:
          $ref: '#/components/schemas/command-action-executor-type'
        message:
          type: string
          description: |
            The message to populate in discussion box, when the command is
            selected to execute.
          format: text
        snap_in_function_id:
          type: string
          description: |
            Function containing logic for the command. If function ID is
            specified the executor config is ignored and command is executed by
            functions.
          format: id
        template_type:
          $ref: '#/components/schemas/command-action-template-type'
      required:
        - executor_type
      title: create-command-action
    create-command-action-details:
      type: object
      properties:
        object_update_payload:
          type: object
          description: |
            The payload to update the object in context upon command execution.
      title: create-command-action-details
    create-command-surface:
      type: object
      properties:
        object_types:
          type: array
          description: Objects types on which a command can be invoked
          items:
            $ref: '#/components/schemas/command-surface-object-types'
        surface:
          $ref: '#/components/schemas/command-surface-surface'
      required:
        - surface
      title: create-command-surface
    create-org-schedule-interval:
      type: object
      properties:
        from:
          type: string
          description: Date (inclusive) on which the interval begins.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        is_excluded:
          type: boolean
          description: |
            If true, no organization schedule is looked up for these days and
            they are marked as holidays.
        name:
          type: string
          description: |
            The name of the period, for example the event or holiday it
            represents.
          format: text
        to:
          type: string
          description: |
            Date (exclusive) on which the interval ends. If omitted, it is a
            single day interval.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
      required:
        - from
        - name
      title: create-org-schedule-interval
    create-stage-node:
      type: object
      properties:
        is_deprecated:
          type: boolean
          description: Whether this stage is deprecated.
        is_start:
          type: boolean
          description: Whether this is the start stage.
        stage_id:
          type: string
          description: The ID of the stage.
          format: id
        transitions:
          type: array
          description: List of transitions from this stage.
          items:
            $ref: '#/components/schemas/create-stage-transition'
      required:
        - stage_id
      title: create-stage-node
    create-stage-transition:
      type: object
      properties:
        target_stage_id:
          type: string
          description: The ID of the target stage.
          format: id
        ui:
          $ref: '#/components/schemas/create-stage-ui-metadata'
      required:
        - target_stage_id
      title: create-stage-transition
    create-stage-ui-metadata:
      type: object
      properties:
        is_hidden:
          type: boolean
          description: Whether the stage is hidden.
      title: create-stage-ui-metadata
    create-weekly-org-schedule-interval:
      type: object
      properties:
        from:
          type: integer
          description: |
            Duration in minutes of the week when the interval starts. 0 is
            Sunday midnight, when Sunday ends and Monday begins.
          format: int64
        to:
          type: integer
          description: |
            Duration in minutes of the week when the interval ends (must be
            larger than 'from'). 0 is Sunday midnight, when Sunday ends and
            Monday begins.
          format: int64
      required:
        - from
        - to
      title: create-weekly-org-schedule-interval
    curated-vista:
      allOf:
        - $ref: '#/components/schemas/vista-base'
        - type: object
          properties:
            items:
              type: array
              description: Item list to store a curated list of DevRev objects.
              items:
                $ref: '#/components/schemas/atom-summary'
      description: Static collection of DevRev objects.
      title: curated-vista
    custom-object:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            leaf_type:
              type: string
              description: Type of the object.
              format: text
            stage:
              $ref: '#/components/schemas/stage'
            title:
              type: string
              description: Title of the object.
              format: text
            unique_key:
              type: string
              description: |
                A unique key that, if provided, ensures the combination of
                {leaf_type, unique_key} is distinct across all objects in the
                system.
              format: text
      title: custom-object
    custom-objects-count-request:
      type: object
      properties:
        filters:
          type: array
          description: List of filters to apply.
          items: {}
        leaf_type:
          type: string
          description: Leaf type to filter.
          format: text
      required:
        - leaf_type
      title: custom-objects-count-request
    custom-objects-count-response:
      type: object
      properties:
        count:
          type: integer
          description: The count of custom objects.
          format: int64
      required:
        - count
      title: custom-objects-count-response
      x-go-name: CustomObjectsCountResponseBody
    custom-objects-create-request:
      type: object
      properties:
        custom_fields:
          type: object
          description: Custom fields of the custom object.
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        leaf_type:
          type: string
          description: Leaf type of the custom object.
          format: text
        stage:
          type: string
          description: The stage of the custom object.
          format: id
        stage_validation_options:
          type: array
          description: |
            The type of stage validations options when creating a custom
            object.
          items:
            $ref: '#/components/schemas/stage-validation-option-for-create'
        title:
          type: string
          description: Title of the custom object.
          format: text
        unique_key:
          type: string
          description: |
            The unique key of the custom object.This can be used to hold an
            external reference to another object.
          format: text
      required:
        - leaf_type
      title: custom-objects-create-request
    custom-objects-create-response:
      type: object
      properties:
        custom_object:
          $ref: '#/components/schemas/custom-object'
      required:
        - custom_object
      title: custom-objects-create-response
      x-go-name: CustomObjectsCreateResponseBody
    custom-objects-delete-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the custom object to get.
          format: id
      required:
        - id
      title: custom-objects-delete-request
    custom-objects-delete-response:
      type: object
      additionalProperties: false
      title: custom-objects-delete-response
      x-go-name: CustomObjectsDeleteResponseBody
    custom-objects-get-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the custom object to get.
          format: id
      title: custom-objects-get-request
    custom-objects-get-response:
      type: object
      properties:
        custom_object:
          $ref: '#/components/schemas/custom-object'
      required:
        - custom_object
      title: custom-objects-get-response
      x-go-name: CustomObjectsGetResponseBody
    custom-objects-list-request:
      type: object
      properties:
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        filter:
          type: array
          description: List of filters to apply.
          items: {}
        filters:
          type: array
          description: List of filters to apply.
          items: {}
        leaf_type:
          type: string
          description: Leaf type to filter.
          format: text
        limit:
          type: integer
          description: The maximum number of items.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        sort_by:
          type: array
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
            format: sort-by
      required:
        - leaf_type
      title: custom-objects-list-request
    custom-objects-list-response:
      type: object
      description: |
        The response to listing all custom objects matching the filter
        criteria.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        result:
          type: array
          description: The custom objects.
          items:
            $ref: '#/components/schemas/custom-object'
      required:
        - result
      title: custom-objects-list-response
      x-go-name: CustomObjectsListResponseBody
    custom-objects-update-request:
      type: object
      properties:
        custom_fields:
          type: object
          description: Custom fields of the custom object.
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        id:
          type: string
          description: The ID of the custom object to update.
          format: id
        stage:
          type: string
          description: Updates the stage of the custom object.
          format: id
          nullable: true
        stage_validation_options:
          type: array
          description: |
            The type of stage validations options when updating the stage or
            the stage diagram of a custom object.
          items:
            $ref: '#/components/schemas/stage-validation-option-for-update'
        title:
          type: string
          description: Updates the title of the custom object.
          format: text
          nullable: true
      required:
        - id
      title: custom-objects-update-request
    custom-objects-update-response:
      type: object
      properties:
        custom_object:
          $ref: '#/components/schemas/custom-object'
      required:
        - custom_object
      title: custom-objects-update-response
      x-go-name: CustomObjectsUpdateResponseBody
    custom-schema-fragment:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          $ref: '#/components/schemas/custom-schema-fragment-type'
      required:
        - type
      title: custom-schema-fragment
    custom-schema-fragment-condition:
      type: object
      description: The condition associated with a field.
      properties:
        effects:
          type: array
          description: |
            The associated effects when the expression evaluates to true.
          items:
            $ref: '#/components/schemas/custom-schema-fragment-effect'
        expression:
          type: string
          description: The expression to evaluate.
          format: text
      title: custom-schema-fragment-condition
    custom-schema-fragment-effect:
      type: object
      description: An effect associated with a condition.
      properties:
        allowed_values:
          type: array
          description: |
            Allowed values for the fields based on the condition. This takes
            precedence over allowed_values in field_descriptor.
          items:
            type: string
            format: text
        fields:
          type: array
          description: The fields which are affected by the condition.
          items:
            type: string
            format: text
        immutable:
          type: boolean
          description: |
            Whether the fields should be made immutable or not based on the
            condition.
        require:
          type: boolean
          description: |
            Whether the fields are required or not based on the condition. This
            takes precedence over is_required in field_descriptor.
        show:
          type: boolean
          description: |
            Whether the fields are shown or not based on the condition.
      required:
        - fields
      title: custom-schema-fragment-effect
    custom-schema-fragment-type:
      type: string
    custom-schema-fragments-get-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the custom schema fragment.
          format: id
      required:
        - id
      title: custom-schema-fragments-get-request
    custom-schema-fragments-get-response:
      type: object
      properties:
        fragment:
          $ref: '#/components/schemas/custom-schema-fragment'
      required:
        - fragment
      title: custom-schema-fragments-get-response
      x-go-name: CustomSchemaFragmentsGetResponseBody
    custom-schema-fragments-list-request:
      type: object
      properties:
        app:
          type: array
          description: The list of app names.
          items:
            type: string
            format: text
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        deprecated:
          type: boolean
          deprecated: true
          description: Whether only deprecated fragments should be filtered.
        is_custom_leaf_type:
          type: boolean
          description: Whether the leaf type corresponds to a custom object
        is_deprecated:
          type: boolean
          description: Whether the fragment has been deprecated.
        leaf_type:
          type: array
          description: The list of leaf types.
          items:
            type: string
            format: text
        limit:
          type: integer
          description: The maximum number of items.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        prune:
          type: array
          description: |
            List of fields which are not required in the payload and can be
            pruned away.
          items:
            $ref: '#/components/schemas/custom-schema-fragments-list-request-prune'
        sort_by:
          type: array
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
            format: sort-by
        subtype:
          type: array
          description: The list of subtypes.
          items:
            type: string
            format: text
        types:
          type: array
          description: |
            Filters for custom schema fragment of the provided types.
          items:
            $ref: '#/components/schemas/custom-schema-fragment-type'
      title: custom-schema-fragments-list-request
    custom-schema-fragments-list-request-prune:
      type: string
      enum:
        - fields
    custom-schema-fragments-list-response:
      type: object
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        result:
          type: array
          description: The custom schema fragments.
          items:
            $ref: '#/components/schemas/custom-schema-fragment'
      required:
        - result
      title: custom-schema-fragments-list-response
      x-go-name: CustomSchemaFragmentsListResponseBody
    custom-schema-fragments-set-request:
      type: object
      discriminator:
        mapping:
          app_fragment: '#/components/schemas/custom-schema-fragments-set-request-app-fragment'
          custom_type_fragment: '#/components/schemas/custom-schema-fragments-set-request-custom-type-fragment'
          tenant_fragment: '#/components/schemas/custom-schema-fragments-set-request-tenant-fragment'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/custom-schema-fragments-set-request-app-fragment'
        - $ref: '#/components/schemas/custom-schema-fragments-set-request-custom-type-fragment'
        - $ref: '#/components/schemas/custom-schema-fragments-set-request-tenant-fragment'
      properties:
        type:
          $ref: '#/components/schemas/custom-schema-fragments-set-request-type'
        composite_schemas:
          type: array
          description: List of all composite schemas used in this fragment.
          items:
            $ref: '#/components/schemas/custom-schema-fragments-set-request-composite-schema'
        conditions:
          type: array
          description: List of conditions for this fragment.
          items:
            $ref: '#/components/schemas/custom-schema-fragment-condition'
        deleted_fields:
          type: array
          description: List of field names which are being dropped.
          items:
            type: string
            format: text
        deprecated:
          type: boolean
          deprecated: true
          description: Whether this fragment has been deprecated.
        description:
          type: string
          description: The description of the custom schema fragment.
          format: text
        fields:
          type: array
          description: List of all fields in this fragment.
          items:
            $ref: '#/components/schemas/schema-field-descriptor'
        is_custom_leaf_type:
          type: boolean
          description: Whether the leaf type corresponds to a custom object
        is_deprecated:
          type: boolean
          description: Whether this fragment has been deprecated.
        leaf_type:
          type: string
          description: The leaf type this fragment applies to.
          format: text
      required:
        - description
        - leaf_type
        - type
      title: custom-schema-fragments-set-request
    custom-schema-fragments-set-request-app-fragment:
      type: object
      properties:
        app:
          type: string
          description: The app this fragment applies to.
          format: text
        app_display_name:
          type: string
          description: The display name of the app.
          format: text
      required:
        - app
      title: custom-schema-fragments-set-request-app-fragment
    custom-schema-fragments-set-request-composite-schema:
      type: object
      properties:
        description:
          type: string
          description: Description of this composite type.
          format: text
        fields:
          type: array
          description: List of fields in this composite type.
          items:
            $ref: '#/components/schemas/schema-field-descriptor'
        name:
          type: string
          description: The name of this composite type.
          format: text
      required:
        - fields
      title: custom-schema-fragments-set-request-composite-schema
    custom-schema-fragments-set-request-custom-type-fragment:
      type: object
      properties:
        path:
          type: array
          description: |
            Path components used to display available custom types in tree
            form.
          items:
            $ref: '#/components/schemas/custom-type-path-component'
        stage_diagram:
          type: string
          description: The ID of the associated custom stage diagram.
          format: id
        stock_field_overrides:
          type: array
          description: List of Per-DevOrg stock field overrides.
          items:
            $ref: '#/components/schemas/stock-field-override'
        subtype:
          type: string
          description: |
            The string used to populate the subtype in the leaf type.
          format: text
        subtype_display_name:
          type: string
          description: The display name of the subtype.
          format: text
      required:
        - subtype
      title: custom-schema-fragments-set-request-custom-type-fragment
    custom-schema-fragments-set-request-tenant-fragment:
      type: object
      properties:
        id_prefix:
          type: string
          description: The display ID prefix for the custom object.
          format: text
          pattern: ^[A-Z]{2,10}$
        stock_field_overrides:
          type: array
          description: List of Per-DevOrg stock field overrides.
          items:
            $ref: '#/components/schemas/stock-field-override'
      title: custom-schema-fragments-set-request-tenant-fragment
    custom-schema-fragments-set-request-type:
      type: string
      enum:
        - app_fragment
        - custom_type_fragment
        - tenant_fragment
    custom-schema-fragments-set-response:
      type: object
      properties:
        id:
          type: string
          description: The ID of the custom schema fragment.
          format: id
      required:
        - id
      title: custom-schema-fragments-set-response
      x-go-name: CustomSchemaFragmentsSetResponseBody
    custom-schema-spec:
      type: object
      description: |
        Custom schemas described using identifiers. Each custom field in the
        request must have the corresponding schema specified; omission results
        in a Bad Request error. If a custom schema is not included in the
        specifier, it remains unchanged. For surfaces with human interactors,
        it is recommended to provide tenant_fragment: true and
        validate_required_fields: true.
      properties:
        apps:
          type: array
          description: List of apps.
          items:
            type: string
            format: text
        subtype:
          type: string
          description: Name of the subtype.
          format: text
        tenant_fragment:
          type: boolean
          description: Whether the tenant schema is requested.
        validate_required_fields:
          type: boolean
          description: Whether to enforce required fields validation.
      title: custom-schema-spec
    custom-schema-spec-for-read:
      type: object
      description: Custom schemas described using identifiers
      properties:
        apps:
          type: array
          description: List of apps.
          items:
            type: string
            format: text
        subtype:
          type: string
          description: Name of the subtype.
          format: text
      title: custom-schema-spec-for-read
    custom-stage:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            name:
              type: string
              description: The human readable name of the stage.
              format: text
            ordinal:
              type: integer
              description: Position of the stage in the global stage ordering.
              format: int32
            state:
              $ref: '#/components/schemas/custom-state-summary'
      title: custom-stage
    custom-stage-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            name:
              type: string
              description: The human readable name of the stage.
              format: text
      title: custom-stage-summary
    custom-stages-create-request:
      type: object
      properties:
        marketplace_ref:
          type: string
          description: |
            A reference to the marketplace item from which this stage was
            imported.
          format: id
        name:
          type: string
          description: The name of the custom stage.
          format: text
        ordinal:
          type: integer
          description: The ordinal of the custom stage used for ordering.
          format: int32
        state:
          type: string
          description: The state ID.
          format: id
      required:
        - name
        - ordinal
        - state
      title: custom-stages-create-request
    custom-stages-create-response:
      type: object
      properties:
        custom_stage:
          $ref: '#/components/schemas/custom-stage'
      required:
        - custom_stage
      title: custom-stages-create-response
      x-go-name: CustomStagesCreateResponseBody
    custom-stages-get-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the custom stage to get.
          format: id
      required:
        - id
      title: custom-stages-get-request
    custom-stages-get-response:
      type: object
      properties:
        custom_stage:
          $ref: '#/components/schemas/custom-stage'
      required:
        - custom_stage
      title: custom-stages-get-response
      x-go-name: CustomStagesGetResponseBody
    custom-stages-list-request:
      type: object
      properties:
        cursor:
          type: string
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          format: text
        limit:
          type: integer
          description: The maximum number of items.
          format: int32
        name:
          type: array
          description: The list of stage names.
          items:
            type: string
            format: text
        ordinal:
          type: array
          description: The list of stage ordinals.
          items:
            type: integer
            format: int32
        sort_by:
          type: array
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
            format: sort-by
      title: custom-stages-list-request
    custom-stages-list-response:
      type: object
      properties:
        cursor:
          type: string
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          format: text
        result:
          type: array
          description: The custom stages.
          items:
            $ref: '#/components/schemas/custom-stage'
      required:
        - result
      title: custom-stages-list-response
      x-go-name: CustomStagesListResponseBody
    custom-stages-update-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the custom stage to update.
          format: id
        name:
          type: string
          description: The updated name of the custom stage.
          format: text
        ordinal:
          type: integer
          description: The ordinal of the custom stage.
          format: int32
        state_id:
          type: string
          description: The state ID.
          format: id
      required:
        - id
      title: custom-stages-update-request
    custom-stages-update-response:
      type: object
      properties:
        custom_stage:
          $ref: '#/components/schemas/custom-stage'
      required:
        - custom_stage
      title: custom-stages-update-response
      x-go-name: CustomStagesUpdateResponseBody
    custom-state:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            is_final:
              type: boolean
              description: True if this is a final state.
            name:
              type: string
              description: The human readable name of the state.
              format: text
            ordinal:
              type: integer
              description: Position of the state in the global state ordering.
              format: int32
      title: custom-state
    custom-state-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            is_final:
              type: boolean
              description: True if this is a final state.
            name:
              type: string
              description: The human readable name of the state.
              format: text
      title: custom-state-summary
    custom-states-create-request:
      type: object
      properties:
        is_final:
          type: boolean
          description: Whether this is a final state.
        name:
          type: string
          description: The name of the custom state.
          format: text
        ordinal:
          type: integer
          description: |
            Ordinal of the custom state used to identify system states.
          format: int32
      required:
        - name
        - ordinal
      title: custom-states-create-request
    custom-states-create-response:
      type: object
      properties:
        custom_state:
          $ref: '#/components/schemas/custom-state'
      required:
        - custom_state
      title: custom-states-create-response
      x-go-name: CustomStatesCreateResponseBody
    custom-states-get-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the custom state to get.
          format: id
      required:
        - id
      title: custom-states-get-request
    custom-states-get-response:
      type: object
      properties:
        custom_state:
          $ref: '#/components/schemas/custom-state'
      required:
        - custom_state
      title: custom-states-get-response
      x-go-name: CustomStatesGetResponseBody
    custom-states-list-request:
      type: object
      properties:
        cursor:
          type: string
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          format: text
        is_final:
          type: boolean
          description: Whether only final states should be filtered.
        limit:
          type: integer
          description: The maximum number of items.
          format: int32
        name:
          type: array
          description: The list of state names.
          items:
            type: string
            format: text
        ordinal:
          type: array
          description: The list of state ordinals.
          items:
            type: integer
            format: int32
        sort_by:
          type: array
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
            format: sort-by
      title: custom-states-list-request
    custom-states-list-response:
      type: object
      properties:
        cursor:
          type: string
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          format: text
        result:
          type: array
          description: The custom states.
          items:
            $ref: '#/components/schemas/custom-state'
      required:
        - result
      title: custom-states-list-response
      x-go-name: CustomStatesListResponseBody
    custom-states-update-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the custom state to update.
          format: id
        is_final:
          type: boolean
          description: Whether this is a final state.
        name:
          type: string
          description: The name of the custom state.
          format: text
        ordinal:
          type: integer
          description: |
            Ordinal of the custom state used to identify system states.
          format: int32
      required:
        - id
      title: custom-states-update-request
    custom-states-update-response:
      type: object
      properties:
        custom_state:
          $ref: '#/components/schemas/custom-state'
      required:
        - custom_state
      title: custom-states-update-response
      x-go-name: CustomStatesUpdateResponseBody
    custom-type-path-component:
      type: object
      additionalProperties: false
      description: Path component for rendering custom type lists in tree form.
      title: custom-type-path-component
    dashboard:
      allOf:
        - $ref: '#/components/schemas/atom-base'
      title: dashboard
    date-filter:
      type: object
      description: Provides ways to specify date ranges on objects.
      discriminator:
        mapping:
          preset: '#/components/schemas/date-time-preset'
          range: '#/components/schemas/date-time-filter'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/date-time-filter'
        - $ref: '#/components/schemas/date-time-preset'
      properties:
        type:
          $ref: '#/components/schemas/date-filter-type'
      required:
        - type
      title: date-filter
    date-filter-type:
      type: string
      description: Type of date filter.
      enum:
        - preset
        - range
    date-time-filter:
      type: object
      properties:
        after:
          type: string
          description: |
            Filters for objects created after the provided timestamp
            (inclusive).
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        before:
          type: string
          description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
      title: date-time-filter
    date-time-preset:
      type: object
      description: Provides preset types for date filter.
      discriminator:
        mapping:
          last_n_days: '#/components/schemas/date-time-preset-last-n-days'
          next_n_days: '#/components/schemas/date-time-preset-next-n-days'
        propertyName: preset_type
      oneOf:
        - $ref: '#/components/schemas/date-time-preset-last-n-days'
        - $ref: '#/components/schemas/date-time-preset-next-n-days'
      properties:
        preset_type:
          $ref: '#/components/schemas/date-time-preset-type'
      required:
        - preset_type
      title: date-time-preset
    date-time-preset-last-n-days:
      type: object
      properties:
        days:
          type: integer
          description: |
            The range starts from the current timestamp and continues for the
            past n days.
          maximum: 4294967295
          minimum: 0
      required:
        - days
      title: date-time-preset-last-n-days
    date-time-preset-next-n-days:
      type: object
      properties:
        days:
          type: integer
          description: |
            The range starts from the current timestamp and continues for the
            next n days.
          maximum: 4294967295
          minimum: 0
      required:
        - days
      title: date-time-preset-next-n-days
    date-time-preset-type:
      type: string
      description: Type of date preset.
      enum:
        - last_n_days
        - next_n_days
    definedness:
      type: string
      description: Indicates whether this evaluation can change in the future.
      enum:
        - immutable
        - mutable
        - undefined
    dev-org:
      allOf:
        - $ref: '#/components/schemas/org-base'
      title: dev-org
    dev-org-auth-connections-create-request:
      type: object
      description: |
        Request to create a new enterprise authentication connection.
      discriminator:
        mapping:
          google_apps: '#/components/schemas/dev-org-auth-connections-create-request-google-apps-options'
          oidc: '#/components/schemas/dev-org-auth-connections-create-request-oidc-options'
          okta: '#/components/schemas/dev-org-auth-connections-create-request-okta-options'
          samlp: '#/components/schemas/dev-org-auth-connections-create-request-saml-options'
          waad: '#/components/schemas/dev-org-auth-connections-create-request-azure-ad-options'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/dev-org-auth-connections-create-request-azure-ad-options'
        - $ref: '#/components/schemas/dev-org-auth-connections-create-request-google-apps-options'
        - $ref: '#/components/schemas/dev-org-auth-connections-create-request-oidc-options'
        - $ref: '#/components/schemas/dev-org-auth-connections-create-request-okta-options'
        - $ref: '#/components/schemas/dev-org-auth-connections-create-request-saml-options'
      properties:
        type:
          $ref: '#/components/schemas/dev-org-auth-connections-create-request-type'
        display_name:
          type: string
          description: |
            Display name of the authentication connection. This name will be
            visible to all the users when they sign in to this Dev
            organization. For example, if the display_name is 'abclogin', then
            it would appear on the login button as 'Log in to abclogin'.
          format: text
          maxLength: 128
          minLength: 1
      required:
        - type
      title: dev-org-auth-connections-create-request
    dev-org-auth-connections-create-request-azure-ad-options:
      type: object
      deprecated: true
      description: |
        Object encapsulating the configuration parameters for an Azure AD
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the Azure authentication connection.
          format: text
        client_secret:
          type: string
          description: Client secret for the Azure authentication connection.
          format: text
        domain:
          type: string
          description: Domain URL of the Azure authentication connection.
          format: text
      required:
        - client_id
        - client_secret
        - domain
      title: dev-org-auth-connections-create-request-azure-ad-options
    dev-org-auth-connections-create-request-google-apps-options:
      type: object
      deprecated: true
      description: |
        Object encapsulating the configuration parameters for a Google Apps
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the Google Apps authentication connection.
          format: text
        client_secret:
          type: string
          description: |
            Client secret for the Google Apps authentication connection.
          format: text
        tenant_domain:
          type: string
          description: |
            Tenant domain URL of the Google Apps authentication connection.
          format: text
      required:
        - client_id
        - client_secret
        - tenant_domain
      title: dev-org-auth-connections-create-request-google-apps-options
    dev-org-auth-connections-create-request-oidc-options:
      type: object
      description: |
        Object encapsulating the configuration parameters for an OIDC
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the OIDC authentication connection.
          format: text
        client_secret:
          type: string
          description: Client secret for the OIDC authentication connection.
          format: text
        issuer:
          type: string
          description: Issuer URL of the OIDC authentication connection.
          format: text
      required:
        - client_id
        - client_secret
        - issuer
      title: dev-org-auth-connections-create-request-oidc-options
    dev-org-auth-connections-create-request-okta-options:
      type: object
      deprecated: true
      description: |
        Object encapsulating the configuration parameters for an Okta
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the Okta authentication connection.
          format: text
        client_secret:
          type: string
          description: Client secret for the Okta authentication connection.
          format: text
        domain:
          type: string
          description: Domain URL of the Okta authentication connection.
          format: text
      required:
        - client_id
        - client_secret
        - domain
      title: dev-org-auth-connections-create-request-okta-options
    dev-org-auth-connections-create-request-saml-options:
      type: object
      description: |
        Object encapsulating the configuration parameters for a SAML
        authentication connection.
      properties:
        connection_name:
          type: string
          description: |
            Connection name for the SAML authentication connection. Must match
            the `connection` query parameter specified in the sign on URL
            during SAML configuration in your identity provider.
          format: text
          maxLength: 128
          minLength: 1
        fields_map:
          $ref: '#/components/schemas/saml-connection-fields-map'
        sign_in_endpoint:
          type: string
          description: Sign In endpoint for the SAML authentication connection.
          format: text
        signing_cert:
          type: string
          description: |
            Signing certificate for the SAML authentication connection.
          format: text
      required:
        - sign_in_endpoint
        - signing_cert
      title: dev-org-auth-connections-create-request-saml-options
    dev-org-auth-connections-create-request-type:
      type: string
      description: |
        Defines the type for the authentication connection. Different types of
        authentication connections have different configuration parameters.
      enum:
        - google_apps
        - oidc
        - okta
        - samlp
        - waad
    dev-org-auth-connections-create-response:
      type: object
      description: |
        Response for the request to create a new enterprise authentication
        connection.
      properties:
        auth_connection:
          $ref: '#/components/schemas/auth-connection'
      required:
        - auth_connection
      title: dev-org-auth-connections-create-response
      x-go-name: DevOrgAuthConnectionsCreateResponseBody
    dev-org-auth-connections-delete-request:
      type: object
      description: |
        Request to delete an enterprise authentication connection for a Dev
        organization. A default connection and a connection which is currently
        enabled cannot be deleted.
      properties:
        id:
          type: string
          description: ID of the authentication connection to be deleted.
          format: text
      required:
        - id
      title: dev-org-auth-connections-delete-request
    dev-org-auth-connections-get-request:
      type: object
      description: |
        Request to get configuration details of organization's authentication
        Connection.
      properties:
        id:
          type: string
          description: ID of the authentication connection.
          format: text
      required:
        - id
      title: dev-org-auth-connections-get-request
    dev-org-auth-connections-get-response:
      type: object
      description: |
        Response object encapsulating the configuration details of an
        authentication connection.
      properties:
        auth_connection:
          $ref: '#/components/schemas/auth-connection'
      required:
        - auth_connection
      title: dev-org-auth-connections-get-response
      x-go-name: DevOrgAuthConnectionsGetResponseBody
    dev-org-auth-connections-list-response:
      type: object
      description: |
        Response object for the request to list all the social and enterprise
        authentication connections configured for a Dev organization.
      properties:
        auth_connections:
          type: array
          description: |
            List of all the authentication connections currently configured for
            a Dev organization.
          items:
            $ref: '#/components/schemas/auth-connection'
      required:
        - auth_connections
      title: dev-org-auth-connections-list-response
      x-go-name: DevOrgAuthConnectionsListResponseBody
    dev-org-auth-connections-toggle-request:
      type: object
      description: |
        Request to enable or disable an authentication connection for a Dev
        organization.
      properties:
        id:
          type: string
          description: ID of the authentication connection to be toggled.
          format: text
        toggle:
          $ref: '#/components/schemas/auth-connection-toggle'
      required:
        - id
      title: dev-org-auth-connections-toggle-request
    dev-org-auth-connections-update-request:
      type: object
      description: |
        Request to update an enterprise authentication connection for a Dev
        organization.
      discriminator:
        mapping:
          google_apps: '#/components/schemas/dev-org-auth-connections-update-request-google-apps-options'
          none: '#/components/schemas/empty'
          oidc: '#/components/schemas/dev-org-auth-connections-update-request-oidc-options'
          okta: '#/components/schemas/dev-org-auth-connections-update-request-okta-options'
          samlp: '#/components/schemas/dev-org-auth-connections-update-request-saml-options'
          waad: '#/components/schemas/dev-org-auth-connections-update-request-azure-ad-options'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/dev-org-auth-connections-update-request-azure-ad-options'
        - $ref: '#/components/schemas/dev-org-auth-connections-update-request-google-apps-options'
        - $ref: '#/components/schemas/dev-org-auth-connections-update-request-oidc-options'
        - $ref: '#/components/schemas/dev-org-auth-connections-update-request-okta-options'
        - $ref: '#/components/schemas/dev-org-auth-connections-update-request-saml-options'
        - $ref: '#/components/schemas/empty'
      properties:
        type:
          $ref: '#/components/schemas/dev-org-auth-connections-update-request-type'
        display_name:
          type: string
          description: |
            New display name of the authentication connection. This name will
            be visible to all the users when they sign in to this Dev
            organization. For example, if the display_name is 'abclogin', then
            it would appear on the login button as 'Log in to abclogin'.
          format: text
        id:
          type: string
          description: |
            ID of the authentication connection which is to be updated.
          format: text
      required:
        - id
      title: dev-org-auth-connections-update-request
    dev-org-auth-connections-update-request-azure-ad-options:
      type: object
      deprecated: true
      description: |
        Object encapsulating the configuration parameters for an Azure AD
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the Azure authentication connection.
          format: text
        client_secret:
          type: string
          description: Client secret for the Azure authentication connection.
          format: text
        domain:
          type: string
          description: Domain URL of the Azure authentication connection.
          format: text
      title: dev-org-auth-connections-update-request-azure-ad-options
    dev-org-auth-connections-update-request-google-apps-options:
      type: object
      deprecated: true
      description: |
        Object encapsulating the configuration parameters for a Google Apps
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the Google Apps authentication connection.
          format: text
        client_secret:
          type: string
          description: |
            Client secret for the Google Apps authentication connection.
          format: text
        tenant_domain:
          type: string
          description: |
            Tenant domain URL of the Google Apps authentication connection.
          format: text
      title: dev-org-auth-connections-update-request-google-apps-options
    dev-org-auth-connections-update-request-oidc-options:
      type: object
      description: |
        Object encapsulating the configuration parameters for an OIDC
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the OIDC authentication connection.
          format: text
        client_secret:
          type: string
          description: Client secret for the OIDC authentication connection.
          format: text
        issuer:
          type: string
          description: Issuer URL of the OIDC authentication connection.
          format: text
      title: dev-org-auth-connections-update-request-oidc-options
    dev-org-auth-connections-update-request-okta-options:
      type: object
      description: |
        Object encapsulating the configuration parameters for an Okta
        authentication connection.
      properties:
        client_id:
          type: string
          description: Client ID for the Okta authentication connection.
          format: text
        client_secret:
          type: string
          description: Client secret for the Okta authentication connection.
          format: text
        domain:
          type: string
          description: Domain URL of the Okta authentication connection.
          format: text
      title: dev-org-auth-connections-update-request-okta-options
    dev-org-auth-connections-update-request-saml-options:
      type: object
      description: |
        Object encapsulating the configuration parameters for a SAML
        authentication connection.
      properties:
        fields_map:
          $ref: '#/components/schemas/saml-connection-fields-map'
        sign_in_endpoint:
          type: string
          description: Sign In endpoint for the SAML authentication connection.
          format: text
        signing_cert:
          type: string
          description: |
            Signing certificate for the SAML authentication connection.
          format: text
      title: dev-org-auth-connections-update-request-saml-options
    dev-org-auth-connections-update-request-type:
      type: string
      description: |
        Specifies the type for the authentication connection. Different types
        of authentication connections have different configuration parameters
        that can be updated.
      enum:
        - google_apps
        - none
        - oidc
        - okta
        - samlp
        - waad
    dev-org-auth-connections-update-response:
      type: object
      description: |
        Response for the request to update an enterprise authentication
        connection.
      properties:
        auth_connection:
          $ref: '#/components/schemas/auth-connection'
      required:
        - auth_connection
      title: dev-org-auth-connections-update-response
      x-go-name: DevOrgAuthConnectionsUpdateResponseBody
    dev-orgs-get-request:
      type: object
      additionalProperties: false
      description: A request to get a Dev organization's information.
      title: dev-orgs-get-request
    dev-orgs-get-response:
      type: object
      description: The response to get a Dev organization's information.
      properties:
        dev_org:
          $ref: '#/components/schemas/dev-org'
      required:
        - dev_org
      title: dev-orgs-get-response
      x-go-name: DevOrgsGetResponseBody
    dev-user:
      allOf:
        - $ref: '#/components/schemas/user-base'
        - type: object
          properties:
            experience_start_date:
              type: string
              description: Start date of the user's employment.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
            external_identities:
              type: array
              description: IDs of the Dev User outside the DevRev SOR.
              items:
                $ref: '#/components/schemas/external-identity'
            job_history:
              type: array
              description: Job history of the user.
              items:
                $ref: '#/components/schemas/job-history-item'
            skills:
              type: array
              description: Array of skills of the user.
              items:
                $ref: '#/components/schemas/user-skill'
      title: dev-user
    dev-user-external-identity-filter:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the user in the external source.
          format: text
        issuer:
          type: string
          description: Issuer of the external identity of the user.
          format: text
      title: dev-user-external-identity-filter
    dev-user-job-title:
      type: string
      description: Job title of the Dev User.
      enum:
        - customer_success_manager
        - cxo
        - designer
        - developer
        - head_of_support
        - operations
        - others
        - product_manager
        - qa
        - revenue_leader
        - support
        - tech_lead
    dev-user-summary:
      allOf:
        - $ref: '#/components/schemas/user-base-summary'
      title: dev-user-summary
    dev-users-activate-request:
      type: object
      description: A request to activate the Dev user.
      properties:
        groups:
          type: array
          description: IDs of the groups assigned to user during activation.
          items:
            type: string
            format: id
        id:
          type: string
          description: The ID for the Dev user.
          format: id
      required:
        - id
      title: dev-users-activate-request
    dev-users-activate-response:
      type: object
      description: The response to activate the Dev user.
      properties:
        invite_sent:
          type: boolean
          description: Whether an invitation has been sent to the Dev user.
      required:
        - invite_sent
      title: dev-users-activate-response
      x-go-name: DevUsersActivateResponseBody
    dev-users-create-request:
      type: object
      description: |
        Request object to create a new Dev user for a Dev organization.
      properties:
        custom_fields:
          type: object
          description: Application-defined custom fields.
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        email:
          type: string
          description: Email of the Dev user.
          format: text
        full_name:
          type: string
          description: Full name of the Dev user.
          format: text
        reports_to:
          type: string
          description: The ID of the user that the user reports to.
          format: id
        state:
          $ref: '#/components/schemas/dev-users-create-request-state-enum-value'
      required:
        - email
        - state
      title: dev-users-create-request
    dev-users-create-request-state-enum-value:
      type: string
      enum:
        - shadow
    dev-users-create-response:
      type: object
      description: |
        Response object for request to create a new Dev user for a Dev
        organization.
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
        - dev_user
      title: dev-users-create-response
      x-go-name: DevUsersCreateResponseBody
    dev-users-deactivate-request:
      type: object
      description: A request to deactivate the Dev user.
      properties:
        id:
          type: string
          description: The ID for the Dev user.
          format: id
      required:
        - id
      title: dev-users-deactivate-request
    dev-users-deactivate-response:
      type: object
      additionalProperties: false
      description: The response to deactivate the Dev user.
      title: dev-users-deactivate-response
      x-go-name: DevUsersDeactivateResponseBody
    dev-users-get-request:
      type: object
      description: A request to get a Dev user's information.
      properties:
        id:
          type: string
          description: User ID of the requested Dev user.
          format: id
      required:
        - id
      title: dev-users-get-request
    dev-users-get-response:
      type: object
      description: The response to getting the information for the Dev user.
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
        - dev_user
      title: dev-users-get-response
      x-go-name: DevUsersGetResponseBody
    dev-users-identities-link-request:
      type: object
      description: Request to link external identity to a Dev user.
      properties:
        dev_user:
          type: string
          description: The ID of the Dev user to link the external identity to.
          format: id
        display_name:
          type: string
          description: Display name of the Dev user in the external source.
          format: text
        id:
          type: string
          description: Unique ID of the Dev user in the external source.
          format: text
        issuer:
          type: string
          description: Issuer of the external identity of the Dev user.
          format: text
      required:
        - dev_user
        - id
        - issuer
      title: dev-users-identities-link-request
    dev-users-identities-link-response:
      type: object
      description: |
        Response for the request to link an external identity to a Dev user.
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
        - dev_user
      title: dev-users-identities-link-response
      x-go-name: DevUsersIdentitiesLinkResponseBody
    dev-users-identities-unlink-request:
      type: object
      description: Request to unlink an external identity from a Dev user.
      properties:
        dev_user:
          type: string
          description: |
            The ID of the Dev user to unlink the external identity from.
          format: id
        issuer:
          type: string
          description: Issuer that needs to be unlinked from a Dev user.
          format: text
      required:
        - dev_user
        - issuer
      title: dev-users-identities-unlink-request
    dev-users-identities-unlink-response:
      type: object
      description: |
        Response for the request to unlink an external identity from a Dev
        user.
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
        - dev_user
      title: dev-users-identities-unlink-response
      x-go-name: DevUsersIdentitiesUnlinkResponseBody
    dev-users-list-request:
      type: object
      description: A request to get the list of Dev user's information.
      properties:
        created_date:
          $ref: '#/components/schemas/date-filter'
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        email:
          type: array
          description: Filters Dev users based on email addresses.
          items:
            type: string
            format: text
        external_identity:
          type: array
          description: Filters Dev users based on external identity.
          items:
            $ref: '#/components/schemas/dev-user-external-identity-filter'
        limit:
          type: integer
          description: |
            The maximum number of Dev users to return. The default is '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-filter'
        sort_by:
          type: array
          description: |
            Fields to sort the Dev users by and the direction to sort them.
          items:
            type: string
            format: sort-by
        state:
          type: array
          description: Filters Dev users based on state.
          items:
            $ref: '#/components/schemas/user-state'
      title: dev-users-list-request
    dev-users-list-response:
      type: object
      description: The response to listing the Dev users.
      properties:
        dev_users:
          type: array
          description: The list of Dev users.
          items:
            $ref: '#/components/schemas/dev-user'
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
      required:
        - dev_users
      title: dev-users-list-response
      x-go-name: DevUsersListResponseBody
    dev-users-merge-request:
      type: object
      description: Request object for merging Dev users.
      properties:
        primary_user:
          type: string
          description: The unique ID of the primary user.
          format: id
        secondary_user:
          type: string
          description: The unique ID of the secondary user.
          format: id
      required:
        - primary_user
        - secondary_user
      title: dev-users-merge-request
    dev-users-merge-response:
      type: object
      additionalProperties: false
      description: Response object for request to merge Dev users.
      title: dev-users-merge-response
      x-go-name: DevUsersMergeResponseBody
    dev-users-self-request:
      type: object
      additionalProperties: false
      description: A request to get the authenticated user's information.
      title: dev-users-self-request
    dev-users-self-response:
      type: object
      description: |
        The response to getting the information for the authenticated user.
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
        - dev_user
      title: dev-users-self-response
      x-go-name: DevUsersSelfResponseBody
    dev-users-self-update-request:
      type: object
      description: |
        A request to update the user's information for the authenticated Dev
        user.
      properties:
        custom_fields:
          type: object
          description: Application-defined custom fields.
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        display_name:
          type: string
          description: The updated display name of the Dev user.
          format: text
        experience_start_date:
          type: string
          description: Start date of Dev user's experience.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        full_name:
          type: string
          description: The updated full name of the Dev user.
          format: text
        job_history:
          type: array
          description: Job history of the Dev user.
          items:
            $ref: '#/components/schemas/dev-users-update-job-history-item'
        job_title:
          $ref: '#/components/schemas/dev-user-job-title'
        reports_to:
          type: string
          description: The ID of the Dev user that the user reports to.
          format: id
      title: dev-users-self-update-request
    dev-users-update-job-history-item:
      type: object
      properties:
        employment_status:
          type: integer
          description: Enum for the employment status of the user.
          format: int64
        end_date:
          type: string
          description: End date of the job.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        is_current:
          type: boolean
          description: Is this the current active job for the user.
        location:
          type: string
          description: The job location for the user.
          format: text
        start_date:
          type: string
          description: Start date of the job.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        title:
          type: string
          description: The job title for the user.
          format: text
      title: dev-users-update-job-history-item
    dev-users-update-request:
      type: object
      description: |
        A request to update the user's information corresponding to the
        provided Dev user.
      properties:
        custom_fields:
          type: object
          description: Application-defined custom fields.
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        display_name:
          type: string
          description: The updated display name of the Dev user.
          format: text
        experience_start_date:
          type: string
          description: Start date of Dev user's experience.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        full_name:
          type: string
          description: The updated full name of the Dev user.
          format: text
        id:
          type: string
          description: The ID for the Dev user to be updated.
          format: id
        job_history:
          type: array
          description: Job history of the Dev user.
          items:
            $ref: '#/components/schemas/dev-users-update-job-history-item'
        job_title:
          $ref: '#/components/schemas/dev-user-job-title'
        reports_to:
          type: string
          description: The ID of the Dev user that the user reports to.
          format: id
      required:
        - id
      title: dev-users-update-request
    dev-users-update-response:
      type: object
      description: The response to update a Dev user.
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
        - dev_user
      title: dev-users-update-response
      x-go-name: DevUsersUpdateResponseBody
    directories-count-request:
      type: object
      properties:
        created_by:
          type: array
          description: |
            Filters for directories created by any of the provided users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        modified_by:
          type: array
          description: |
            Filters for directories modified by any of the provided users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
      title: directories-count-request
    directories-count-response:
      type: object
      properties:
        count:
          type: integer
          description: The total number of directories matching the filter.
          format: int32
      required:
        - count
      title: directories-count-response
      x-go-name: DirectoriesCountResponseBody
    directories-create-request:
      type: object
      description: The request to create a directory.
      properties:
        description:
          type: string
          description: Description for the directory.
          format: text
        icon:
          type: string
          description: Icon for the directory.
          format: text
        language:
          type: string
          description: Language of the directory.
          format: text
        parent:
          type: string
          description: Parent directory of the directory.
          format: id
        published:
          type: boolean
          description: Whether the directory is published.
        tags:
          type: array
          description: Tags associated with the directory.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
        thumbnail:
          type: string
          description: ID of the thumbnail artifact.
          example: ARTIFACT-12345
          format: id
        title:
          type: string
          description: Title of the directory.
          format: text
      required:
        - title
      title: directories-create-request
    directories-create-response:
      type: object
      description: Create directory response.
      properties:
        directory:
          $ref: '#/components/schemas/directory'
      required:
        - directory
      title: directories-create-response
      x-go-name: DirectoriesCreateResponseBody
    directories-delete-request:
      type: object
      description: The request to delete a directory.
      properties:
        id:
          type: string
          description: The ID of the directory to delete.
          format: id
      required:
        - id
      title: directories-delete-request
    directories-delete-response:
      type: object
      additionalProperties: false
      title: directories-delete-response
      x-go-name: DirectoriesDeleteResponseBody
    directories-get-request:
      type: object
      description: The request to get a directory.
      properties:
        id:
          type: string
          description: The ID of the requested directory.
          format: id
      required:
        - id
      title: directories-get-request
    directories-get-response:
      type: object
      description: Get directory response.
      properties:
        directory:
          $ref: '#/components/schemas/directory'
      required:
        - directory
      title: directories-get-response
      x-go-name: DirectoriesGetResponseBody
    directories-list-request:
      type: object
      description: The request to list directories.
      properties:
        created_by:
          type: array
          description: |
            Filters for directories created by any of the provided users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        limit:
          type: integer
          description: |
            The maximum number of directories to return. The default is '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_by:
          type: array
          description: |
            Filters for directories modified by any of the provided users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
      title: directories-list-request
    directories-list-response:
      type: object
      description: List directory response.
      properties:
        directories:
          type: array
          description: The list of directories.
          items:
            $ref: '#/components/schemas/directory'
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
      required:
        - directories
      title: directories-list-response
      x-go-name: DirectoriesListResponseBody
    directories-update-request:
      type: object
      description: The request to update a directory.
      properties:
        description:
          type: string
          description: The updated description for the directory.
          format: text
        icon:
          type: string
          description: The updated icon for the directory.
          format: text
        id:
          type: string
          description: The ID of the directory to update.
          format: id
        parent:
          type: string
          description: The updated parent directory for the directory.
          format: id
          nullable: true
        published:
          type: boolean
          description: Whether the directory is published.
        reorder:
          $ref: '#/components/schemas/directories-update-request-reorder'
        tags:
          $ref: '#/components/schemas/directories-update-request-tags'
        thumbnail:
          type: string
          description: The updated thumbnail for the directory.
          example: ARTIFACT-12345
          format: id
          nullable: true
        title:
          type: string
          description: The updated title for the directory.
          format: text
      required:
        - id
      title: directories-update-request
    directories-update-request-reorder:
      type: object
      properties:
        after:
          type: string
          description: |
            The directory after which the reordered directory is placed.
          format: id
        before:
          type: string
          description: |
            The directory before which the reordered directory is placed.
          format: id
      title: directories-update-request-reorder
    directories-update-request-tags:
      type: object
      properties:
        set:
          type: array
          description: Sets the provided tags on the directory.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
      title: directories-update-request-tags
    directories-update-response:
      type: object
      description: Update directory response.
      properties:
        directory:
          $ref: '#/components/schemas/directory'
      required:
        - directory
      title: directories-update-response
      x-go-name: DirectoriesUpdateResponseBody
    directory:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            body:
              $ref: '#/components/schemas/artifact-summary'
            description:
              type: string
              description: Description of the directory.
              format: text
            icon:
              type: string
              description: Icon of the directory.
              format: text
            parent:
              $ref: '#/components/schemas/directory-summary'
            published:
              type: boolean
              description: Whether the directory is published.
            rank:
              type: string
              description: Rank of the directory.
              format: text
            tags:
              type: array
              description: Tags associated with the directory.
              items:
                $ref: '#/components/schemas/tag-with-value'
            thumbnail:
              $ref: '#/components/schemas/artifact-summary'
            title:
              type: string
              description: Title of the directory.
              format: text
      title: directory
    directory-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
      title: directory-summary
    dynamic-group-info:
      type: object
      additionalProperties: false
      description: Information to define dynamic groups.
      title: dynamic-group-info
    dynamic-vista:
      allOf:
        - $ref: '#/components/schemas/vista-base'
        - type: object
          discriminator:
            propertyName: filter_type
          properties:
            filter_type:
              $ref: '#/components/schemas/dynamic-vista-filter-type'
          required:
            - filter_type
      description: |
        Dynamic collection of DevRev objects, all adhering to a specific
        filter.
      title: dynamic-vista
    dynamic-vista-filter-type:
      type: string
      description: Type of DevRev object for which the vista is applicable.
      enum:
        - accounts
        - articles
        - conversations
        - credits
        - custom_objects
        - dev_users
        - incidents
        - invoices
        - meetings
        - parts
        - quotes
        - rev_orgs
        - rev_users
        - works
    empty:
      type: object
      additionalProperties: false
      title: empty
    enhancement:
      allOf:
        - $ref: '#/components/schemas/part-base'
        - type: object
          properties:
            actual_close_date:
              type: string
              description: Actual close date for the object.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
            actual_start_date:
              type: string
              description: Actual start date for the object.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
            stage_v2:
              $ref: '#/components/schemas/stage'
            state_v2:
              type: string
              description: State of the object based upon the stage.
              format: text
            target_close_date:
              type: string
              description: Target close date for the object.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
            target_start_date:
              type: string
              description: Target start date for the object.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
      title: enhancement
    enhancement-summary:
      allOf:
        - $ref: '#/components/schemas/part-base-summary'
      title: enhancement-summary
    enum-value:
      type: object
      description: The properties of an enum value.
      properties:
        id:
          type: integer
          description: The unique ID of the enum value.
          format: int64
        label:
          type: string
          description: The display label of the enum value.
          format: text
        ordinal:
          type: integer
          description: |
            Used for determining the relative order of the enum value.
          format: int64
        value:
          description: The actual value of the enum value.
      required:
        - id
        - label
        - ordinal
      title: enum-value
    enum-value-summary:
      type: object
      description: The properties of an enum value.
      properties:
        id:
          type: integer
          description: The unique ID of the enum value.
          format: int64
        label:
          type: string
          description: The display label of the enum value.
          format: text
        ordinal:
          type: integer
          description: |
            Used for determining the relative order of the enum value.
          format: int64
      required:
        - id
        - label
        - ordinal
      title: enum-value-summary
    error:
      type: object
      properties:
        type:
          type: string
          description: The error type.
          format: text
        message:
          type: string
          description: Information about the error.
          format: text
        status:
          type: integer
          description: The corresponding HTTP status code.
          format: int32
      required:
        - message
        - status
      title: error
    error-bad-request:
      allOf:
        - $ref: '#/components/schemas/error-base'
        - type: object
          discriminator:
            mapping:
              artifact_already_attached_to_a_parent: '#/components/schemas/error-bad-request-artifact-already-attached-to-a-parent'
              bad_request: '#/components/schemas/error-bad-request-bad-request'
              customization_validation_error: '#/components/schemas/error-bad-request-customization-validation-error'
              invalid_api_version: '#/components/schemas/error-bad-request-invalid-api-version'
              invalid_enum_value: '#/components/schemas/error-bad-request-invalid-enum-value'
              invalid_field: '#/components/schemas/error-bad-request-invalid-field'
              invalid_id: '#/components/schemas/error-bad-request-invalid-id'
              merge_works_error: '#/components/schemas/error-bad-request-merge-works-error'
              missing_dependency: '#/components/schemas/error-bad-request-missing-dependency'
              missing_required_field: '#/components/schemas/error-bad-request-missing-required-field'
              parse_error: '#/components/schemas/error-bad-request-parse-error'
              stale_schema_fragments: '#/components/schemas/error-bad-request-stale-schema-fragments'
              unexpected_id_type: '#/components/schemas/error-bad-request-unexpected-id-type'
              unexpected_json_type: '#/components/schemas/error-bad-request-unexpected-json-type'
              value_not_permitted: '#/components/schemas/error-bad-request-value-not-permitted'
              workflow_component_validation_errors: '#/components/schemas/error-bad-request-workflow-component-validation-errors'
            propertyName: type
          oneOf:
            - $ref: '#/components/schemas/error-bad-request-artifact-already-attached-to-a-parent'
            - $ref: '#/components/schemas/error-bad-request-bad-request'
            - $ref: '#/components/schemas/error-bad-request-customization-validation-error'
            - $ref: '#/components/schemas/error-bad-request-invalid-api-version'
            - $ref: '#/components/schemas/error-bad-request-invalid-enum-value'
            - $ref: '#/components/schemas/error-bad-request-invalid-field'
            - $ref: '#/components/schemas/error-bad-request-invalid-id'
            - $ref: '#/components/schemas/error-bad-request-merge-works-error'
            - $ref: '#/components/schemas/error-bad-request-missing-dependency'
            - $ref: '#/components/schemas/error-bad-request-missing-required-field'
            - $ref: '#/components/schemas/error-bad-request-parse-error'
            - $ref: '#/components/schemas/error-bad-request-stale-schema-fragments'
            - $ref: '#/components/schemas/error-bad-request-unexpected-id-type'
            - $ref: '#/components/schemas/error-bad-request-unexpected-json-type'
            - $ref: '#/components/schemas/error-bad-request-value-not-permitted'
            - $ref: '#/components/schemas/error-bad-request-workflow-component-validation-errors'
          properties:
            type:
              $ref: '#/components/schemas/error-bad-request-type'
          required:
            - type
      description: Describes a error due to a bad request by the client.
      title: error-bad-request
    error-bad-request-artifact-already-attached-to-a-parent:
      type: object
      properties:
        existing_parent:
          type: string
          description: The existing parent attached to the artifact.
          format: id
        is_same:
          type: boolean
          description: |
            Whether the existing parent is the same as the new parent.
      required:
        - existing_parent
        - is_same
      title: error-bad-request-artifact-already-attached-to-a-parent
    error-bad-request-bad-request:
      type: object
      additionalProperties: false
      title: error-bad-request-bad-request
    error-bad-request-customization-validation-error:
      type: object
      description: |
        Describes an error encountered during customization validation.
      discriminator:
        mapping:
          bad_id_type: '#/components/schemas/error-bad-request-customization-validation-error-bad-id-type'
          date_parse_error: '#/components/schemas/error-bad-request-customization-validation-error-date-parse-error'
          enum_out_of_range: '#/components/schemas/error-bad-request-customization-validation-error-enum-out-of-range'
          expression_parse_error: '#/components/schemas/error-bad-request-customization-validation-error-expression-parse-error'
          field_dropped: '#/components/schemas/error-bad-request-customization-validation-error-field-dropped'
          field_immutable: '#/components/schemas/error-bad-request-customization-validation-error-field-immutable'
          field_not_in_schema: '#/components/schemas/error-bad-request-customization-validation-error-field-not-in-schema'
          field_required: '#/components/schemas/error-bad-request-customization-validation-error-field-required'
          fragment_not_found: '#/components/schemas/error-bad-request-customization-validation-error-fragment-not-found'
          id_parse_error: '#/components/schemas/error-bad-request-customization-validation-error-id-parse-error'
          id_type_not_allowed: '#/components/schemas/error-bad-request-customization-validation-error-id-type-not-allowed'
          invalid_argument: '#/components/schemas/error-bad-request-customization-validation-error-invalid-argument'
          timestamp_parse_error: '#/components/schemas/error-bad-request-customization-validation-error-timestamp-parse-error'
          unknown_error: '#/components/schemas/error-bad-request-customization-validation-error-unknown-error'
          unsupported_type: '#/components/schemas/error-bad-request-customization-validation-error-unsupported-type'
          wrong_type: '#/components/schemas/error-bad-request-customization-validation-error-wrong-type'
        propertyName: subtype
      oneOf:
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-bad-id-type'
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-date-parse-error'
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-enum-out-of-range'
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-expression-parse-error'
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-field-dropped'
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-field-immutable'
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-field-not-in-schema'
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-field-required'
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-fragment-not-found'
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-id-parse-error'
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-id-type-not-allowed'
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-invalid-argument'
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-timestamp-parse-error'
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-unknown-error'
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-unsupported-type'
        - $ref: '#/components/schemas/error-bad-request-customization-validation-error-wrong-type'
      properties:
        field_name:
          type: string
          description: The name of the invalid field.
          format: text
        reason:
          type: string
          description: The reason given for the error.
          format: text
        subtype:
          $ref: '#/components/schemas/error-bad-request-customization-validation-error-subtype'
      required:
        - subtype
      title: error-bad-request-customization-validation-error
    error-bad-request-customization-validation-error-bad-id-type:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-bad-id-type
    error-bad-request-customization-validation-error-date-parse-error:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-date-parse-error
    error-bad-request-customization-validation-error-enum-out-of-range:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-enum-out-of-range
    error-bad-request-customization-validation-error-expression-parse-error:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-expression-parse-error
    error-bad-request-customization-validation-error-field-dropped:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-field-dropped
    error-bad-request-customization-validation-error-field-immutable:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-field-immutable
    error-bad-request-customization-validation-error-field-not-in-schema:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-field-not-in-schema
    error-bad-request-customization-validation-error-field-required:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-field-required
    error-bad-request-customization-validation-error-fragment-not-found:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-fragment-not-found
    error-bad-request-customization-validation-error-id-parse-error:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-id-parse-error
    error-bad-request-customization-validation-error-id-type-not-allowed:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-id-type-not-allowed
    error-bad-request-customization-validation-error-invalid-argument:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-invalid-argument
    error-bad-request-customization-validation-error-subtype:
      type: string
      enum:
        - bad_id_type
        - date_parse_error
        - enum_out_of_range
        - expression_parse_error
        - field_dropped
        - field_immutable
        - field_not_in_schema
        - field_required
        - fragment_not_found
        - id_parse_error
        - id_type_not_allowed
        - invalid_argument
        - timestamp_parse_error
        - unknown_error
        - unsupported_type
        - wrong_type
    error-bad-request-customization-validation-error-timestamp-parse-error:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-timestamp-parse-error
    error-bad-request-customization-validation-error-unknown-error:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-unknown-error
    error-bad-request-customization-validation-error-unsupported-type:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-unsupported-type
    error-bad-request-customization-validation-error-wrong-type:
      type: object
      additionalProperties: false
      title: error-bad-request-customization-validation-error-wrong-type
    error-bad-request-invalid-api-version:
      type: object
      properties:
        value:
          type: string
          description: The provided API version.
          format: text
      required:
        - value
      title: error-bad-request-invalid-api-version
    error-bad-request-invalid-enum-value:
      type: object
      properties:
        allowed_values:
          type: array
          description: The allowed values for the field.
          items:
            type: string
            format: text
        field_name:
          type: string
          description: The field whose enum value is invalid.
          format: text
        value:
          type: string
          description: The value that was received.
          format: text
      required:
        - allowed_values
        - field_name
        - value
      title: error-bad-request-invalid-enum-value
    error-bad-request-invalid-field:
      type: object
      properties:
        field_name:
          type: string
          description: The field name that's invalid.
          format: text
      required:
        - field_name
      title: error-bad-request-invalid-field
    error-bad-request-invalid-id:
      type: object
      properties:
        field_name:
          type: string
          description: The field whose ID is invalid.
          format: text
      required:
        - field_name
      title: error-bad-request-invalid-id
    error-bad-request-merge-works-error:
      type: object
      properties:
        errors:
          type: array
          description: |
            The errors encountered during the validation of the merge.
          items:
            $ref: '#/components/schemas/error-bad-request-merge-works-error-error'
      title: error-bad-request-merge-works-error
    error-bad-request-merge-works-error-error:
      type: object
      properties:
        already_merged:
          $ref: '#/components/schemas/error-bad-request-merge-works-error-error-already-merged'
        closed:
          $ref: '#/components/schemas/error-bad-request-merge-works-error-error-closed'
        details:
          type: string
          description: The details of the error.
          format: text
        different_reporters:
          $ref: '#/components/schemas/error-bad-request-merge-works-error-error-different-reporters'
        different_workspace:
          $ref: '#/components/schemas/error-bad-request-merge-works-error-error-different-workspace'
        invalid_stage_transition:
          $ref: '#/components/schemas/error-bad-request-merge-works-error-error-invalid-stage-transition'
        locked:
          $ref: '#/components/schemas/error-bad-request-merge-works-error-error-locked'
        stage_not_found_for_subtype:
          $ref: '#/components/schemas/error-bad-request-merge-works-error-error-stage-not-found-for-subtype'
        subtype:
          type: string
          enum:
            - already_merged
            - closed
            - different_reporters
            - different_workspace
            - invalid_stage_transition
            - locked
            - stage_not_found_for_subtype
        work:
          type: string
          description: The ID of the work which failed the validation.
          format: id
      required:
        - details
        - work
      title: error-bad-request-merge-works-error-error
    error-bad-request-merge-works-error-error-already-merged:
      type: object
      properties:
        merged_into:
          type: string
          description: ID of the work into which the work was merged.
          format: id
      required:
        - merged_into
      title: error-bad-request-merge-works-error-error-already-merged
    error-bad-request-merge-works-error-error-closed:
      type: object
      additionalProperties: false
      title: error-bad-request-merge-works-error-error-closed
    error-bad-request-merge-works-error-error-different-reporters:
      type: object
      properties:
        primary_reporters:
          type: array
          description: The reporters of the primary work.
          items:
            type: string
            format: id
        secondary_reporters:
          type: array
          description: The reporters of the secondary work.
          items:
            type: string
            format: id
      title: error-bad-request-merge-works-error-error-different-reporters
    error-bad-request-merge-works-error-error-different-workspace:
      type: object
      properties:
        primary_workspace:
          type: string
          description: The workspace of the primary work.
          format: id
        secondary_workspace:
          type: string
          description: The workspace of the secondary work.
          format: id
      title: error-bad-request-merge-works-error-error-different-workspace
    error-bad-request-merge-works-error-error-invalid-stage-transition:
      type: object
      properties:
        current_stage:
          type: string
          description: The current stage of the work.
          format: id
        requested_stage:
          type: string
          description: The stage to which the transition isn't allowed.
          format: id
      required:
        - current_stage
        - requested_stage
      title: error-bad-request-merge-works-error-error-invalid-stage-transition
    error-bad-request-merge-works-error-error-locked:
      type: object
      additionalProperties: false
      title: error-bad-request-merge-works-error-error-locked
    error-bad-request-merge-works-error-error-stage-not-found-for-subtype:
      type: object
      properties:
        subtype:
          type: string
          description: |
            The subtype of the work for which stage is not configured.
          format: text
      title: error-bad-request-merge-works-error-error-stage-not-found-for-subtype
    error-bad-request-missing-dependency:
      type: object
      properties:
        dependencies:
          type: array
          description: The dependent fields.
          items:
            $ref: '#/components/schemas/error-bad-request-missing-dependency-dependency'
        dependent_field_name:
          type: string
          description: The field on which the value depends.
          format: text
        dependent_field_value:
          type: string
          description: The value which needs to be set of the dependent field.
          format: text
        provided_field_name:
          type: string
          description: The field whose value was received.
          format: text
        provided_field_value:
          type: string
          description: The value that was received.
          format: text
      title: error-bad-request-missing-dependency
    error-bad-request-missing-dependency-dependency:
      type: object
      properties:
        field_name:
          type: string
          description: The dependent field name.
          format: text
        field_value:
          type: string
          description: The dependent field value.
          format: text
      required:
        - field_name
        - field_value
      title: error-bad-request-missing-dependency-dependency
    error-bad-request-missing-required-field:
      type: object
      properties:
        field_name:
          type: string
          description: The missing field's name.
          format: text
      required:
        - field_name
      title: error-bad-request-missing-required-field
    error-bad-request-parse-error:
      type: object
      additionalProperties: false
      title: error-bad-request-parse-error
    error-bad-request-stale-schema-fragments:
      type: object
      additionalProperties: false
      description: |
        Error indicating that the request contained one or more stale schema
        fragments, which are schema fragments that have been replaced by a
        newer version and are therefore considered deprecated schema fragments.
        The caller should refresh and use the latest schema fragments in their
        request.
      title: error-bad-request-stale-schema-fragments
    error-bad-request-type:
      type: string
      enum:
        - artifact_already_attached_to_a_parent
        - bad_request
        - customization_validation_error
        - invalid_api_version
        - invalid_enum_value
        - invalid_field
        - invalid_id
        - merge_works_error
        - missing_dependency
        - missing_required_field
        - parse_error
        - stale_schema_fragments
        - unexpected_id_type
        - unexpected_json_type
        - value_not_permitted
        - workflow_component_validation_errors
    error-bad-request-unexpected-id-type:
      type: object
      properties:
        field_name:
          type: string
          description: The field whose ID type is unexpected.
          format: text
      required:
        - field_name
      title: error-bad-request-unexpected-id-type
    error-bad-request-unexpected-json-type:
      type: object
      properties:
        actual:
          $ref: '#/components/schemas/error-bad-request-unexpected-json-type-type'
        expected:
          $ref: '#/components/schemas/error-bad-request-unexpected-json-type-type'
        field_name:
          type: string
          description: The field name that's invalid.
          format: text
      required:
        - actual
        - expected
        - field_name
      title: error-bad-request-unexpected-json-type
    error-bad-request-unexpected-json-type-type:
      type: string
      enum:
        - array
        - bool
        - "null"
        - number
        - object
        - string
    error-bad-request-value-not-permitted:
      type: object
      properties:
        allowed_values:
          type: array
          description: The allowed values for the field.
          items:
            type: string
            format: text
        field_name:
          type: string
          description: The field whose value is not permitted.
          format: text
        reason:
          type: string
          description: The reason the value isn't permitted.
          format: text
      required:
        - field_name
      title: error-bad-request-value-not-permitted
    error-bad-request-workflow-component-validation-error:
      type: object
      description: |
        Error indicating that one or more workflow components failed
        validation.
      properties:
        code:
          type: string
          description: Error code uniquely identifying the validation issue.
          format: text
          maxLength: 16
        field:
          $ref: '#/components/schemas/error-bad-request-workflow-component-validation-error-field'
        location:
          $ref: '#/components/schemas/error-bad-request-workflow-component-validation-error-workflow-component-validation-location-type'
        message:
          type: string
          description: Human-readable message describing the issue.
          format: text
          maxLength: 512
        operation:
          $ref: '#/components/schemas/error-bad-request-workflow-component-validation-error-operation'
        workflow:
          $ref: '#/components/schemas/error-bad-request-workflow-component-validation-error-workflow'
        workflow_step:
          $ref: '#/components/schemas/error-bad-request-workflow-component-validation-error-workflow-step'
      required:
        - code
        - message
      title: error-bad-request-workflow-component-validation-error
    error-bad-request-workflow-component-validation-error-field:
      type: object
      description: Represents a field with a violation.
      properties:
        field_path:
          type: string
          description: Path to the field with dot notation.
          format: text
        parent_id:
          type: string
          description: The parent object containing the field.
          format: id
      required:
        - field_path
        - parent_id
      title: error-bad-request-workflow-component-validation-error-field
    error-bad-request-workflow-component-validation-error-operation:
      type: object
      description: Represents an operation with a violation.
      properties:
        id:
          type: string
          description: The ID of the operation with the error.
          format: id
      required:
        - id
      title: error-bad-request-workflow-component-validation-error-operation
    error-bad-request-workflow-component-validation-error-workflow:
      type: object
      description: Represents a workflow with a violation.
      properties:
        id:
          type: string
          description: The ID of the workflow with the error.
          format: id
      required:
        - id
      title: error-bad-request-workflow-component-validation-error-workflow
    error-bad-request-workflow-component-validation-error-workflow-component-validation-location-type:
      type: string
      enum:
        - field
        - operation
        - workflow
        - workflow_step
    error-bad-request-workflow-component-validation-error-workflow-step:
      type: object
      description: Represents a workflow step with a violation.
      properties:
        id:
          type: string
          description: The ID of the workflow step with the error.
          format: id
      required:
        - id
      title: error-bad-request-workflow-component-validation-error-workflow-step
    error-bad-request-workflow-component-validation-errors:
      type: object
      properties:
        errors:
          type: array
          description: Nested validation errors.
          items:
            $ref: '#/components/schemas/error-bad-request-workflow-component-validation-error'
      title: error-bad-request-workflow-component-validation-errors
    error-base:
      type: object
      properties:
        detail:
          type: string
          description: Error detail information.
          format: text
        message:
          type: string
          description: The message associated with the error.
          format: text
      title: error-base
    error-conflict:
      allOf:
        - $ref: '#/components/schemas/error-base'
        - type: object
          discriminator:
            mapping:
              conflict: '#/components/schemas/error-conflict-conflict'
            propertyName: type
          oneOf:
            - $ref: '#/components/schemas/error-conflict-conflict'
          properties:
            type:
              $ref: '#/components/schemas/error-conflict-type'
          required:
            - type
      title: error-conflict
    error-conflict-conflict:
      type: object
      additionalProperties: false
      title: error-conflict-conflict
    error-conflict-type:
      type: string
      enum:
        - conflict
    error-forbidden:
      allOf:
        - $ref: '#/components/schemas/error-base'
        - type: object
          discriminator:
            mapping:
              forbidden: '#/components/schemas/error-forbidden-forbidden'
            propertyName: type
          oneOf:
            - $ref: '#/components/schemas/error-forbidden-forbidden'
          properties:
            type:
              $ref: '#/components/schemas/error-forbidden-type'
          required:
            - type
      title: error-forbidden
    error-forbidden-forbidden:
      type: object
      additionalProperties: false
      title: error-forbidden-forbidden
    error-forbidden-type:
      type: string
      enum:
        - forbidden
    error-internal-server-error:
      allOf:
        - $ref: '#/components/schemas/error-base'
        - type: object
          discriminator:
            mapping:
              internal_error: '#/components/schemas/error-internal-server-error-internal-error'
            propertyName: type
          oneOf:
            - $ref: '#/components/schemas/error-internal-server-error-internal-error'
          properties:
            type:
              $ref: '#/components/schemas/error-internal-server-error-type'
            reference_id:
              type: string
              description: |
                A unique ID that's generated for the error that can be used for
                inquiry.
              format: text
          required:
            - type
      title: error-internal-server-error
    error-internal-server-error-internal-error:
      type: object
      additionalProperties: false
      title: error-internal-server-error-internal-error
    error-internal-server-error-type:
      type: string
      enum:
        - internal_error
    error-not-found:
      allOf:
        - $ref: '#/components/schemas/error-base'
        - type: object
          discriminator:
            mapping:
              not_found: '#/components/schemas/error-not-found-not-found'
            propertyName: type
          oneOf:
            - $ref: '#/components/schemas/error-not-found-not-found'
          properties:
            type:
              $ref: '#/components/schemas/error-not-found-type'
          required:
            - type
      title: error-not-found
    error-not-found-not-found:
      type: object
      additionalProperties: false
      title: error-not-found-not-found
    error-not-found-type:
      type: string
      enum:
        - not_found
    error-service-unavailable:
      allOf:
        - $ref: '#/components/schemas/error-base'
        - type: object
          discriminator:
            mapping:
              service_unavailable: '#/components/schemas/error-service-unavailable-service-unavailable'
            propertyName: type
          oneOf:
            - $ref: '#/components/schemas/error-service-unavailable-service-unavailable'
          properties:
            type:
              $ref: '#/components/schemas/error-service-unavailable-type'
          required:
            - type
      title: error-service-unavailable
    error-service-unavailable-service-unavailable:
      type: object
      additionalProperties: false
      title: error-service-unavailable-service-unavailable
    error-service-unavailable-type:
      type: string
      enum:
        - service_unavailable
    error-too-many-requests:
      allOf:
        - $ref: '#/components/schemas/error-base'
        - type: object
          discriminator:
            mapping:
              too_many_requests: '#/components/schemas/error-too-many-requests-too-many-requests'
            propertyName: type
          oneOf:
            - $ref: '#/components/schemas/error-too-many-requests-too-many-requests'
          properties:
            type:
              $ref: '#/components/schemas/error-too-many-requests-type'
            retry_after:
              type: integer
              description: |
                The number of seconds after which the client should retry.
              format: int64
          required:
            - type
      title: error-too-many-requests
    error-too-many-requests-too-many-requests:
      type: object
      additionalProperties: false
      title: error-too-many-requests-too-many-requests
    error-too-many-requests-type:
      type: string
      enum:
        - too_many_requests
    error-unauthorized:
      allOf:
        - $ref: '#/components/schemas/error-base'
        - type: object
          discriminator:
            mapping:
              unauthenticated: '#/components/schemas/error-unauthorized-unauthenticated'
            propertyName: type
          oneOf:
            - $ref: '#/components/schemas/error-unauthorized-unauthenticated'
          properties:
            type:
              $ref: '#/components/schemas/error-unauthorized-type'
          required:
            - type
      title: error-unauthorized
    error-unauthorized-type:
      type: string
      enum:
        - unauthenticated
    error-unauthorized-unauthenticated:
      type: object
      additionalProperties: false
      title: error-unauthorized-unauthenticated
    event-account-created:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/account'
      required:
        - account
      title: event-account-created
    event-account-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the account that was deleted.
          example: ACC-12345
          format: id
        old_account:
          $ref: '#/components/schemas/account'
      required:
        - id
      title: event-account-deleted
    event-account-updated:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/account'
        old_account:
          $ref: '#/components/schemas/account'
      required:
        - account
      title: event-account-updated
    event-ai-agent-response:
      type: object
      properties:
        agent:
          type: string
          description: The ID of the AI agent that consumed the event.
          format: id
        agent_response:
          type: string
          enum:
            - error
            - message
            - message_generation_started
            - progress
            - suggestions
        client_metadata:
          type: object
          description: |
            The metadata given by client to be passed to the event source.
        error:
          $ref: '#/components/schemas/ai-agent-event-execute-error'
        message:
          type: string
          description: |
            The final response of asynchronous agent events execution.
          format: text
        message_generation_started:
          $ref: '#/components/schemas/ai-agent-message-generation-started'
        progress:
          $ref: '#/components/schemas/ai-agent-event-execute-progress'
        session:
          type: string
          description: |
            The agent session ID to track the asynchronous execution of this
            session.
          format: id
        session_object:
          type: string
          description: An identifier of the session with the AI agent.
          format: text
        suggestions:
          $ref: '#/components/schemas/ai-agent-event-suggestions'
      required:
        - agent
        - session
        - session_object
      title: event-ai-agent-response
      x-go-name: EventAiAgentResponseBody
    event-article-created:
      type: object
      properties:
        article:
          $ref: '#/components/schemas/article'
      required:
        - article
      title: event-article-created
    event-article-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the article that was deleted.
          example: ARTICLE-12345
          format: id
        old_article:
          $ref: '#/components/schemas/article'
      required:
        - id
      title: event-article-deleted
    event-article-updated:
      type: object
      properties:
        article:
          $ref: '#/components/schemas/article'
        old_article:
          $ref: '#/components/schemas/article'
      required:
        - article
      title: event-article-updated
    event-conversation-created:
      type: object
      properties:
        conversation:
          $ref: '#/components/schemas/conversation'
      required:
        - conversation
      title: event-conversation-created
    event-conversation-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the conversation that was deleted.
          format: id
        old_conversation:
          $ref: '#/components/schemas/conversation'
      required:
        - id
      title: event-conversation-deleted
    event-conversation-updated:
      type: object
      properties:
        conversation:
          $ref: '#/components/schemas/conversation'
        old_conversation:
          $ref: '#/components/schemas/conversation'
      required:
        - conversation
      title: event-conversation-updated
    event-dashboard-created:
      type: object
      properties:
        dashboard:
          $ref: '#/components/schemas/dashboard'
      required:
        - dashboard
      title: event-dashboard-created
    event-dashboard-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the dashboard that was deleted.
          format: id
        old_dashboard:
          $ref: '#/components/schemas/dashboard'
      required:
        - id
      title: event-dashboard-deleted
    event-dashboard-updated:
      type: object
      properties:
        dashboard:
          $ref: '#/components/schemas/dashboard'
        old_dashboard:
          $ref: '#/components/schemas/dashboard'
      required:
        - dashboard
      title: event-dashboard-updated
    event-dev-user-created:
      type: object
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
        - dev_user
      title: event-dev-user-created
    event-dev-user-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the Dev user that was deleted.
          format: id
        old_dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
        - id
      title: event-dev-user-deleted
    event-dev-user-updated:
      type: object
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
        old_dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
        - dev_user
      title: event-dev-user-updated
    event-fetched-result:
      type: string
      enum:
        - forbidden
        - not_found
        - ok
    event-group-created:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/group'
      required:
        - group
      title: event-group-created
    event-group-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the group that was deleted.
          format: id
        old_group:
          $ref: '#/components/schemas/group'
      required:
        - id
      title: event-group-deleted
    event-group-member-added:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/group-summary'
        member:
          $ref: '#/components/schemas/user-summary'
      required:
        - group
        - member
      title: event-group-member-added
    event-group-member-removed:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/group-summary'
        member:
          $ref: '#/components/schemas/user-summary'
      required:
        - group
        - member
      title: event-group-member-removed
    event-group-updated:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/group'
        old_group:
          $ref: '#/components/schemas/group'
      required:
        - group
      title: event-group-updated
    event-incident-created:
      type: object
      properties:
        incident:
          $ref: '#/components/schemas/incident'
      required:
        - incident
      title: event-incident-created
    event-incident-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the incident that was deleted.
          format: id
        old_incident:
          $ref: '#/components/schemas/incident'
      required:
        - id
      title: event-incident-deleted
    event-incident-updated:
      type: object
      properties:
        incident:
          $ref: '#/components/schemas/incident'
        old_incident:
          $ref: '#/components/schemas/incident'
      required:
        - incident
      title: event-incident-updated
    event-link-created:
      type: object
      properties:
        link:
          $ref: '#/components/schemas/link'
      required:
        - link
      title: event-link-created
    event-link-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the link that was deleted.
          format: id
      required:
        - id
      title: event-link-deleted
    event-link-updated:
      type: object
      properties:
        link:
          $ref: '#/components/schemas/link'
        old_link:
          $ref: '#/components/schemas/link'
      required:
        - link
      title: event-link-updated
    event-part-created:
      type: object
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
        - part
      title: event-part-created
    event-part-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the part that was deleted.
          example: PROD-12345
          format: id
        old_part:
          $ref: '#/components/schemas/part'
      required:
        - id
      title: event-part-deleted
    event-part-updated:
      type: object
      properties:
        old_part:
          $ref: '#/components/schemas/part'
        part:
          $ref: '#/components/schemas/part'
      required:
        - part
      title: event-part-updated
    event-question-answer-created:
      type: object
      properties:
        question_answer:
          $ref: '#/components/schemas/question-answer'
      required:
        - question_answer
      title: event-question-answer-created
    event-question-answer-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the question-answer that was deleted.
          format: id
        old_question_answer:
          $ref: '#/components/schemas/question-answer'
      required:
        - id
      title: event-question-answer-deleted
    event-question-answer-updated:
      type: object
      properties:
        old_question_answer:
          $ref: '#/components/schemas/question-answer'
        question_answer:
          $ref: '#/components/schemas/question-answer'
      required:
        - question_answer
      title: event-question-answer-updated
    event-rev-org-created:
      type: object
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
        - rev_org
      title: event-rev-org-created
    event-rev-org-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the Rev organization that was deleted.
          example: REV-AbCdEfGh
          format: id
        old_rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
        - id
      title: event-rev-org-deleted
    event-rev-org-updated:
      type: object
      properties:
        old_rev_org:
          $ref: '#/components/schemas/rev-org'
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
        - rev_org
      title: event-rev-org-updated
    event-rev-user-created:
      type: object
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
        - rev_user
      title: event-rev-user-created
    event-rev-user-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the Rev user that was deleted.
          format: id
        old_rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
        - id
      title: event-rev-user-deleted
    event-rev-user-updated:
      type: object
      properties:
        old_rev_user:
          $ref: '#/components/schemas/rev-user'
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
        - rev_user
      title: event-rev-user-updated
    event-sla-tracker-created:
      type: object
      properties:
        sla_tracker:
          $ref: '#/components/schemas/sla-tracker'
      required:
        - sla_tracker
      title: event-sla-tracker-created
    event-sla-tracker-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the SLA tracker that was deleted.
          format: id
        old_sla_tracker:
          $ref: '#/components/schemas/sla-tracker'
      required:
        - id
      title: event-sla-tracker-deleted
    event-sla-tracker-fetched:
      type: object
      discriminator:
        mapping:
          forbidden: '#/components/schemas/empty'
          not_found: '#/components/schemas/empty'
          ok: '#/components/schemas/event-sla-tracker-fetched-ok'
        propertyName: result
      oneOf:
        - $ref: '#/components/schemas/empty'
        - $ref: '#/components/schemas/event-sla-tracker-fetched-ok'
      properties:
        id:
          type: string
          description: The ID of the SLA tracker that was fetched.
          format: id
        result:
          $ref: '#/components/schemas/event-fetched-result'
      required:
        - id
        - result
      title: event-sla-tracker-fetched
    event-sla-tracker-fetched-ok:
      type: object
      properties:
        sla_tracker:
          $ref: '#/components/schemas/sla-tracker'
      title: event-sla-tracker-fetched-ok
    event-sla-tracker-updated:
      type: object
      properties:
        old_sla_tracker:
          $ref: '#/components/schemas/sla-tracker'
        sla_tracker:
          $ref: '#/components/schemas/sla-tracker'
      required:
        - sla_tracker
      title: event-sla-tracker-updated
    event-survey-created:
      type: object
      properties:
        survey:
          $ref: '#/components/schemas/survey'
      required:
        - survey
      title: event-survey-created
    event-survey-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the survey that was deleted.
          format: id
        old_survey:
          $ref: '#/components/schemas/survey'
      required:
        - id
      title: event-survey-deleted
    event-survey-response-created:
      type: object
      properties:
        survey_response:
          $ref: '#/components/schemas/survey-response'
      required:
        - survey_response
      title: event-survey-response-created
    event-survey-response-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the survey response that was deleted.
          format: id
        old_survey_response:
          $ref: '#/components/schemas/survey-response'
      required:
        - id
      title: event-survey-response-deleted
    event-survey-response-updated:
      type: object
      properties:
        old_survey_response:
          $ref: '#/components/schemas/survey-response'
        survey_response:
          $ref: '#/components/schemas/survey-response'
      required:
        - survey_response
      title: event-survey-response-updated
    event-survey-updated:
      type: object
      properties:
        old_survey:
          $ref: '#/components/schemas/survey'
        survey:
          $ref: '#/components/schemas/survey'
      required:
        - survey
      title: event-survey-updated
    event-sync-history-created:
      type: object
      properties:
        sync_history:
          $ref: '#/components/schemas/sync-history'
      required:
        - sync_history
      title: event-sync-history-created
    event-sync-history-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the sync history that was deleted.
          format: id
      required:
        - id
      title: event-sync-history-deleted
    event-sync-history-updated:
      type: object
      properties:
        old_sync_history:
          $ref: '#/components/schemas/sync-history'
        sync_history:
          $ref: '#/components/schemas/sync-history'
      required:
        - sync_history
      title: event-sync-history-updated
    event-tag-created:
      type: object
      properties:
        tag:
          $ref: '#/components/schemas/tag'
      required:
        - tag
      title: event-tag-created
    event-tag-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the tag that was deleted.
          example: TAG-12345
          format: id
        old_tag:
          $ref: '#/components/schemas/tag'
      required:
        - id
      title: event-tag-deleted
    event-tag-updated:
      type: object
      properties:
        old_tag:
          $ref: '#/components/schemas/tag'
        tag:
          $ref: '#/components/schemas/tag'
      required:
        - tag
      title: event-tag-updated
    event-timeline-entry-created:
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
        - entry
      title: event-timeline-entry-created
    event-timeline-entry-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the timeline entry that was deleted.
          example: don:core:dvrv-us-1:devo/example:ticket/123:comment/comment-id
          format: id
        old_entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
        - id
      title: event-timeline-entry-deleted
    event-timeline-entry-updated:
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/timeline-entry'
        old_entry:
          $ref: '#/components/schemas/timeline-entry'
        reactions:
          type: array
          description: The reactions that were performed.
          items:
            $ref: '#/components/schemas/event-timeline-entry-updated-reaction'
          maxItems: 16
      required:
        - entry
      title: event-timeline-entry-updated
    event-timeline-entry-updated-reaction:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/event-timeline-entry-updated-reaction-action'
        emoji:
          type: string
          description: The emoji for the reaction.
          format: text
        reactor:
          $ref: '#/components/schemas/user-summary'
      required:
        - action
        - emoji
      title: event-timeline-entry-updated-reaction
    event-timeline-entry-updated-reaction-action:
      type: string
      enum:
        - added
        - removed
    event-webhook-created:
      type: object
      properties:
        webhook:
          $ref: '#/components/schemas/webhook'
      required:
        - webhook
      title: event-webhook-created
    event-webhook-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the webhook that was deleted.
          example: don:integration:dvrv-us-1:devo/example:webhook/webhook-id
          format: id
      required:
        - id
      title: event-webhook-deleted
    event-webhook-updated:
      type: object
      properties:
        webhook:
          $ref: '#/components/schemas/webhook'
      required:
        - webhook
      title: event-webhook-updated
    event-widget-created:
      type: object
      properties:
        widget:
          $ref: '#/components/schemas/widget'
      required:
        - widget
      title: event-widget-created
    event-widget-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the widget that was deleted.
          format: id
        old_widget:
          $ref: '#/components/schemas/widget'
      required:
        - id
      title: event-widget-deleted
    event-widget-updated:
      type: object
      properties:
        old_widget:
          $ref: '#/components/schemas/widget'
        widget:
          $ref: '#/components/schemas/widget'
      required:
        - widget
      title: event-widget-updated
    event-work-created:
      type: object
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
        - work
      title: event-work-created
    event-work-deleted:
      type: object
      properties:
        id:
          type: string
          description: The ID of the work that was deleted.
          example: ISS-12345
          format: id
        old_work:
          $ref: '#/components/schemas/work'
      required:
        - id
      title: event-work-deleted
    event-work-fetched:
      type: object
      discriminator:
        mapping:
          forbidden: '#/components/schemas/empty'
          not_found: '#/components/schemas/empty'
          ok: '#/components/schemas/event-work-fetched-ok'
        propertyName: result
      oneOf:
        - $ref: '#/components/schemas/empty'
        - $ref: '#/components/schemas/event-work-fetched-ok'
      properties:
        id:
          type: string
          description: The ID of the work that was fetched.
          example: ISS-12345
          format: id
        result:
          $ref: '#/components/schemas/event-fetched-result'
      required:
        - id
        - result
      title: event-work-fetched
    event-work-fetched-ok:
      type: object
      properties:
        work:
          $ref: '#/components/schemas/work'
      title: event-work-fetched-ok
    event-work-updated:
      type: object
      properties:
        old_work:
          $ref: '#/components/schemas/work'
        work:
          $ref: '#/components/schemas/work'
      required:
        - work
      title: event-work-updated
    external-communication-channel-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
      title: external-communication-channel-summary
    external-identity:
      type: object
      description: External identity of a user.
      properties:
        display_name:
          type: string
          description: Display name of the user in the external source.
          format: text
        id:
          type: string
          description: Unique ID of the user in the external source.
          format: text
        is_verified:
          type: boolean
          description: Whether the external identity is verified or not.
        issuer:
          type: string
          description: Issuer of the external identity of the user.
          format: text
      title: external-identity
    feature:
      allOf:
        - $ref: '#/components/schemas/part-base'
      title: feature
    feature-summary:
      allOf:
        - $ref: '#/components/schemas/part-base-summary'
      title: feature-summary
    field-descriptor:
      type: object
      description: Set of field attributes.
      properties:
        default_value:
          type: object
          description: The default value for this field.
        description:
          type: string
          description: Description of the field.
          format: text
        is_filterable:
          type: boolean
          description: |
            Whether this field is filterable, groupable and sortable.
        is_immutable:
          type: boolean
          description: Whether this field is immutable or not.
        is_overridable:
          type: boolean
          description: |
            Whether a stock unified enum can be extended with new values.
        is_required:
          type: boolean
          description: Whether this field is required or not.
        is_sensitive:
          type: boolean
          description: |
            Whether this field can hold PII or sensitive information that
            should not be logged.
        is_system:
          type: boolean
          description: Whether this field is a system field or not.
        name:
          type: string
          description: Name of the field.
          format: text
        uenum_values:
          type: array
          description: Allowed values for a unified enum.
          items:
            $ref: '#/components/schemas/schema-field-uenum-value'
        ui:
          $ref: '#/components/schemas/schema-field-ui-metadata'
        validation:
          $ref: '#/components/schemas/field-validation'
      title: field-descriptor
    field-validation:
      type: object
      description: Validation annotations.
      properties:
        contains:
          type: string
          description: string contains.
          format: text
        disabled:
          type: boolean
          description: disables validations for this field.
        eq_items:
          type: integer
          description: exact array length.
          format: int32
        eq_len:
          type: integer
          description: exact string length.
          format: int32
        gt:
          type: integer
          description: int must be greater than this.
          format: int32
        gte:
          type: integer
          description: int must be greater or equal than this.
          format: int32
        lt:
          type: integer
          description: int must be less than this.
          format: int32
        lte:
          type: integer
          description: int must be less or equal than this.
          format: int32
        max_items:
          type: integer
          description: maximum array length.
          format: int32
        max_len:
          type: integer
          description: maximum string length.
          format: int32
        min_items:
          type: integer
          description: minimum array length.
          format: int32
        min_len:
          type: integer
          description: minimum string length.
          format: int32
        pattern:
          type: string
          description: string pattern (re).
          format: text
        prefix:
          type: string
          description: string prefix.
          format: text
        suffix:
          type: string
          description: string suffix.
          format: text
      title: field-validation
    group:
      allOf:
        - $ref: '#/components/schemas/atom-base'
      title: group
    group-ingestion-source:
      type: string
      description: Creation source of the group.
      enum:
        - airdrop
        - scim
    group-item-type:
      type: string
      description: Type of the vista group item object.
      enum:
        - curated
        - dynamic
    group-member-type:
      type: string
      description: Type of the members in the group.
      enum:
        - dev_user
        - rev_user
    group-members-add-request:
      type: object
      description: A request to add a new member to a group.
      properties:
        group:
          type: string
          description: ID of the group where the member is being added.
          format: id
        member:
          type: string
          description: ID of the member to be added.
          example: DEVU-12345
          format: id
        member_rev_org:
          type: string
          description: |
            Rev org of the rev user to be added. This should be specified only
            if the member is a rev user
          example: REV-AbCdEfGh
          format: id
      required:
        - group
        - member
      title: group-members-add-request
    group-members-add-response:
      type: object
      additionalProperties: false
      title: group-members-add-response
      x-go-name: GroupMembersAddResponseBody
    group-members-list-request:
      type: object
      description: A request to list group members.
      properties:
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        group:
          type: string
          description: ID of the group for which to list members.
          format: id
        limit:
          type: integer
          description: |
            The maximum number of members to return. If not set, then the
            default is '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
      required:
        - group
      title: group-members-list-request
    group-members-list-response:
      type: object
      description: List of group members.
      properties:
        members:
          type: array
          description: List of members.
          items:
            $ref: '#/components/schemas/group-members-list-response-member'
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
      required:
        - members
      title: group-members-list-response
      x-go-name: GroupMembersListResponseBody
    group-members-list-response-member:
      type: object
      description: A group member.
      properties:
        member:
          $ref: '#/components/schemas/member-summary'
        member_rev_org:
          $ref: '#/components/schemas/rev-org-summary'
      required:
        - member
      title: group-members-list-response-member
    group-members-remove-request:
      type: object
      description: A request to remove a group member.
      properties:
        group:
          type: string
          description: ID of the group where the member is being removed.
          format: id
        member:
          type: string
          description: ID of the member to be removed.
          example: DEVU-12345
          format: id
        member_rev_org:
          type: string
          description: |
            Rev org of the rev user to be removed. This should be specified
            only if the member is a rev user
          example: REV-AbCdEfGh
          format: id
      required:
        - group
        - member
      title: group-members-remove-request
    group-members-remove-response:
      type: object
      additionalProperties: false
      title: group-members-remove-response
      x-go-name: GroupMembersRemoveResponseBody
    group-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
      title: group-summary
    group-type:
      type: string
      description: Type of the group.
      enum:
        - dynamic
        - static
    grouped-vista:
      allOf:
        - $ref: '#/components/schemas/vista-base'
        - type: object
          discriminator:
            propertyName: filter_type
          properties:
            filter_type:
              $ref: '#/components/schemas/grouped-vista-filter-type'
            flavor:
              $ref: '#/components/schemas/grouped-vista-flavor'
          required:
            - filter_type
      description: Represents a group of multiple vistas as a single unit.
      title: grouped-vista
    grouped-vista-filter-type:
      type: string
      description: |
        Type of DevRev object for which the grouped vista is applicable.
      enum:
        - conversations
        - parts
        - works
    grouped-vista-flavor:
      type: string
      description: Denotes the use case of the grouped vista.
      enum:
        - nnl
        - sprint_board
        - support_inbox
    groups-create-request:
      type: object
      description: A request to create a new group.
      properties:
        type:
          $ref: '#/components/schemas/group-type'
        description:
          type: string
          description: Description of the group.
          format: text
        dynamic_group_info:
          $ref: '#/components/schemas/dynamic-group-info'
        member_type:
          $ref: '#/components/schemas/group-member-type'
        name:
          type: string
          description: Unique name of the group.
          format: text
        owner:
          type: string
          description: Owner of the group.
          format: id
      required:
        - description
        - name
      title: groups-create-request
    groups-create-response:
      type: object
      description: The response to group creation.
      properties:
        group:
          $ref: '#/components/schemas/group'
      required:
        - group
      title: groups-create-response
      x-go-name: GroupsCreateResponseBody
    groups-get-request:
      type: object
      description: A request to get information about a group.
      properties:
        id:
          type: string
          description: The ID of the group to get.
          format: id
      required:
        - id
      title: groups-get-request
    groups-get-response:
      type: object
      description: The response to getting the group.
      properties:
        group:
          $ref: '#/components/schemas/group'
      required:
        - group
      title: groups-get-response
      x-go-name: GroupsGetResponseBody
    groups-list-request:
      type: object
      description: A request to get information about a list of groups.
      properties:
        created_by:
          type: array
          description: Filters the groups on the basis of creator.
          items:
            type: string
            format: id
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        group_type:
          type: array
          description: Filters the groups based on the group type.
          items:
            $ref: '#/components/schemas/group-type'
        ingestion_source:
          type: array
          description: Filter groups by ingestion source(s).
          items:
            $ref: '#/components/schemas/group-ingestion-source'
        is_default:
          type: boolean
          description: Whether to fetch default or custom groups.
        limit:
          type: integer
          description: |
            The maximum number of groups to return. The default is '50'.
          format: int32
        member_type:
          type: array
          description: Filters the groups on basis of member type.
          items:
            $ref: '#/components/schemas/group-member-type'
        mode:
          $ref: '#/components/schemas/list-mode'
        name:
          type: array
          description: Filters the groups on the basis of group name.
          items:
            type: string
            format: text
        sort_by:
          type: array
          description: Comma-separated fields to sort the groups by.
          items:
            type: string
            format: sort-by
        sync_metadata:
          $ref: '#/components/schemas/sync-metadata-filter'
      title: groups-list-request
    groups-list-response:
      type: object
      description: The response to listing the groups.
      properties:
        groups:
          type: array
          description: The list of groups.
          items:
            $ref: '#/components/schemas/group'
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
      required:
        - groups
      title: groups-list-response
      x-go-name: GroupsListResponseBody
    groups-update-request:
      type: object
      description: A request to update a group.
      properties:
        description:
          type: string
          description: The updated group's description.
          format: text
        dynamic_group_info:
          $ref: '#/components/schemas/groups-update-request-dynamic-group-info'
        id:
          type: string
          description: The ID of the group to update.
          format: id
        name:
          type: string
          description: The updated group's name.
          format: text
        owner:
          type: string
          description: The updated group's owner.
          format: id
          nullable: true
      required:
        - id
      title: groups-update-request
    groups-update-request-dynamic-group-info:
      type: object
      properties:
        membership_expression:
          $ref: '#/components/schemas/boolean-expression'
      required:
        - membership_expression
      title: groups-update-request-dynamic-group-info
    groups-update-response:
      type: object
      description: The response to group update.
      properties:
        group:
          $ref: '#/components/schemas/group'
      required:
        - group
      title: groups-update-response
      x-go-name: GroupsUpdateResponseBody
    impacted-customer-details:
      type: object
      description: Details of the impact due to the incident.
      properties:
        count:
          $ref: '#/components/schemas/enum-value'
        customer_ids:
          type: array
          description: List of customers impacted due to the incident.
          items:
            $ref: '#/components/schemas/account-summary'
      title: impacted-customer-details
    incident:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            acknowledged_date:
              type: string
              description: Timestamp when the incident was acknowledged.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
            applies_to_parts:
              type: array
              description: Parts to which the incident is applicable to.
              items:
                $ref: '#/components/schemas/part-summary'
            artifacts:
              type: array
              description: Artifacts attached to the incident.
              items:
                $ref: '#/components/schemas/artifact-summary'
            body:
              type: string
              description: Body of the incident.
              format: text
            identified_date:
              type: string
              description: Time when the incident was identified/reported.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
            impact:
              $ref: '#/components/schemas/impacted-customer-details'
            mitigated_date:
              type: string
              description: Timestamp when the incident was mitigated.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
            owned_by:
              type: array
              description: The users that own the incident.
              items:
                $ref: '#/components/schemas/user-summary'
            reported_by:
              $ref: '#/components/schemas/enum-value'
            severity:
              $ref: '#/components/schemas/enum-value'
            source:
              $ref: '#/components/schemas/enum-value'
            stage:
              $ref: '#/components/schemas/stage'
            tags:
              type: array
              description: Tags associated with the object.
              items:
                $ref: '#/components/schemas/tag-with-value'
            target_close_date:
              type: string
              description: Timestamp when the incident is expected to be resolved.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
            title:
              type: string
              description: Title of the incident.
              format: text
          required:
            - title
      title: incident
    instant-evaluation:
      type: object
      properties:
        at:
          type: string
          description: The time instant evaluated.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        definedness:
          $ref: '#/components/schemas/definedness'
        is_active:
          type: boolean
          description: |
            Active state of the organization schedule at the time instant.
        next_transition:
          type: string
          description: |
            Next instant at which the active state of the organization schedule
            changes, for example, if the schedule is currently off, the next
            instant at which it will be on.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
      required:
        - at
        - definedness
      title: instant-evaluation
    issue:
      allOf:
        - $ref: '#/components/schemas/work-base'
        - type: object
          properties:
            developed_with:
              type: array
              description: Parts associated based on git events.
              items:
                $ref: '#/components/schemas/part-summary'
            priority:
              $ref: '#/components/schemas/issue-priority'
            priority_v2:
              $ref: '#/components/schemas/enum-value'
            sla_summary:
              $ref: '#/components/schemas/archetype-sla-summary'
            sla_tracker:
              $ref: '#/components/schemas/sla-tracker-summary'
            sprint:
              $ref: '#/components/schemas/vista-group-item-summary'
            target_start_date:
              type: string
              description: Target start date for the object.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
      title: issue
    issue-priority:
      type: string
      description: Priority of the work based upon impact and criticality.
      enum:
        - p0
        - p1
        - p2
        - p3
    issue-summary:
      allOf:
        - $ref: '#/components/schemas/work-base-summary'
        - type: object
          properties:
            priority:
              $ref: '#/components/schemas/issue-priority'
            priority_v2:
              $ref: '#/components/schemas/enum-value-summary'
            sprint:
              $ref: '#/components/schemas/vista-group-item-summary'
      title: issue-summary
    job-history-item:
      type: object
      description: Defines a job history line item.
      properties:
        employment_status:
          $ref: '#/components/schemas/enum-value'
        end_date:
          type: string
          description: The end date of the job, or not specified if current.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        is_current:
          type: boolean
          description: Is this the current active job for the user.
        location:
          type: string
          description: The job location for the user.
          format: text
        start_date:
          type: string
          description: The start date of the job.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        title:
          type: string
          description: The job title for the user.
          format: text
      title: job-history-item
    keyrings-create-callback-request:
      type: object
      properties:
        code:
          type: string
          description: Code to exchange for an access token.
          format: text
        state:
          type: string
          description: State value given to the authorization request.
          format: text
      required:
        - code
        - state
      title: keyrings-create-callback-request
    legacy-stage:
      type: object
      description: Describes the current stage of a work item.
      properties:
        name:
          type: string
          description: Current stage name of the work item.
          format: text
      required:
        - name
      title: legacy-stage
    legacy-stage-summary:
      type: object
      description: Describes the current stage of a work item.
      properties:
        name:
          type: string
          description: Current stage name of the work item.
          format: text
      required:
        - name
      title: legacy-stage-summary
    lines-of-code:
      type: object
      description: Details of lines of code in this code change.
      properties:
        file_count:
          type: integer
          description: Count of files involved in this code change.
          format: int64
        lines_added:
          type: integer
          description: Number of new lines added in this code change.
          format: int64
        lines_deleted:
          type: integer
          description: Number of lines deleted in this code change.
          format: int64
        lines_modified:
          type: integer
          description: Number of lines modified in this code change.
          format: int64
      title: lines-of-code
    link:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            link_type:
              $ref: '#/components/schemas/link-type'
            source:
              $ref: '#/components/schemas/link-endpoint-summary'
            target:
              $ref: '#/components/schemas/link-endpoint-summary'
          required:
            - link_type
            - source
            - target
      title: link
    link-endpoint-summary:
      type: object
      discriminator:
        mapping:
          article: '#/components/schemas/article-summary'
          capability: '#/components/schemas/capability-summary'
          conversation: '#/components/schemas/conversation-summary'
          dev_user: '#/components/schemas/dev-user-summary'
          enhancement: '#/components/schemas/enhancement-summary'
          feature: '#/components/schemas/feature-summary'
          issue: '#/components/schemas/issue-summary'
          product: '#/components/schemas/product-summary'
          rev_org: '#/components/schemas/rev-org-summary'
          rev_user: '#/components/schemas/rev-user-summary'
          ticket: '#/components/schemas/ticket-summary'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/article-summary'
        - $ref: '#/components/schemas/capability-summary'
        - $ref: '#/components/schemas/conversation-summary'
        - $ref: '#/components/schemas/dev-user-summary'
        - $ref: '#/components/schemas/enhancement-summary'
        - $ref: '#/components/schemas/feature-summary'
        - $ref: '#/components/schemas/issue-summary'
        - $ref: '#/components/schemas/product-summary'
        - $ref: '#/components/schemas/rev-org-summary'
        - $ref: '#/components/schemas/rev-user-summary'
        - $ref: '#/components/schemas/ticket-summary'
      properties:
        type:
          $ref: '#/components/schemas/link-endpoint-type'
      required:
        - type
      title: link-endpoint-summary
    link-endpoint-type:
      type: string
      enum:
        - article
        - capability
        - conversation
        - dev_user
        - enhancement
        - feature
        - issue
        - product
        - rev_org
        - rev_user
        - ticket
    link-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            link_type:
              $ref: '#/components/schemas/link-type'
            source:
              $ref: '#/components/schemas/link-endpoint-summary'
            target:
              $ref: '#/components/schemas/link-endpoint-summary'
          required:
            - link_type
            - source
            - target
      title: link-summary
    link-type:
      type: string
      description: Type of link used to define the relationship.
      enum:
        - custom_link
        - developed_with
        - imports
        - is_analyzed_by
        - is_converted_to
        - is_dependent_on
        - is_duplicate_of
        - is_follow_up_of
        - is_merged_into
        - is_parent_of
        - is_part_of
        - is_related_to
        - serves
    links-create-request:
      type: object
      description: The request to create a new link.
      properties:
        custom_link_type:
          type: string
          description: The ID of the custom link type.
          format: id
        link_type:
          $ref: '#/components/schemas/link-type'
        source:
          type: string
          description: The ID of the source object.
          format: id
        target:
          type: string
          description: The ID of the target object.
          format: id
      required:
        - link_type
        - source
        - target
      title: links-create-request
    links-create-response:
      type: object
      description: The response to creating a new link.
      properties:
        link:
          $ref: '#/components/schemas/link'
      required:
        - link
      title: links-create-response
      x-go-name: LinksCreateResponseBody
    links-delete-request:
      type: object
      description: The request to delete a link.
      properties:
        id:
          type: string
          description: The ID of the link to delete.
          format: id
      required:
        - id
      title: links-delete-request
    links-delete-response:
      type: object
      additionalProperties: false
      description: The response for deleting a link.
      title: links-delete-response
      x-go-name: LinksDeleteResponseBody
    links-direction:
      type: string
      description: |
        The direction of link, which can either be outbound such that the
        object is the source of the link, otherwise inbound where the object is
        the target of the link.
      enum:
        - is_source
        - is_target
    links-get-request:
      type: object
      description: The request to get a link's information.
      properties:
        id:
          type: string
          description: The requested link's ID.
          format: id
      required:
        - id
      title: links-get-request
    links-get-response:
      type: object
      description: The response to getting a link's information.
      properties:
        link:
          $ref: '#/components/schemas/link'
      required:
        - link
      title: links-get-response
      x-go-name: LinksGetResponseBody
    links-list-request:
      type: object
      description: The request to get information about a list of links.
      properties:
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        direction:
          $ref: '#/components/schemas/links-direction'
        limit:
          type: integer
          description: |
            The maximum number of links to return. If not set, then the default
            is '50'.
          format: int32
        link_type:
          type: array
          description: |
            The link type(s) to filter for, otherwise if not present, all link
            types are included.
          items:
            $ref: '#/components/schemas/link-type'
        mode:
          $ref: '#/components/schemas/list-mode'
        object:
          type: string
          description: The ID of the object to list the links for.
          format: id
        object_types:
          type: array
          description: |
            The object types to filter for, otherwise if not present, all
            object types are included.
          items:
            $ref: '#/components/schemas/link-endpoint-type'
        types:
          type: array
          deprecated: true
          description: |
            The link types to filter for, otherwise if not present, all link
            types are included.
          items:
            $ref: '#/components/schemas/link-type'
      required:
        - object
      title: links-list-request
    links-list-response:
      type: object
      description: The response to listing the links.
      properties:
        links:
          type: array
          description: The list of links.
          items:
            $ref: '#/components/schemas/link'
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
      required:
        - links
      title: links-list-response
      x-go-name: LinksListResponseBody
    links-replace-request:
      type: object
      description: The request to replace a link.
      properties:
        id:
          type: string
          description: The ID of the link to be replaced.
          format: id
        link_type:
          $ref: '#/components/schemas/link-type'
        source:
          type: string
          description: The ID of the source object.
          format: id
        target:
          type: string
          description: The ID of the target object.
          format: id
      required:
        - id
        - link_type
        - source
        - target
      title: links-replace-request
    links-replace-response:
      type: object
      description: The response to replacing a link.
      properties:
        link:
          $ref: '#/components/schemas/link'
      required:
        - link
      title: links-replace-response
      x-go-name: LinksReplaceResponseBody
    list-mode:
      type: string
      description: |
        The iteration mode to use. If "after", then entries after the provided
        cursor will be returned, or if no cursor is provided, then from the
        beginning. If "before", then entries before the provided cursor will be
        returned, or if no cursor is provided, then from the end. Entries will
        always be returned in the specified sort-by order.
      enum:
        - after
        - before
    meeting:
      allOf:
        - $ref: '#/components/schemas/atom-base'
      title: meeting
    meeting-channel:
      type: string
      description: The channel of meeting.
      enum:
        - amazon_connect
        - google_meet
        - offline
        - other
        - teams
        - zoom
    meeting-state:
      type: string
      description: The state of meeting.
      enum:
        - canceled
        - completed
        - no_show
        - ongoing
        - rejected
        - rescheduled
        - scheduled
        - waiting
    meetings-count-request:
      type: object
      properties:
        channel:
          type: array
          description: Filters for meeting on specified channels.
          items:
            $ref: '#/components/schemas/meeting-channel'
        created_by:
          type: array
          description: Filters for meetings created by the specified user(s).
          items:
            type: string
            format: id
        created_date:
          $ref: '#/components/schemas/date-filter'
        ended_date:
          $ref: '#/components/schemas/date-filter'
        external_ref:
          type: array
          description: Filters for meetings with the provided external_ref(s).
          items:
            type: string
            format: text
        links:
          type: array
          description: Filters for links associated with the meeting.
          items:
            $ref: '#/components/schemas/meetings-filter-link-summary-filter'
        members:
          type: array
          description: Filter for meeting on specified Member Ids.
          items:
            type: string
            format: id
        modified_date:
          $ref: '#/components/schemas/date-filter'
        organizer:
          type: array
          description: Filter for meeting on specified organizers.
          items:
            type: string
            format: id
        parent:
          type: array
          deprecated: true
          description: Filters for meetings with the provided parent.
          example:
            - ACC-12345
          items:
            type: string
            format: id
        scheduled_date:
          $ref: '#/components/schemas/date-filter'
        state:
          type: array
          description: Filters for meeting on specified state or outcomes.
          items:
            $ref: '#/components/schemas/meeting-state'
      title: meetings-count-request
    meetings-count-response:
      type: object
      properties:
        count:
          type: integer
          description: The number of meetings matching the filter.
          format: int64
      required:
        - count
      title: meetings-count-response
      x-go-name: MeetingsCountResponseBody
    meetings-create-request:
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/meeting-channel'
        custom_fields:
          type: object
          description: Application-defined custom fields.
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        description:
          type: string
          description: The description of the meeting.
          format: text
        ended_date:
          type: string
          description: Time at which meeting ended.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        external_ref:
          type: string
          description: External reference for the meeting.
          format: text
        external_url:
          type: string
          description: External URL for the meeting.
          format: text
        members:
          type: array
          description: IDs of the users that were part of the meeting.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
          maxItems: 800
          minItems: 1
        organizer:
          type: string
          description: |
            The ID of the user who organized the meeting. If not provided, the
            creator is set as the organizer.
          example: DEVU-12345
          format: id
        parent:
          type: string
          deprecated: true
          description: The parent object ID in which the meeting was created.
          example: ACC-12345
          format: id
        recording_url:
          type: string
          description: The recording URL of the meeting.
          format: text
        scheduled_date:
          type: string
          description: The date and time when the meeting was scheduled.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        state:
          $ref: '#/components/schemas/meeting-state'
        tags:
          type: array
          description: Tags associated with the meeting.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
        title:
          type: string
          description: The title of the meeting.
          format: text
      required:
        - channel
        - members
        - state
        - title
      title: meetings-create-request
    meetings-create-response:
      type: object
      properties:
        meeting:
          $ref: '#/components/schemas/meeting'
      required:
        - meeting
      title: meetings-create-response
      x-go-name: MeetingsCreateResponseBody
    meetings-delete-request:
      type: object
      properties:
        id:
          type: string
          description: The meeting's ID.
          format: id
      required:
        - id
      title: meetings-delete-request
    meetings-delete-response:
      type: object
      additionalProperties: false
      title: meetings-delete-response
      x-go-name: MeetingsDeleteResponseBody
    meetings-filter-link-summary-filter:
      type: object
      description: The filter for the link summary.
      properties:
        link_type:
          type: string
          description: |
            Filters for link type in links associated with the meeting.
          format: text
        target:
          type: string
          description: |
            Filters for target id in links associated with the meeting.
          format: id
        target_object_type:
          type: string
          description: |
            Filters for target object type in links associated with the
            meeting.
          format: text
      title: meetings-filter-link-summary-filter
    meetings-get-request:
      type: object
      properties:
        id:
          type: string
          description: The meeting's ID.
          format: id
      required:
        - id
      title: meetings-get-request
    meetings-get-response:
      type: object
      properties:
        meeting:
          $ref: '#/components/schemas/meeting'
      required:
        - meeting
      title: meetings-get-response
      x-go-name: MeetingsGetResponseBody
    meetings-list-request:
      type: object
      properties:
        channel:
          type: array
          description: Filters for meeting on specified channels.
          items:
            $ref: '#/components/schemas/meeting-channel'
        created_by:
          type: array
          description: Filters for meetings created by the specified user(s).
          items:
            type: string
            format: id
        created_date:
          $ref: '#/components/schemas/date-filter'
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        ended_date:
          $ref: '#/components/schemas/date-filter'
        external_ref:
          type: array
          description: Filters for meetings with the provided external_ref(s).
          items:
            type: string
            format: text
        limit:
          type: integer
          description: The maximum number of meetings to return.
          format: int32
        links:
          type: array
          description: Filters for links associated with the meeting.
          items:
            $ref: '#/components/schemas/meetings-filter-link-summary-filter'
        members:
          type: array
          description: Filter for meeting on specified Member Ids.
          items:
            type: string
            format: id
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-filter'
        organizer:
          type: array
          description: Filter for meeting on specified organizers.
          items:
            type: string
            format: id
        parent:
          type: array
          deprecated: true
          description: Filters for meetings with the provided parent.
          example:
            - ACC-12345
          items:
            type: string
            format: id
        scheduled_date:
          $ref: '#/components/schemas/date-filter'
        sort_by:
          type: array
          description: |
            Fields to sort the meetings by and the direction to sort them.
          items:
            type: string
            format: sort-by
        state:
          type: array
          description: Filters for meeting on specified state or outcomes.
          items:
            $ref: '#/components/schemas/meeting-state'
      title: meetings-list-request
    meetings-list-response:
      type: object
      properties:
        meetings:
          type: array
          description: The list of meetings.
          items:
            $ref: '#/components/schemas/meeting'
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
      required:
        - meetings
      title: meetings-list-response
      x-go-name: MeetingsListResponseBody
    meetings-update-request:
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/meeting-channel'
        custom_fields:
          type: object
          description: Application-defined custom fields.
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        description:
          type: string
          description: The description of the meeting.
          format: text
        ended_date:
          type: string
          description: Updates the date and time when the meeting ended.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          nullable: true
        external_ref:
          type: string
          description: External Reference for the meeting.
          format: text
        external_url:
          type: string
          description: External URL for the meeting.
          format: text
        id:
          type: string
          description: The meetings ID.
          format: id
        members:
          $ref: '#/components/schemas/meetings-update-request-members'
        organizer:
          type: string
          description: The ID of the user who organized the meeting.
          example: DEVU-12345
          format: id
        recording:
          type: string
          description: The ID of the meeting's recording artifact.
          example: ARTIFACT-12345
          format: id
          nullable: true
        recording_url:
          type: string
          description: The recording URL of the meeting.
          format: text
        scheduled_date:
          type: string
          description: |
            Updates the date and time when the meeting was scheduled.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          nullable: true
        state:
          $ref: '#/components/schemas/meeting-state'
        tags:
          $ref: '#/components/schemas/meetings-update-request-tags'
        title:
          type: string
          description: The title of the meeting.
          format: text
        transcript:
          type: string
          description: |
            The ID of the artifact for the transcript of the meeting.
          example: ARTIFACT-12345
          format: id
      required:
        - id
      title: meetings-update-request
    meetings-update-request-members:
      type: object
      properties:
        set:
          type: array
          description: |
            Sets the members to the provided user IDs. This must not be empty.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
      title: meetings-update-request-members
    meetings-update-request-tags:
      type: object
      properties:
        set:
          type: array
          description: Sets the provided tags on the meeting item.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
      title: meetings-update-request-tags
    meetings-update-response:
      type: object
      properties:
        meeting:
          $ref: '#/components/schemas/meeting'
      required:
        - meeting
      title: meetings-update-response
      x-go-name: MeetingsUpdateResponseBody
    member-summary:
      type: object
      discriminator:
        mapping:
          dev_user: '#/components/schemas/dev-user-summary'
          group: '#/components/schemas/group-summary'
          rev_user: '#/components/schemas/rev-user-summary'
          sys_user: '#/components/schemas/sys-user-summary'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/dev-user-summary'
        - $ref: '#/components/schemas/group-summary'
        - $ref: '#/components/schemas/rev-user-summary'
        - $ref: '#/components/schemas/sys-user-summary'
      properties:
        type:
          $ref: '#/components/schemas/member-type'
      required:
        - type
      title: member-summary
    member-type:
      type: string
      enum:
        - dev_user
        - group
        - rev_user
        - sys_user
    metric-action-execute-request:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/metric-action-execute-request-action'
        event_date:
          type: string
          description: Timestamp of the event.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        metric:
          type: string
          description: |
            The metric's ID for which the metric action is to be executed.
          format: id
        object:
          type: string
          description: |
            The underlying object's ID on which the metric action is to be
            executed.
          format: id
      required:
        - action
        - event_date
        - metric
        - object
      title: metric-action-execute-request
    metric-action-execute-request-action:
      type: string
      enum:
        - complete
        - pause
        - restart
        - resume
        - start
    metric-action-execute-response:
      type: object
      additionalProperties: false
      title: metric-action-execute-response
      x-go-name: MetricActionExecuteResponseBody
    metric-definition:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            name:
              type: string
              description: Human readable name of the metric.
              format: text
      title: metric-definition
    metric-definition-applies-to:
      type: string
      description: The list of item types on which the metric might be applied.
      enum:
        - conversation
        - issue
        - ticket
    metric-definition-metric-type:
      type: string
      description: |
        The type of the metric. 'time' metrics track the time spent in some
        state, supporting operations like 'start', 'stop', 'pause', 'resume'.
        'value' metrics track a value, supporting operations like 'set',
        'increment', 'decrement'.
      enum:
        - time
        - value
    metric-definition-status:
      type: string
      description: |
        The status of the metric. 'active' metrics can be used to create new
        SLAs, while 'inactive' metrics can not be used in new SLAs. Metrics can
        be updated between 'active' and 'inactive' states.
      enum:
        - active
        - inactive
    metric-definition-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            name:
              type: string
              description: Human readable name of the metric.
              format: text
      title: metric-definition-summary
    metric-definitions-create-request:
      type: object
      properties:
        applies_to:
          type: array
          description: |
            The list of object types on which the metric can be applied.
          items:
            $ref: '#/components/schemas/metric-definition-applies-to'
        description:
          type: string
          description: Description of the purpose and operation of the metric.
          format: text
          maxLength: 1024
        name:
          type: string
          description: A unique human readable name of the metric.
          format: text
          maxLength: 64
          minLength: 1
      required:
        - applies_to
        - name
      title: metric-definitions-create-request
    metric-definitions-create-response:
      type: object
      properties:
        metric_definition:
          $ref: '#/components/schemas/metric-definition'
      required:
        - metric_definition
      title: metric-definitions-create-response
      x-go-name: MetricDefinitionsCreateResponseBody
    metric-definitions-delete-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the metric definition to be deleted.
          format: id
      required:
        - id
      title: metric-definitions-delete-request
    metric-definitions-delete-response:
      type: object
      additionalProperties: false
      description: The response to deleting a metric definition.
      title: metric-definitions-delete-response
      x-go-name: MetricDefinitionsDeleteResponseBody
    metric-definitions-get-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the metric definition to get.
          format: id
        name:
          type: string
          description: The unique human readable name of the metric.
          format: text
          maxLength: 64
          minLength: 1
      title: metric-definitions-get-request
    metric-definitions-get-response:
      type: object
      properties:
        metric_definition:
          $ref: '#/components/schemas/metric-definition'
      required:
        - metric_definition
      title: metric-definitions-get-response
      x-go-name: MetricDefinitionsGetResponseBody
    metric-definitions-list-request:
      type: object
      properties:
        type:
          type: array
          description: The type of metric definitions sought.
          items:
            $ref: '#/components/schemas/metric-definition-metric-type'
        applies_to_type:
          type: array
          description: The type of objects the metric definition applies to.
          items:
            $ref: '#/components/schemas/metric-definition-applies-to'
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        include_custom_metrics:
          type: boolean
          description: |
            Whether to include custom metrics in the response. If not set, then
            custom metrics are excluded.
        limit:
          type: integer
          description: |
            The maximum number of records to return. The default is '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        sort_by:
          type: array
          description: |
            Fields to sort the records by and the direction to sort them.
          items:
            type: string
            format: sort-by
        status:
          type: array
          description: The status of the metric definition.
          items:
            $ref: '#/components/schemas/metric-definition-status'
      title: metric-definitions-list-request
    metric-definitions-list-response:
      type: object
      properties:
        metric_definitions:
          type: array
          description: The list of metric definitions.
          items:
            $ref: '#/components/schemas/metric-definition'
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
      required:
        - metric_definitions
      title: metric-definitions-list-response
      x-go-name: MetricDefinitionsListResponseBody
    metric-definitions-update-request:
      type: object
      properties:
        description:
          type: string
          description: |
            The updated description of the purpose and operation of the metric.
          format: text
          maxLength: 1024
        id:
          type: string
          description: The ID of the metric definition to update.
          format: id
        name:
          type: string
          description: The updated unique human readable name of the metric.
          format: text
          maxLength: 64
          minLength: 1
        status:
          $ref: '#/components/schemas/metric-definition-status'
      required:
        - id
      title: metric-definitions-update-request
    metric-definitions-update-response:
      type: object
      properties:
        metric_definition:
          $ref: '#/components/schemas/metric-definition'
      required:
        - metric_definition
      title: metric-definitions-update-response
      x-go-name: MetricDefinitionsUpdateResponseBody
    metric-tracker:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          $ref: '#/components/schemas/metric-tracker-type'
      required:
        - type
      title: metric-tracker
    metric-tracker-type:
      type: string
    metric-trackers-get-request:
      type: object
      properties:
        metric:
          type: string
          description: The ID of the metric that is being tracked.
          format: id
        object:
          type: string
          description: |
            The ID of the underlying object on which the metric is being
            tracked.
          format: id
      required:
        - metric
        - object
      title: metric-trackers-get-request
    metric-trackers-get-response:
      type: object
      properties:
        metric_tracker:
          $ref: '#/components/schemas/metric-tracker'
      required:
        - metric_tracker
      title: metric-trackers-get-response
      x-go-name: MetricTrackersGetResponseBody
    org-base:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            display_name:
              type: string
              description: Name of the Organization.
              format: text
      title: org-base
    org-base-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            display_name:
              type: string
              description: Name of the Organization.
              format: text
      title: org-base-summary
    org-environment:
      type: string
      description: |
        The environment of the Org. Defaults to 'production' if not specified.
      enum:
        - production
        - staging
        - test
    org-schedule:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            default_weekly_org_schedule:
              $ref: '#/components/schemas/weekly-org-schedule'
            min_valid_days:
              type: integer
              description: |
                The schedule must be valid and well-defined for at least this many
                days in the future, otherwise a warning notification is generated.
                Default is 0 if not specified.
              format: int32
            name:
              type: string
              description: Human-readable name.
              format: text
            org_schedule_fragments:
              type: array
              description: |
                The list of schedule fragments. It must be an ordered list of
                contiguous fragments (the next starting when the previous one
                ends), updates in a published schedule are only allowed to add new
                ones to the future.
              items:
                $ref: '#/components/schemas/org-schedule-fragment-overview'
            status:
              $ref: '#/components/schemas/org-schedule-status'
            timezone:
              type: string
              description: |
                Timezone in which this is defined. Only organization schedules in
                the same timezone can be directly combined.
              format: text
            valid_until:
              type: string
              description: |
                Derived field indicating when a valid organization schedule will
                become invalid. If omitted, the schedule is already invalid. A
                schedule is valid if it has a weekly schedule for all named periods
                for all its schedule fragments, and if it has a schedule fragment
                for the time period in question.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
            weekly_org_schedules:
              type: array
              description: |
                If the organization schedule fragment specifies that the given day
                belongs to a named period, a weekly schedule from this list with
                the matching name will be selected.
              items:
                $ref: '#/components/schemas/weekly-org-schedule'
          required:
            - status
      title: org-schedule
    org-schedule-fragment:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            from:
              type: string
              description: |
                The date (inclusive) on which the organization schedule fragment
                begins.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
            intervals:
              type: array
              description: |
                Periods during which the schedule is considered to be 'off' or to
                be in some specific named period.
              items:
                $ref: '#/components/schemas/org-schedule-interval'
            name:
              type: string
              description: |
                Human-readable name, indicating the purpose of the schedule.
              format: text
            region_codes:
              type: array
              description: |
                CLDR region code of the countries/regions it is meant to be valid
                for. Does not drive logic, serves only for easier filtering and
                organization.
              items:
                type: string
                format: text
            status:
              $ref: '#/components/schemas/org-schedule-fragment-status'
            to:
              type: string
              description: |
                The date (exclusive) on which the organization schedule fragment's
                validity ends.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
          required:
            - status
      title: org-schedule-fragment
    org-schedule-fragment-overview:
      type: object
      additionalProperties: false
      description: |
        The representation of the organization schedule fragment embedded
        inside a organization schedule, used to quickly look up the schedule
        fragment for the right period.
      title: org-schedule-fragment-overview
    org-schedule-fragment-status:
      type: string
      description: |
        Status determines how an item can be used. In 'draft' status an item
        can be edited but can't be used. When 'published' the item can longer
        be edited but can be used. 'Archived' is read-only.
      enum:
        - archived
        - draft
        - published
    org-schedule-fragments-create-request:
      type: object
      properties:
        from:
          type: string
          description: |
            Date (inclusive) on which the organization schedule fragment
            begins.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        intervals:
          type: array
          description: The intervals that comprise the schedule fragment.
          items:
            $ref: '#/components/schemas/create-org-schedule-interval'
        name:
          type: string
          description: Name of the organization schedule fragment.
          format: text
        region_codes:
          type: array
          description: |
            CLDR region code of the countries/regions it is meant to be valid
            for. Does not drive logic, serves only for easier filtering and
            organization.
          items:
            type: string
            format: text
        to:
          type: string
          description: |
            Date (exclusive) on which the organization schedule fragment's
            validity ends.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
      required:
        - from
        - intervals
        - name
        - to
      title: org-schedule-fragments-create-request
    org-schedule-fragments-create-response:
      type: object
      properties:
        org_schedule_fragment:
          $ref: '#/components/schemas/org-schedule-fragment'
      required:
        - org_schedule_fragment
      title: org-schedule-fragments-create-response
      x-go-name: OrgScheduleFragmentsCreateResponseBody
    org-schedule-fragments-get-request:
      type: object
      properties:
        id:
          type: string
          description: Organization schedule Fragment ID.
          format: id
      required:
        - id
      title: org-schedule-fragments-get-request
    org-schedule-fragments-get-response:
      type: object
      properties:
        org_schedule_fragment:
          $ref: '#/components/schemas/org-schedule-fragment'
      required:
        - org_schedule_fragment
      title: org-schedule-fragments-get-response
      x-go-name: OrgScheduleFragmentsGetResponseBody
    org-schedule-fragments-transition-request:
      type: object
      properties:
        id:
          type: string
          description: Organization schedule Fragment ID.
          format: id
        status:
          $ref: '#/components/schemas/org-schedule-fragment-status'
      required:
        - id
        - status
      title: org-schedule-fragments-transition-request
    org-schedule-fragments-transition-response:
      type: object
      properties:
        org_schedule_fragment:
          $ref: '#/components/schemas/org-schedule-fragment'
      required:
        - org_schedule_fragment
      title: org-schedule-fragments-transition-response
      x-go-name: OrgScheduleFragmentsTransitionResponseBody
    org-schedule-interval:
      type: object
      additionalProperties: false
      description: An optionally named period on day granularity.
      title: org-schedule-interval
    org-schedule-status:
      type: string
      description: |
        Status determines how an item can be used. In 'draft' status an item
        can be edited but can't be used. When 'published' the item can longer
        be edited but can be used. 'Archived' is read-only.
      enum:
        - archived
        - draft
        - published
    org-schedule-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            name:
              type: string
              description: Human-readable name.
              format: text
            status:
              $ref: '#/components/schemas/org-schedule-status'
            timezone:
              type: string
              description: |
                Timezone in which this is defined. Only organization schedules in
                the same timezone can be directly combined.
              format: text
            valid_until:
              type: string
              description: |
                Derived field indicating when a valid organization schedule will
                become invalid. If omitted, the schedule is already invalid. A
                schedule is valid if it has a weekly schedule for all named periods
                for all its schedule fragments, and if it has a schedule fragment
                for the time period in question.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
          required:
            - status
      title: org-schedule-summary
    org-schedules-create-request:
      type: object
      properties:
        default_weekly_org_schedule:
          $ref: '#/components/schemas/set-weekly-org-schedule'
        min_valid_days:
          type: integer
          description: |
            Organization schedule must be valid for at least this many days in
            the future. Meaning organization schedule fragments must cover this
            period. 0 if omitted.
          format: int64
        name:
          type: string
          description: Human-readable name.
          format: text
        org_schedule_fragments:
          type: array
          description: |
            List of organization schedule fragments with no overlaps or gaps.
          items:
            $ref: '#/components/schemas/set-org-schedule-fragment-summary'
        timezone:
          type: string
          description: |
            Timezone in which the organization schedule applies. Expected to be
            a valid IANA time zone name such as America/New_York.
          format: text
        weekly_org_schedules:
          type: array
          description: |
            If this day belongs to a named period according to the currently
            active organization schedule fragment, a weekly organization
            schedule from this list with the corresponding name will apply.
          items:
            $ref: '#/components/schemas/set-weekly-org-schedule'
      required:
        - name
        - timezone
      title: org-schedules-create-request
    org-schedules-create-response:
      type: object
      properties:
        org_schedule:
          $ref: '#/components/schemas/org-schedule'
      required:
        - org_schedule
      title: org-schedules-create-response
      x-go-name: OrgSchedulesCreateResponseBody
    org-schedules-evaluate-request:
      type: object
      properties:
        id:
          type: string
          description: Organization schedule ID.
          format: id
        instants:
          type: array
          description: Time instants to evaluate the organization schedule for.
          example:
            - "2023-01-01T12:00:00.000Z"
          items:
            type: string
            format: date-time
          minItems: 1
      required:
        - id
        - instants
      title: org-schedules-evaluate-request
    org-schedules-evaluate-response:
      type: object
      properties:
        instant_evaluations:
          type: array
          description: |
            The evaluations for the given time instants in the requested order.
          items:
            $ref: '#/components/schemas/instant-evaluation'
      required:
        - instant_evaluations
      title: org-schedules-evaluate-response
      x-go-name: OrgSchedulesEvaluateResponseBody
    org-schedules-get-request:
      type: object
      properties:
        id:
          type: string
          description: Organization schedule ID.
          format: id
      required:
        - id
      title: org-schedules-get-request
    org-schedules-get-response:
      type: object
      properties:
        org_schedule:
          $ref: '#/components/schemas/org-schedule'
      required:
        - org_schedule
      title: org-schedules-get-response
      x-go-name: OrgSchedulesGetResponseBody
    org-schedules-list-request:
      type: object
      properties:
        created_by_id:
          type: array
          description: Creator ID the filter matches.
          items:
            type: string
            format: id
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        limit:
          type: integer
          description: |
            Max number of organization schedules returned in a page. Default is
            50.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        status:
          type: array
          description: The organization schedule statuses the filter matches.
          items:
            $ref: '#/components/schemas/org-schedule-status'
        valid_until:
          $ref: '#/components/schemas/date-filter'
      title: org-schedules-list-request
    org-schedules-list-response:
      type: object
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        org_schedules:
          type: array
          description: The list of organization schedules.
          items:
            $ref: '#/components/schemas/org-schedule'
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
      required:
        - org_schedules
      title: org-schedules-list-response
      x-go-name: OrgSchedulesListResponseBody
    org-schedules-set-future-request:
      type: object
      properties:
        id:
          type: string
          description: Organization schedule ID.
          format: id
        org_schedule_fragment_id:
          type: string
          description: Organization schedule Fragment ID.
          format: id
      required:
        - id
        - org_schedule_fragment_id
      title: org-schedules-set-future-request
    org-schedules-set-future-response:
      type: object
      properties:
        org_schedule:
          $ref: '#/components/schemas/org-schedule'
      required:
        - org_schedule
      title: org-schedules-set-future-response
      x-go-name: OrgSchedulesSetFutureResponseBody
    org-schedules-transition-request:
      type: object
      properties:
        id:
          type: string
          description: Organization schedule ID.
          format: id
        status:
          $ref: '#/components/schemas/org-schedule-status'
      required:
        - id
        - status
      title: org-schedules-transition-request
    org-schedules-transition-response:
      type: object
      properties:
        org_schedule:
          $ref: '#/components/schemas/org-schedule'
      required:
        - org_schedule
      title: org-schedules-transition-response
      x-go-name: OrgSchedulesTransitionResponseBody
    org-schedules-update-request:
      type: object
      properties:
        default_weekly_org_schedule:
          $ref: '#/components/schemas/set-weekly-org-schedule'
        id:
          type: string
          description: Organization schedule ID.
          format: id
        min_valid_days:
          type: integer
          description: |
            Organization schedule must be valid for at least this many days in
            the future. Meaning organization schedule fragments must cover this
            period. 0 if omitted.
          format: int64
        name:
          type: string
          description: Human-readable name.
          format: text
        org_schedule_fragments:
          type: array
          description: |
            List of organization schedule fragments with no overlaps or gaps.
          items:
            $ref: '#/components/schemas/set-org-schedule-fragment-summary'
        timezone:
          type: string
          description: |
            Timezone in which the organization schedule applies. Expected to be
            a valid IANA time zone name such as America/New_York.
          format: text
        weekly_org_schedules:
          type: array
          description: |
            If this day belongs to a named period according to the currently
            active organization schedule fragment, a weekly organization
            schedule from this list with the corresponding name will apply.
          items:
            $ref: '#/components/schemas/set-weekly-org-schedule'
      required:
        - id
      title: org-schedules-update-request
    org-schedules-update-response:
      type: object
      properties:
        org_schedule:
          $ref: '#/components/schemas/org-schedule'
      required:
        - org_schedule
      title: org-schedules-update-response
      x-go-name: OrgSchedulesUpdateResponseBody
    org-summary:
      type: object
      discriminator:
        mapping:
          rev_org: '#/components/schemas/rev-org-summary'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/rev-org-summary'
      properties:
        type:
          $ref: '#/components/schemas/org-type'
      required:
        - type
      title: org-summary
    org-type:
      type: string
      enum:
        - rev_org
    parent-part-filter:
      type: object
      description: The filter for specifying parent part.
      properties:
        level:
          type: integer
          description: Number of levels to fetch the part hierarchy up to.
          format: int32
          minimum: 1
        parts:
          type: array
          description: Part IDs to fetch the hierarchy for.
          example:
            - PROD-12345
          items:
            type: string
            format: id
          minItems: 1
      required:
        - parts
      title: parent-part-filter
    part:
      type: object
      discriminator:
        mapping:
          capability: '#/components/schemas/capability'
          enhancement: '#/components/schemas/enhancement'
          feature: '#/components/schemas/feature'
          product: '#/components/schemas/product'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/capability'
        - $ref: '#/components/schemas/enhancement'
        - $ref: '#/components/schemas/feature'
        - $ref: '#/components/schemas/product'
      properties:
        type:
          $ref: '#/components/schemas/part-type'
      required:
        - type
      title: part
    part-base:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            artifacts:
              type: array
              description: The attached artifacts.
              items:
                $ref: '#/components/schemas/artifact-summary'
            description:
              type: string
              description: Description of the part.
              format: text
            name:
              type: string
              description: Name of the part.
              format: text
            owned_by:
              type: array
              description: The users that own the part.
              items:
                $ref: '#/components/schemas/user-summary'
            tags:
              type: array
              description: Tags associated with the object.
              items:
                $ref: '#/components/schemas/tag-with-value'
          required:
            - name
            - owned_by
      title: part-base
    part-base-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            name:
              type: string
              description: Name of the part.
              format: text
            owned_by:
              type: array
              description: The users that own the part.
              items:
                $ref: '#/components/schemas/user-summary'
          required:
            - name
            - owned_by
      title: part-base-summary
    part-summary:
      type: object
      discriminator:
        mapping:
          capability: '#/components/schemas/capability-summary'
          enhancement: '#/components/schemas/enhancement-summary'
          feature: '#/components/schemas/feature-summary'
          product: '#/components/schemas/product-summary'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/capability-summary'
        - $ref: '#/components/schemas/enhancement-summary'
        - $ref: '#/components/schemas/feature-summary'
        - $ref: '#/components/schemas/product-summary'
      properties:
        type:
          $ref: '#/components/schemas/part-type'
      required:
        - type
      title: part-summary
    part-type:
      type: string
      enum:
        - capability
        - enhancement
        - feature
        - product
    parts-create-request:
      type: object
      discriminator:
        mapping:
          capability: '#/components/schemas/parts-create-request-capability'
          enhancement: '#/components/schemas/parts-create-request-enhancement'
          feature: '#/components/schemas/parts-create-request-feature'
          product: '#/components/schemas/parts-create-request-product'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/parts-create-request-capability'
        - $ref: '#/components/schemas/parts-create-request-enhancement'
        - $ref: '#/components/schemas/parts-create-request-feature'
        - $ref: '#/components/schemas/parts-create-request-product'
      properties:
        type:
          $ref: '#/components/schemas/part-type'
        artifacts:
          type: array
          description: The IDs of the artifacts.
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
        description:
          type: string
          description: Description of the part.
          format: text
        name:
          type: string
          description: Name of the part.
          format: text
        owned_by:
          type: array
          description: The users that own the part.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        tags:
          type: array
          description: Tags associated with the part.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
      required:
        - name
        - owned_by
        - type
      title: parts-create-request
    parts-create-request-capability:
      type: object
      properties:
        parent_part:
          type: array
          description: ID of the parent product for the capability.
          example:
            - PROD-12345
          items:
            type: string
            format: id
          maxItems: 1
      required:
        - parent_part
      title: parts-create-request-capability
    parts-create-request-enhancement:
      type: object
      properties:
        parent_part:
          type: array
          description: |
            ID of the parent part on which the enhancement is to be created.
          example:
            - PROD-12345
          items:
            type: string
            format: id
          maxItems: 1
        target_close_date:
          type: string
          description: |
            Target close date by which enhancement is expected to be closed.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        target_start_date:
          type: string
          description: |
            Target start date by which enhancement is expected to be started.
            Example Date Format: 2000-11-01T01:01:01Z
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
      required:
        - parent_part
      title: parts-create-request-enhancement
    parts-create-request-feature:
      type: object
      properties:
        parent_part:
          type: array
          description: ID of the parent capability/feature for the feature.
          example:
            - PROD-12345
          items:
            type: string
            format: id
          maxItems: 1
      required:
        - parent_part
      title: parts-create-request-feature
    parts-create-request-product:
      type: object
      additionalProperties: false
      title: parts-create-request-product
    parts-create-response:
      type: object
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
        - part
      title: parts-create-response
      x-go-name: PartsCreateResponseBody
    parts-delete-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the part to delete.
          example: PROD-12345
          format: id
      required:
        - id
      title: parts-delete-request
    parts-delete-response:
      type: object
      additionalProperties: false
      title: parts-delete-response
      x-go-name: PartsDeleteResponseBody
    parts-get-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the part to retrieve.
          example: PROD-12345
          format: id
      required:
        - id
      title: parts-get-request
    parts-get-response:
      type: object
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
        - part
      title: parts-get-response
      x-go-name: PartsGetResponseBody
    parts-list-request:
      type: object
      properties:
        type:
          type: array
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
        created_by:
          type: array
          description: Filters for parts created by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        limit:
          type: integer
          description: |
            The maximum number of parts to return. The default is '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_by:
          type: array
          description: Filters for parts modified by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        name:
          type: array
          description: Filters for parts of the provided name(s).
          items:
            type: string
            format: text
        owned_by:
          type: array
          description: Filters for parts owned by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        parent_part:
          $ref: '#/components/schemas/parent-part-filter'
        sort_by:
          type: array
          description: |
            Fields to sort the parts by and the direction to sort them.
          items:
            type: string
            format: sort-by
        tags:
          type: array
          description: Filters for part with any of the provided tags.
          example:
            - TAG-12345
          items:
            type: string
            format: id
      title: parts-list-request
    parts-list-response:
      type: object
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        parts:
          type: array
          description: The list of parts.
          items:
            $ref: '#/components/schemas/part'
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
      required:
        - parts
      title: parts-list-response
      x-go-name: PartsListResponseBody
    parts-update-request:
      type: object
      discriminator:
        mapping:
          capability: '#/components/schemas/parts-update-request-capability'
          enhancement: '#/components/schemas/parts-update-request-enhancement'
          feature: '#/components/schemas/parts-update-request-feature'
          none: '#/components/schemas/empty'
          product: '#/components/schemas/parts-update-request-product'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/empty'
        - $ref: '#/components/schemas/parts-update-request-capability'
        - $ref: '#/components/schemas/parts-update-request-enhancement'
        - $ref: '#/components/schemas/parts-update-request-feature'
        - $ref: '#/components/schemas/parts-update-request-product'
      properties:
        type:
          $ref: '#/components/schemas/part-type'
        artifacts:
          $ref: '#/components/schemas/parts-update-request-artifacts'
        description:
          type: string
          description: The updated description of the part.
          format: text
        id:
          type: string
          description: The ID of the part to update.
          example: PROD-12345
          format: id
        name:
          type: string
          description: The updated name of the part.
          format: text
        owned_by:
          $ref: '#/components/schemas/parts-update-request-owned-by'
        tags:
          $ref: '#/components/schemas/parts-update-request-tags'
      required:
        - id
      title: parts-update-request
    parts-update-request-artifacts:
      type: object
      properties:
        set:
          type: array
          description: Sets the artifacts to the provided IDs.
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
      title: parts-update-request-artifacts
    parts-update-request-capability:
      type: object
      additionalProperties: false
      title: parts-update-request-capability
    parts-update-request-enhancement:
      type: object
      properties:
        target_close_date:
          type: string
          description: Updates the target close date of the enhancement.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          nullable: true
        target_start_date:
          type: string
          description: |
            Updates the target start date of the enhancement. Example Date
            Format: 2000-11-01T01:01:01Z
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          nullable: true
      title: parts-update-request-enhancement
    parts-update-request-feature:
      type: object
      additionalProperties: false
      title: parts-update-request-feature
    parts-update-request-owned-by:
      type: object
      properties:
        set:
          type: array
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
      title: parts-update-request-owned-by
    parts-update-request-product:
      type: object
      additionalProperties: false
      title: parts-update-request-product
    parts-update-request-tags:
      type: object
      properties:
        set:
          type: array
          description: Sets the tags to the provided tags.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
      title: parts-update-request-tags
    parts-update-response:
      type: object
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
        - part
      title: parts-update-response
      x-go-name: PartsUpdateResponseBody
    parts-vista-group-item:
      allOf:
        - $ref: '#/components/schemas/vista-group-base'
        - type: object
          discriminator:
            propertyName: type
          properties:
            type:
              $ref: '#/components/schemas/parts-vista-group-item-type'
          required:
            - type
      description: Represents a nested parts vista group object.
      title: parts-vista-group-item
    parts-vista-group-item-type:
      type: string
      description: Type of parts vista group item.
      enum:
        - curated
        - dynamic
    product:
      allOf:
        - $ref: '#/components/schemas/part-base'
      title: product
    product-summary:
      allOf:
        - $ref: '#/components/schemas/part-base-summary'
      title: product-summary
    question-answer:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            answer:
              type: string
              description: The Answer.
              format: text
            applies_to_parts:
              type: array
              description: Details of the parts relevant to the question_answer.
              items:
                $ref: '#/components/schemas/part-summary'
            question:
              type: string
              description: The Question.
              format: text
            sources:
              type: array
              description: |
                Details of the sources from which the question answer was
                generated.
              items:
                $ref: '#/components/schemas/atom-summary'
            status:
              $ref: '#/components/schemas/question-answer-status'
            suggested_answer:
              type: string
              description: |
                An alternative answer suggested by the Q/A generation algorithm.
              format: text
            suggested_for_deletion:
              type: boolean
              description: |
                Whether the Q/A was marked for deletion by the Q/A generation
                algorithm.
            topic:
              type: string
              description: The topic to which the QA belongs.
              format: text
            verified:
              type: boolean
              description: Whether the Q/A was verified.
      title: question-answer
    question-answer-status:
      type: string
      description: Status of the question answer.
      enum:
        - archived
        - discarded
        - draft
        - published
        - review_needed
    reactions-list-request:
      type: object
      properties:
        cursor:
          type: string
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          format: text
        emoji:
          type: string
          description: |
            The emoji to list the reactors for. This can be the short name of
            the emoji (e.g. "joy"), or the code point (e.g. "1f602").
          format: text
        limit:
          type: integer
          description: The maximum number of reactors to return.
          format: int32
        object:
          type: string
          description: The ID of the object to list reactors for.
          example: don:core:dvrv-us-1:devo/example:ticket/123:comment/comment-id
          format: id
      required:
        - emoji
        - object
      title: reactions-list-request
    reactions-list-response:
      type: object
      properties:
        next_cursor:
          type: string
          description: |
            The cursor that should be used to iterate the next sequence of
            results, otherwise if not set, then no elements exist after.
          format: text
        reactors:
          type: array
          description: The users that have reacted.
          items:
            $ref: '#/components/schemas/user-summary'
      required:
        - reactors
      title: reactions-list-response
      x-go-name: ReactionsListResponseBody
    reactions-update-request:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/reactions-update-request-action'
        emoji:
          type: string
          description: |
            The emoji for the reaction. This can be the short name of the emoji
            (e.g. "joy"), or the code point (e.g. "1f602").
          format: text
        object:
          type: string
          description: The object to update the reaction for.
          example: don:core:dvrv-us-1:devo/example:ticket/123:comment/comment-id
          format: id
      required:
        - action
        - emoji
        - object
      title: reactions-update-request
    reactions-update-request-action:
      type: string
      enum:
        - add
        - remove
    reactions-update-response:
      type: object
      additionalProperties: false
      title: reactions-update-response
      x-go-name: ReactionsUpdateResponseBody
    remove-tag-with-value:
      type: object
      properties:
        id:
          type: string
          description: The ID of the tag.
          example: TAG-12345
          format: id
      required:
        - id
      title: remove-tag-with-value
    removed-sla-metric-history:
      type: object
      additionalProperties: false
      description: Information about removed metrics.
      title: removed-sla-metric-history
    resource:
      type: object
      description: Resource details.
      properties:
        artifacts:
          type: array
          description: |
            Artifacts of the resource (relevant only for type artifact).
          items:
            $ref: '#/components/schemas/artifact-summary'
        url:
          type: string
          description: URL of the resource (relevant only for type url).
          format: text
      title: resource
    resource-summary:
      type: object
      description: Resource details.
      properties:
        artifacts:
          type: array
          description: |
            Artifacts of the resource (relevant only for type artifact).
          items:
            $ref: '#/components/schemas/artifact-summary'
        url:
          type: string
          description: URL of the resource (relevant only for type url).
          format: text
      title: resource-summary
    rev-org:
      allOf:
        - $ref: '#/components/schemas/org-base'
        - type: object
          properties:
            description:
              type: string
              description: Description of the Rev organization.
              format: text
            domain:
              type: string
              deprecated: true
              description: Company's domain name. Example - 'devrev.ai'.
              format: text
            external_ref:
              type: string
              description: |
                External ref is a unique identifier for the Rev (customer)
                organization from your primary customer system of records. If none
                is specified, a system-generated identifier will be assigned to the
                organization.
              format: text
            primary_rev_org:
              $ref: '#/components/schemas/org-summary'
      title: rev-org
    rev-org-summary:
      allOf:
        - $ref: '#/components/schemas/org-base-summary'
      title: rev-org-summary
    rev-orgs-create-request:
      type: object
      description: |
        Request object to create a new Rev organization in the Dev
        organization.
      properties:
        account:
          type: string
          description: Account Id to associate with this Rev organization.
          example: ACC-12345
          format: id
        description:
          type: string
          description: Description of the Rev organization.
          format: text
        display_name:
          type: string
          description: Name of the Rev organization.
          format: text
        domain:
          type: string
          deprecated: true
          description: Company's domain name. Example - 'devrev.ai'.
          format: text
        environment:
          $ref: '#/components/schemas/org-environment'
        external_ref:
          type: string
          description: |
            External ref is a custom unique identifier which is a reference to
            an unique id for this organization's data in some system of
            records.
          format: text
        tier:
          type: string
          description: The tier of the RevOrg.
          format: text
      required:
        - account
        - display_name
      title: rev-orgs-create-request
    rev-orgs-create-response:
      type: object
      description: |
        Response object for request to create a new Rev organization.
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
        - rev_org
      title: rev-orgs-create-response
      x-go-name: RevOrgsCreateResponseBody
    rev-orgs-delete-request:
      type: object
      description: Request object to delete a Rev organization.
      properties:
        id:
          type: string
          description: The ID of Rev organization to delete.
          example: REV-AbCdEfGh
          format: id
      required:
        - id
      title: rev-orgs-delete-request
    rev-orgs-delete-response:
      type: object
      additionalProperties: false
      description: The response to deleting a Rev organization.
      title: rev-orgs-delete-response
      x-go-name: RevOrgsDeleteResponseBody
    rev-orgs-get-request:
      type: object
      description: Request object to get Rev organization's information.
      properties:
        account:
          type: string
          description: |
            The ID of account for which default Rev organization is to be
            fetched.
          example: ACC-12345
          format: id
        id:
          type: string
          description: The ID of the required Rev organization.
          example: REV-AbCdEfGh
          format: id
      title: rev-orgs-get-request
    rev-orgs-get-response:
      type: object
      description: The response to getting a Rev organization's information.
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
        - rev_org
      title: rev-orgs-get-response
      x-go-name: RevOrgsGetResponseBody
    rev-orgs-list-request:
      type: object
      description: |
        A request to get the list of Rev organizations for the authenticated
        user's Dev organization.
      properties:
        created_by:
          type: array
          description: Filters by creator.
          items:
            type: string
            format: id
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        display_name:
          type: array
          description: Array of display names of Rev orgs to be filtered.
          items:
            type: string
            format: text
        external_ref:
          type: array
          description: List of external refs to filter Rev organizations for.
          items:
            type: string
            format: text
        limit:
          type: integer
          description: |
            The maximum number of Rev organizations to be retrieved per page.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        sort_by:
          type: array
          description: |
            Fields to sort the Rev organizations by and the direction to sort
            them.
          items:
            type: string
            format: sort-by
      title: rev-orgs-list-request
    rev-orgs-list-response:
      type: object
      description: |
        The response to getting a list of Rev organizations' information.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        rev_orgs:
          type: array
          description: List with all of the Rev organizations' information.
          items:
            $ref: '#/components/schemas/rev-org'
      required:
        - rev_orgs
      title: rev-orgs-list-response
      x-go-name: RevOrgsListResponseBody
    rev-orgs-update-request:
      type: object
      description: |
        Request object to update information of the Rev organization.
      properties:
        description:
          type: string
          description: Description of the Rev organization.
          format: text
        display_name:
          type: string
          description: Customer chosen name for the Rev organization.
          format: text
        domain:
          type: string
          deprecated: true
          description: Company's domain name. Example - 'devrev.ai'.
          format: text
        environment:
          $ref: '#/components/schemas/org-environment'
        external_ref:
          type: string
          description: |
            External ref is a custom unique identifier which is a reference to
            an unique id for this organization's data in some system of
            records.
          format: text
        id:
          type: string
          description: The ID of Rev organization to update.
          example: REV-AbCdEfGh
          format: id
        tier:
          type: string
          description: The tier of the RevOrg.
          format: text
      required:
        - id
      title: rev-orgs-update-request
    rev-orgs-update-response:
      type: object
      description: Response object to updating Rev organization's information.
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
        - rev_org
      title: rev-orgs-update-response
      x-go-name: RevOrgsUpdateResponseBody
    rev-user:
      allOf:
        - $ref: '#/components/schemas/user-base'
        - type: object
          properties:
            description:
              type: string
              description: Description of the Rev user.
              format: text
            external_ref:
              type: string
              description: |
                External ref is a mutable unique identifier for a user within the
                Rev organization from your primary customer record. If none is
                available, a good alternative is the email address/phone number
                which could uniquely identify the user. If none is specified, a
                system-generated identifier will be assigned to the user.
              format: text
            rev_org:
              $ref: '#/components/schemas/org-summary'
      title: rev-user
    rev-user-summary:
      allOf:
        - $ref: '#/components/schemas/user-base-summary'
        - type: object
          properties:
            external_ref:
              type: string
              description: |
                External ref is a mutable unique identifier for a user within the
                Rev organization from your primary customer record. If none is
                available, a good alternative is the email address/phone number
                which could uniquely identify the user. If none is specified, a
                system-generated identifier will be assigned to the user.
              format: text
            rev_org:
              $ref: '#/components/schemas/org-summary'
      title: rev-user-summary
    rev-users-create-request:
      type: object
      description: |
        Request object to create a new Rev user for a Rev organization.
      properties:
        custom_schema_fragments:
          type: array
          deprecated: true
          description: The schema fragment IDs associated with the Rev user.
          example:
            - don:core:dvrv-us-1:devo/example:custom_type_fragment/custom-type-fragment-id
          items:
            type: string
            format: id
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        description:
          type: string
          description: Description of the Rev user.
          format: text
        display_name:
          type: string
          description: |
            The user's display name. The name is non-unique and mutable.
          format: text
        display_picture:
          type: string
          description: Artifact ID of a Rev user's display picture.
          example: ARTIFACT-12345
          format: id
        email:
          type: string
          description: Email address of the Rev user.
          format: text
        external_ref:
          type: string
          description: |
            External ref is a mutable unique identifier for a user within the
            Dev organization from your primary customer record. If none is
            available, a good alternative is the email address/phone number
            which could uniquely identify the user. If none is specified, a
            system-generated identifier will be assigned to the user.
          format: text
        phone_numbers:
          type: array
          description: Phone numbers, in E.164 format, of the Rev user.
          items:
            type: string
            format: text
        rev_org:
          type: string
          description: |
            The ID of the Rev organization to which the created Rev user is
            associated.
          example: REV-AbCdEfGh
          format: id
      title: rev-users-create-request
    rev-users-create-response:
      type: object
      description: |
        Response object for creating a new Rev user for Rev organization.
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
        - rev_user
      title: rev-users-create-response
      x-go-name: RevUsersCreateResponseBody
    rev-users-delete-request:
      type: object
      description: Request object to delete a Rev user.
      properties:
        id:
          type: string
          description: The ID of Rev user to delete.
          format: id
      required:
        - id
      title: rev-users-delete-request
    rev-users-delete-response:
      type: object
      additionalProperties: false
      description: The response to deleting a Rev user of a Rev organization.
      title: rev-users-delete-response
      x-go-name: RevUsersDeleteResponseBody
    rev-users-get-request:
      type: object
      description: Request object to get a Rev user.
      properties:
        id:
          type: string
          description: The ID of Rev user to be retrieved.
          format: id
      required:
        - id
      title: rev-users-get-request
    rev-users-get-response:
      type: object
      description: The returned Rev user.
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
        - rev_user
      title: rev-users-get-response
      x-go-name: RevUsersGetResponseBody
    rev-users-list-request:
      type: object
      description: |
        Gets the list of Rev users belonging to the authenticated user's Dev
        organization which the user is also authorized to access.
      properties:
        associations:
          type: array
          description: |
            Filters for Rev users with specified associations
            (account/workspace).
          items:
            type: string
            format: id
        created_by:
          type: array
          description: |
            Filters for Rev users that were created by the specified user(s).
          items:
            type: string
            format: id
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        email:
          type: array
          description: List of emails of Rev users to be filtered.
          items:
            type: string
            format: text
        external_ref:
          type: array
          description: List of external refs to filter Rev users for.
          items:
            type: string
            format: text
        is_verified:
          type: boolean
          description: Value of is_verified field to filter the Rev users.
        limit:
          type: integer
          description: |
            The maximum number of Rev users to return. The default is '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        phone_numbers:
          type: array
          description: |
            List of phone numbers, in E.164 format, to filter Rev users on.
          items:
            type: string
            format: text
        rev_org:
          type: array
          description: List of IDs of Rev organizations to be filtered.
          example:
            - REV-AbCdEfGh
          items:
            type: string
            format: id
        sort_by:
          type: array
          description: |
            Fields to sort the Rev users by and the direction to sort them.
          items:
            type: string
            format: sort-by
      title: rev-users-list-request
    rev-users-list-response:
      type: object
      description: |
        The response to listing all Rev users matching the filter criteria.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        rev_users:
          type: array
          description: List containing all the Rev users.
          items:
            $ref: '#/components/schemas/rev-user'
      required:
        - rev_users
      title: rev-users-list-response
      x-go-name: RevUsersListResponseBody
    rev-users-merge-request:
      type: object
      description: Request to merge two Rev users, retaining the primary user.
      properties:
        primary_user:
          type: string
          description: The ID of the primary Rev user, which will be retained.
          format: id
        secondary_user:
          type: string
          description: |
            The ID of the secondary Rev user, which will be merged into the
            Primary Rev user.
          format: id
      required:
        - primary_user
        - secondary_user
      title: rev-users-merge-request
    rev-users-merge-response:
      type: object
      additionalProperties: false
      description: |
        Acknowledgment response indicating that the merge request has been
        received for processing asynchronously.
      title: rev-users-merge-response
      x-go-name: RevUsersMergeResponseBody
    rev-users-scan-request:
      type: object
      description: Scans the list of Rev users.
      properties:
        associations:
          type: array
          description: |
            Filters for Rev users with specified associations
            (account/workspace).
          items:
            type: string
            format: id
        created_by:
          type: array
          description: |
            Filters for Rev users that were created by the specified user(s).
          items:
            type: string
            format: id
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          type: string
          description: |
            The cursor to resume iteration, otherwise the beginning if not
            provided.
          format: text
        email:
          type: array
          description: List of emails of Rev users to be filtered.
          items:
            type: string
            format: text
        external_ref:
          type: array
          description: List of external refs to filter Rev users for.
          items:
            type: string
            format: text
        is_verified:
          type: boolean
          description: Value of is_verified field to filter the Rev users.
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        phone_numbers:
          type: array
          description: |
            List of phone numbers, in E.164 format, to filter Rev users on.
          items:
            type: string
            format: text
        rev_org:
          type: array
          description: List of IDs of Rev organizations to be filtered.
          example:
            - REV-AbCdEfGh
          items:
            type: string
            format: id
      title: rev-users-scan-request
    rev-users-scan-response:
      type: object
      description: The response to scanning Rev users.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          format: text
        rev_users:
          type: array
          description: The iterated Rev users.
          items:
            $ref: '#/components/schemas/rev-user'
      required:
        - rev_users
      title: rev-users-scan-response
      x-go-name: RevUsersScanResponseBody
    rev-users-update-request:
      type: object
      description: Request to update details of a Rev user.
      properties:
        custom_fields:
          type: object
          description: Application-defined custom fields.
        custom_schema_fragments:
          $ref: '#/components/schemas/rev-users-update-request-custom-schema-fragments'
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        description:
          type: string
          description: Updated description of the Rev user.
          format: text
        display_name:
          type: string
          description: Updated display name of the Rev user.
          format: text
        display_picture:
          type: string
          description: Artifact ID of a Rev user's updated display picture.
          example: ARTIFACT-12345
          format: id
          nullable: true
        email:
          type: string
          description: Updated email address of the Rev user.
          format: text
        external_ref:
          type: string
          description: Updated external ref value of the Rev user.
          format: text
        id:
          type: string
          description: The ID of Rev user to update.
          format: id
        phone_numbers:
          type: array
          description: The phone numbers, in E.164 format, of the Rev user.
          items:
            type: string
            format: text
      required:
        - id
      title: rev-users-update-request
    rev-users-update-request-custom-schema-fragments:
      type: object
      properties:
        set:
          type: array
          description: Sets the IDs to the provided schema fragment IDs.
          example:
            - don:core:dvrv-us-1:devo/example:custom_type_fragment/custom-type-fragment-id
          items:
            type: string
            format: id
      title: rev-users-update-request-custom-schema-fragments
    rev-users-update-response:
      type: object
      description: Updated Rev user object.
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
        - rev_user
      title: rev-users-update-response
      x-go-name: RevUsersUpdateResponseBody
    role-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
      title: role-summary
    saml-connection-fields-map:
      type: object
      properties:
        email:
          type: string
          description: |
            Claims in the SAML assertion returned by the identity provider that
            map to the email address of the user.
          format: text
        user_id:
          type: string
          description: |
            Claims in the SAML assertion returned by the identity provider that
            map to the user ID of the user.
          format: text
      title: saml-connection-fields-map
    schema-bool-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              type: boolean
              description: Default value.
      title: schema-bool-field-descriptor
    schema-bool-list-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              type: array
              description: Default value.
              items:
                type: boolean
      title: schema-bool-list-field-descriptor
    schema-composite-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            composite_type:
              type: string
              description: Composite type. Required when field type is composite.
              format: text
      title: schema-composite-field-descriptor
    schema-composite-list-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            composite_type:
              type: string
              description: Composite type. Required when field type is composite.
              format: text
      title: schema-composite-list-field-descriptor
    schema-date-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              type: string
              description: Default value.
              format: text
      title: schema-date-field-descriptor
    schema-date-list-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              type: array
              description: Default value.
              items:
                type: string
                format: text
      title: schema-date-list-field-descriptor
    schema-double-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              type: number
              description: Default value.
              format: double
      title: schema-double-field-descriptor
    schema-double-list-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              type: array
              description: Default value.
              items:
                type: number
                format: double
      title: schema-double-list-field-descriptor
    schema-enum-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            allowed_values:
              type: array
              description: Allowed values for the field.
              items:
                type: string
                format: text
            default_value:
              type: string
              description: Default value.
              format: text
            is_overridable:
              type: boolean
              description: Whether the enum is overridable.
            translated_values:
              type: object
              additionalProperties:
                type: string
                format: text
              description: Translations for allowed_values field.
          required:
            - allowed_values
      title: schema-enum-field-descriptor
    schema-enum-list-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            allowed_values:
              type: array
              description: Allowed values for the field.
              items:
                type: string
                format: text
            default_value:
              type: array
              description: Default value.
              items:
                type: string
                format: text
            is_overridable:
              type: boolean
              description: Whether the enum is overridable.
            translated_values:
              type: object
              additionalProperties:
                type: string
                format: text
              description: Translations for allowed_values field.
          required:
            - allowed_values
      title: schema-enum-list-field-descriptor
    schema-field-descriptor:
      type: object
      description: Set of field attributes.
      discriminator:
        mapping:
          array: '#/components/schemas/schema-field-descriptor-array-type'
          bool: '#/components/schemas/schema-bool-field-descriptor'
          composite: '#/components/schemas/schema-composite-field-descriptor'
          date: '#/components/schemas/schema-date-field-descriptor'
          double: '#/components/schemas/schema-double-field-descriptor'
          enum: '#/components/schemas/schema-enum-field-descriptor'
          id: '#/components/schemas/schema-id-field-descriptor'
          int: '#/components/schemas/schema-int-field-descriptor'
          json_value: '#/components/schemas/schema-json-value-field-descriptor'
          rich_text: '#/components/schemas/schema-rich-text-field-descriptor'
          struct: '#/components/schemas/schema-struct-field-descriptor'
          text: '#/components/schemas/schema-text-field-descriptor'
          timestamp: '#/components/schemas/schema-timestamp-field-descriptor'
          tokens: '#/components/schemas/schema-tokens-field-descriptor'
          uenum: '#/components/schemas/schema-uenum-field-descriptor'
          unknown: '#/components/schemas/schema-unknown-field-descriptor'
        propertyName: field_type
      oneOf:
        - $ref: '#/components/schemas/schema-bool-field-descriptor'
        - $ref: '#/components/schemas/schema-composite-field-descriptor'
        - $ref: '#/components/schemas/schema-date-field-descriptor'
        - $ref: '#/components/schemas/schema-double-field-descriptor'
        - $ref: '#/components/schemas/schema-enum-field-descriptor'
        - $ref: '#/components/schemas/schema-field-descriptor-array-type'
        - $ref: '#/components/schemas/schema-id-field-descriptor'
        - $ref: '#/components/schemas/schema-int-field-descriptor'
        - $ref: '#/components/schemas/schema-json-value-field-descriptor'
        - $ref: '#/components/schemas/schema-rich-text-field-descriptor'
        - $ref: '#/components/schemas/schema-struct-field-descriptor'
        - $ref: '#/components/schemas/schema-text-field-descriptor'
        - $ref: '#/components/schemas/schema-timestamp-field-descriptor'
        - $ref: '#/components/schemas/schema-tokens-field-descriptor'
        - $ref: '#/components/schemas/schema-uenum-field-descriptor'
        - $ref: '#/components/schemas/schema-unknown-field-descriptor'
      properties:
        field_type:
          $ref: '#/components/schemas/schema-field-descriptor-field-type'
      required:
        - field_type
      title: schema-field-descriptor
    schema-field-descriptor-array-type:
      type: object
      discriminator:
        mapping:
          bool: '#/components/schemas/schema-bool-list-field-descriptor'
          composite: '#/components/schemas/schema-composite-list-field-descriptor'
          date: '#/components/schemas/schema-date-list-field-descriptor'
          double: '#/components/schemas/schema-double-list-field-descriptor'
          enum: '#/components/schemas/schema-enum-list-field-descriptor'
          id: '#/components/schemas/schema-id-list-field-descriptor'
          int: '#/components/schemas/schema-int-list-field-descriptor'
          json_value: '#/components/schemas/schema-json-value-list-field-descriptor'
          rich_text: '#/components/schemas/schema-rich-text-list-field-descriptor'
          struct: '#/components/schemas/schema-struct-list-field-descriptor'
          text: '#/components/schemas/schema-text-list-field-descriptor'
          timestamp: '#/components/schemas/schema-timestamp-list-field-descriptor'
          tokens: '#/components/schemas/schema-tokens-list-field-descriptor'
          uenum: '#/components/schemas/schema-uenum-list-field-descriptor'
        propertyName: base_type
      oneOf:
        - $ref: '#/components/schemas/schema-bool-list-field-descriptor'
        - $ref: '#/components/schemas/schema-composite-list-field-descriptor'
        - $ref: '#/components/schemas/schema-date-list-field-descriptor'
        - $ref: '#/components/schemas/schema-double-list-field-descriptor'
        - $ref: '#/components/schemas/schema-enum-list-field-descriptor'
        - $ref: '#/components/schemas/schema-id-list-field-descriptor'
        - $ref: '#/components/schemas/schema-int-list-field-descriptor'
        - $ref: '#/components/schemas/schema-json-value-list-field-descriptor'
        - $ref: '#/components/schemas/schema-rich-text-list-field-descriptor'
        - $ref: '#/components/schemas/schema-struct-list-field-descriptor'
        - $ref: '#/components/schemas/schema-text-list-field-descriptor'
        - $ref: '#/components/schemas/schema-timestamp-list-field-descriptor'
        - $ref: '#/components/schemas/schema-tokens-list-field-descriptor'
        - $ref: '#/components/schemas/schema-uenum-list-field-descriptor'
      properties:
        base_type:
          $ref: '#/components/schemas/schema-field-descriptor-array-type-base-type'
        eq_items:
          type: integer
          description: The exact array length.
          format: int64
        max_items:
          type: integer
          description: The maximum array length.
          format: int64
        min_items:
          type: integer
          description: The minimum array length.
          format: int64
      required:
        - base_type
      title: schema-field-descriptor-array-type
    schema-field-descriptor-array-type-base-type:
      type: string
      enum:
        - bool
        - composite
        - date
        - double
        - enum
        - id
        - int
        - json_value
        - rich_text
        - struct
        - text
        - timestamp
        - tokens
        - uenum
    schema-field-descriptor-base:
      type: object
      properties:
        description:
          type: string
          description: Description of the field.
          format: text
        is_filterable:
          type: boolean
          description: |
            Whether this field is filterable, groupable and sortable.
        is_immutable:
          type: boolean
          description: Whether this field is immutable or not.
        is_pii:
          type: boolean
          description: |
            Whether this field can hold Personally Identifiable Information
            (PII).
        is_required:
          type: boolean
          description: Whether this field is required or not.
        mfz:
          $ref: '#/components/schemas/schema-field-mfz-metadata'
        name:
          type: string
          description: Name of the field.
          format: text
        oasis:
          $ref: '#/components/schemas/schema-field-oasis-metadata'
        origin:
          type: string
          description: Type this field is from.
          format: text
        ui:
          $ref: '#/components/schemas/schema-field-ui-metadata'
      required:
        - name
      title: schema-field-descriptor-base
    schema-field-descriptor-field-type:
      type: string
      enum:
        - array
        - bool
        - composite
        - date
        - double
        - enum
        - id
        - int
        - json_value
        - rich_text
        - struct
        - text
        - timestamp
        - tokens
        - uenum
        - unknown
    schema-field-mfz-metadata:
      type: object
      additionalProperties: false
      description: The schema of MFZ specific fields.
      title: schema-field-mfz-metadata
    schema-field-oasis-metadata:
      type: object
      additionalProperties: false
      description: The schema of oasis specific fields.
      title: schema-field-oasis-metadata
    schema-field-uenum-value:
      type: object
      description: A unified enum value.
      properties:
        id:
          type: integer
          description: The immutable id of the enum value.
          format: int64
        is_deprecated:
          type: boolean
          description: True if this value is deprecated.
        label:
          type: string
          description: The human readable name of the enum value.
          format: text
        ordinal:
          type: integer
          description: The order value of the enum.
          format: int64
        tooltip:
          type: string
          description: Tooltip shown in the UI for this value.
          format: text
      required:
        - id
        - label
        - ordinal
      title: schema-field-uenum-value
    schema-field-ui-metadata:
      type: object
      description: The schema of ui specific fields.
      properties:
        client_overrides:
          type: array
          description: The client overrides for the field.
          items:
            $ref: '#/components/schemas/client-override'
        decimal_places:
          type: integer
          description: |
            Number of decimal places to show (only applicable for number
            fields).
          format: int32
        display_name:
          type: string
          description: The display name of the field.
          format: text
        group_name:
          type: string
          description: An optional group name for the field.
          format: text
        is_groupable:
          type: boolean
          description: Whether the field is groupable in the UI.
        is_hidden:
          type: boolean
          description: Whether the field is hidden in the UI.
        is_sortable:
          type: boolean
          description: Whether the field is sortable in the UI.
        order:
          type: integer
          description: Order in which field is shown.
          format: int32
        placeholder:
          type: string
          description: A placeholder for the field.
          format: text
        tooltip:
          type: string
          description: Tooltip for the field.
          format: text
        unit:
          type: string
          description: Unit of measurment.
          format: text
        use_shorthand_notation:
          type: boolean
          description: |
            Whether to use shorthand notation (only applicable for number
            fields).
      title: schema-field-ui-metadata
    schema-id-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              type: string
              description: Default value.
              format: id
            id_type:
              type: array
              description: Object ID types. Required when field type is ID.
              items:
                type: string
                format: text
      title: schema-id-field-descriptor
    schema-id-list-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              type: array
              description: Default value.
              items:
                type: string
                format: id
            id_type:
              type: array
              description: Object ID types. Required when field type is ID.
              items:
                type: string
                format: text
      title: schema-id-list-field-descriptor
    schema-int-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              type: integer
              description: Default value.
              format: int64
            gt:
              type: integer
              description: The minimum value for the integer (exclusive).
              format: int64
            gte:
              type: integer
              description: The minimum value for the integer (inclusive).
              format: int64
            lt:
              type: integer
              description: The maximum value for the integer (exclusive).
              format: int64
            lte:
              type: integer
              description: The maximum value for the integer (inclusive).
              format: int64
      title: schema-int-field-descriptor
    schema-int-list-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              type: array
              description: Default value.
              items:
                type: integer
                format: int64
            gt:
              type: integer
              description: The minimum value for the integer (exclusive).
              format: int64
            gte:
              type: integer
              description: The minimum value for the integer (inclusive).
              format: int64
            lt:
              type: integer
              description: The maximum value for the integer (exclusive).
              format: int64
            lte:
              type: integer
              description: The maximum value for the integer (inclusive).
              format: int64
      title: schema-int-list-field-descriptor
    schema-json-value-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              description: Default value.
      title: schema-json-value-field-descriptor
    schema-json-value-list-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              type: array
              description: Default value.
              items: {}
      title: schema-json-value-list-field-descriptor
    schema-rich-text-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            contains:
              type: string
              description: The contained substring.
              format: text
            default_value:
              type: string
              description: Default value.
              format: text
            eq_len:
              type: integer
              description: The exact string length.
              format: int64
            max_len:
              type: integer
              description: The maximum string length.
              format: int64
            min_len:
              type: integer
              description: The minimum string length.
              format: int64
            pattern:
              type: string
              description: The string pattern (regular expression).
              format: text
            prefix:
              type: string
              description: The string prefix.
              format: text
            suffix:
              type: string
              description: The string suffix.
              format: text
      title: schema-rich-text-field-descriptor
    schema-rich-text-list-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            contains:
              type: string
              description: The contained substring.
              format: text
            default_value:
              type: array
              description: Default value.
              items:
                type: string
                format: text
            eq_len:
              type: integer
              description: The exact string length.
              format: int64
            max_len:
              type: integer
              description: The maximum string length.
              format: int64
            min_len:
              type: integer
              description: The minimum string length.
              format: int64
            pattern:
              type: string
              description: The string pattern (regular expression).
              format: text
            prefix:
              type: string
              description: The string prefix.
              format: text
            suffix:
              type: string
              description: The string suffix.
              format: text
      title: schema-rich-text-list-field-descriptor
    schema-struct-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              type: object
              description: Default value.
      title: schema-struct-field-descriptor
    schema-struct-list-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              type: array
              description: Default value.
              items:
                type: object
      title: schema-struct-list-field-descriptor
    schema-text-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            contains:
              type: string
              description: The contained substring.
              format: text
            default_value:
              type: string
              description: Default value.
              format: text
            eq_len:
              type: integer
              description: The exact string length.
              format: int64
            max_len:
              type: integer
              description: The maximum string length.
              format: int64
            min_len:
              type: integer
              description: The minimum string length.
              format: int64
            pattern:
              type: string
              description: The string pattern (regular expression).
              format: text
            prefix:
              type: string
              description: The string prefix.
              format: text
            suffix:
              type: string
              description: The string suffix.
              format: text
      title: schema-text-field-descriptor
    schema-text-list-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            contains:
              type: string
              description: The contained substring.
              format: text
            default_value:
              type: array
              description: Default value.
              items:
                type: string
                format: text
            eq_len:
              type: integer
              description: The exact string length.
              format: int64
            max_len:
              type: integer
              description: The maximum string length.
              format: int64
            min_len:
              type: integer
              description: The minimum string length.
              format: int64
            pattern:
              type: string
              description: The string pattern (regular expression).
              format: text
            prefix:
              type: string
              description: The string prefix.
              format: text
            suffix:
              type: string
              description: The string suffix.
              format: text
      title: schema-text-list-field-descriptor
    schema-timestamp-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              type: string
              description: Default value.
              format: text
      title: schema-timestamp-field-descriptor
    schema-timestamp-list-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            default_value:
              type: array
              description: Default value.
              items:
                type: string
                format: text
      title: schema-timestamp-list-field-descriptor
    schema-tokens-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            contains:
              type: string
              description: The contained substring.
              format: text
            default_value:
              type: string
              description: Default value.
              format: text
            eq_len:
              type: integer
              description: The exact string length.
              format: int64
            max_len:
              type: integer
              description: The maximum string length.
              format: int64
            min_len:
              type: integer
              description: The minimum string length.
              format: int64
            pattern:
              type: string
              description: The string pattern (regular expression).
              format: text
            prefix:
              type: string
              description: The string prefix.
              format: text
            suffix:
              type: string
              description: The string suffix.
              format: text
      title: schema-tokens-field-descriptor
    schema-tokens-list-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            contains:
              type: string
              description: The contained substring.
              format: text
            default_value:
              type: array
              description: Default value.
              items:
                type: string
                format: text
            eq_len:
              type: integer
              description: The exact string length.
              format: int64
            max_len:
              type: integer
              description: The maximum string length.
              format: int64
            min_len:
              type: integer
              description: The minimum string length.
              format: int64
            pattern:
              type: string
              description: The string pattern (regular expression).
              format: text
            prefix:
              type: string
              description: The string prefix.
              format: text
            suffix:
              type: string
              description: The string suffix.
              format: text
      title: schema-tokens-list-field-descriptor
    schema-uenum-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            allowed_values:
              type: array
              description: Allowed values for the field.
              items:
                $ref: '#/components/schemas/schema-field-uenum-value'
            default_value:
              type: integer
              description: Default value.
              format: int64
          required:
            - allowed_values
      title: schema-uenum-field-descriptor
    schema-uenum-list-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
        - type: object
          properties:
            allowed_values:
              type: array
              description: Allowed values for the field.
              items:
                $ref: '#/components/schemas/schema-field-uenum-value'
            default_value:
              type: array
              description: Default value.
              items:
                type: integer
                format: int64
          required:
            - allowed_values
      title: schema-uenum-list-field-descriptor
    schema-unknown-field-descriptor:
      allOf:
        - $ref: '#/components/schemas/schema-field-descriptor-base'
      title: schema-unknown-field-descriptor
    schemas-subtype-prepare-update-get-request:
      type: object
      properties:
        is_custom_leaf_type:
          type: boolean
          description: Whether the leaf type corresponds to a custom object.
        leaf_type:
          type: string
          description: Leaf type of the object.
          format: text
        new_subtype:
          type: string
          description: Name of the new subtype for the object.
          format: text
        object:
          type: string
          description: |
            ID of the object of which subtype is to be changed. Used to fetch
            the object's custom schema fragments and custom fields
          format: id
      required:
        - leaf_type
      title: schemas-subtype-prepare-update-get-request
    schemas-subtype-prepare-update-get-response:
      type: object
      properties:
        added_fields:
          type: array
          description: |
            List of fields that have a default value and need to be set.
          items:
            $ref: '#/components/schemas/schemas-subtype-prepare-update-get-response-added-field'
        dropped_fields:
          type: array
          description: List of fields that will be dropped from the object.
          items:
            $ref: '#/components/schemas/schemas-subtype-prepare-update-get-response-dropped-field'
        new_custom_schema_fragments:
          type: array
          description: List of new custom schema fragment IDs of the object.
          items:
            type: string
            format: id
        new_start_stage:
          type: string
          description: |
            ID of the start stage of the new diagram if the subtype change
            results in a change in the stage diagram.
          format: id
      title: schemas-subtype-prepare-update-get-response
      x-go-name: SchemasSubtypePrepareUpdateGetResponseBody
    schemas-subtype-prepare-update-get-response-added-field:
      type: object
      properties:
        default_value:
          description: Default value of the added field.
        name:
          type: string
          description: API-compliant qualified name of the added field.
          format: text
      required:
        - name
      title: schemas-subtype-prepare-update-get-response-added-field
    schemas-subtype-prepare-update-get-response-conflict-type:
      type: string
      enum:
        - absent_in_new
        - absent_in_old
        - incompatible_type
    schemas-subtype-prepare-update-get-response-dropped-field:
      type: object
      properties:
        conflict_type:
          $ref: '#/components/schemas/schemas-subtype-prepare-update-get-response-conflict-type'
        message:
          type: string
          description: Conflict message for the field being dropped.
          format: text
        name:
          type: string
          description: API-compliant qualified name of the dropped field.
          format: text
      required:
        - conflict_type
        - message
        - name
      title: schemas-subtype-prepare-update-get-response-dropped-field
    service-account:
      allOf:
        - $ref: '#/components/schemas/user-base'
      title: service-account
    service-account-summary:
      allOf:
        - $ref: '#/components/schemas/user-base-summary'
      title: service-account-summary
    service-accounts-create-request:
      type: object
      description: The request object to create a new service account.
      properties:
        display_name:
          type: string
          description: |
            The service account's display name. A unique, human readable name
            to identify a service account.
          format: text
        gen_keyring:
          type: boolean
          description: |
            Indicates whether to generate a keyring along with the new service
            account. The default is false.
      required:
        - display_name
      title: service-accounts-create-request
    service-accounts-create-response:
      type: object
      description: |
        The response object to the corresponding create service account
        request.
      properties:
        service_account:
          $ref: '#/components/schemas/service-account'
      required:
        - service_account
      title: service-accounts-create-response
      x-go-name: ServiceAccountsCreateResponseBody
    service-accounts-get-request:
      type: object
      description: The request object to get a service account's information.
      properties:
        id:
          type: string
          description: The ID of the requested service account.
          format: id
      required:
        - id
      title: service-accounts-get-request
    service-accounts-get-response:
      type: object
      description: |
        The response object that carries the service account's information
        corresponding to the request.
      properties:
        service_account:
          $ref: '#/components/schemas/service-account'
      required:
        - service_account
      title: service-accounts-get-response
      x-go-name: ServiceAccountsGetResponseBody
    set-issue-selector:
      type: object
      properties:
        custom_fields:
          type: object
          description: |
            Custom fields on the issue with their fully qualified names and the
            associated with their exact allowed values. The SLA policy applies
            to issues where all named custom fields have exactly the specified
            values.
        owners:
          type: array
          description: The SLA policy applies to the issues of these owners.
          items:
            type: string
            format: id
        parts:
          type: array
          description: The SLA policy applies to the issues of these parts.
          example:
            - PROD-12345
          items:
            type: string
            format: id
        rev_orgs:
          type: array
          description: The SLA policy applies to the issues of these revorgs.
          example:
            - REV-AbCdEfGh
          items:
            type: string
            format: id
        stage_name:
          type: array
          description: The SLA policy applies to issues with these stages.
          items:
            type: string
            format: text
        subtype:
          type: array
          description: The issue subtype for which the SLA policy applies.
          items:
            type: string
            format: text
        tags:
          type: array
          description: |
            The SLA policy applies to issues with these tags. If empty, the tag
            filter isn't applied.
          example:
            - TAG-12345
          items:
            type: string
            format: id
      title: set-issue-selector
    set-org-schedule-fragment-summary:
      type: object
      properties:
        id:
          type: string
          description: Organization schedule fragment ID.
          format: id
      required:
        - id
      title: set-org-schedule-fragment-summary
    set-shared-with-membership:
      type: object
      description: |
        Information about the role the member receives due to the share.
      properties:
        member:
          type: string
          description: ID of the member the object is shared with.
          format: id
        role:
          type: string
          description: |
            ID of the role that describes what privileges the membership
            entails.
          format: id
      title: set-shared-with-membership
    set-sla-policy:
      type: object
      properties:
        metrics:
          type: array
          description: Metrics to apply to the selected items.
          items:
            $ref: '#/components/schemas/set-support-metric-target'
        name:
          type: string
          description: Human-readable name.
          format: text
        selector:
          $ref: '#/components/schemas/set-sla-selector'
      required:
        - name
        - selector
      title: set-sla-policy
    set-sla-selector:
      type: object
      properties:
        applies_to:
          $ref: '#/components/schemas/sla-selector-applies-to'
        custom_fields:
          type: object
          description: |
            Custom fields with their fully qualified names and associated with
            their exact allowed values. The SLA policy applies to records where
            all named custom fields have exactly the specified values. If the
            value is null, the field must have null value or not be present.
        groups:
          type: array
          description: |
            The SLA policy applies to the tickets or conversations of these
            groups.
          items:
            type: string
            format: id
        issue_selector:
          $ref: '#/components/schemas/set-issue-selector'
        owners:
          type: array
          description: |
            The SLA policy applies to the tickets or conversations of these
            owners.
          items:
            type: string
            format: id
        parts:
          type: array
          description: The SLA policy applies to the tickets of these parts.
          example:
            - PROD-12345
          items:
            type: string
            format: id
        priority:
          type: array
          description: |
            The SLA policy applies to conversations with these priorities.
          items:
            $ref: '#/components/schemas/sla-selector-priority'
        severity:
          type: array
          description: The SLA policy applies to tickets with these severities.
          items:
            $ref: '#/components/schemas/sla-selector-severity'
        source_channel:
          type: array
          description: |
            The SLA policy applies to conversations with these sources.
          items:
            type: string
            format: text
        subtype:
          type: array
          description: The SLA policy applies to tickets with these subtypes.
          items:
            type: string
            format: text
        tags:
          type: array
          description: The SLA policy applies to items with these tags.
          example:
            - TAG-12345
          items:
            type: string
            format: id
        ticket_source_channel:
          type: array
          description: |
            The SLA policy applies to tickets with these source channels.
          items:
            type: string
            format: text
      required:
        - applies_to
      title: set-sla-selector
    set-support-metric-target:
      type: object
      properties:
        metric:
          type: string
          description: The metric to apply.
          format: id
        org_schedule_id:
          type: string
          description: |
            The organization schedule controlling this metrics calculation.
            Time based metrics don't consume time while their schedule is off.
          format: id
        performance:
          type: number
          description: |
            The percentage of instances for which this metric's target must not
            be breached, in order to avoid breaching the overall SLA policy.
          format: double
        target:
          type: integer
          description: |
            The target value to be achieved, for example the time in which to
            do something, or the maximum allowed number of message pairs. The
            units and interpretation of the value is controlled by the
            properties of the referenced metric.
          format: int32
        warning_target:
          type: integer
          description: |
            The threshold in the same units as target where the metric is
            considered to be 'at risk'.
          format: int32
      required:
        - metric
        - target
      title: set-support-metric-target
    set-tag-with-value:
      type: object
      properties:
        id:
          type: string
          description: The ID of the tag.
          example: TAG-12345
          format: id
        value:
          type: string
          description: |
            The value for the object's association with the tag. If specified,
            the value must be one that's specified in the tag's allowed values.
          format: text
      required:
        - id
      title: set-tag-with-value
    set-weekly-org-schedule:
      type: object
      properties:
        intervals:
          type: array
          description: The 'on' intervals of the week.
          items:
            $ref: '#/components/schemas/create-weekly-org-schedule-interval'
        period_name:
          type: string
          description: |
            The name of the period during which the organization schedule
            applies.
          format: text
      required:
        - intervals
        - period_name
      title: set-weekly-org-schedule
    shared-with-membership:
      type: object
      description: |
        Information about the role the member receives due to the share.
      properties:
        member:
          $ref: '#/components/schemas/member-summary'
        role:
          $ref: '#/components/schemas/role-summary'
      title: shared-with-membership
    shared-with-membership-filter:
      type: object
      description: Filter on target item based on intended audience.
      properties:
        member:
          type: string
          description: ID of the group/member with whom the item is shared.
          format: id
        role:
          type: string
          description: |
            Role ID of the group/member with whom the item is shared.
          format: id
      title: shared-with-membership-filter
    sla:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            account_filter:
              type: object
              description: |
                A set of account attributes that must be satisfied for the SLA to
                apply. AND applies between each field.
            compensation:
              $ref: '#/components/schemas/sla-compensation'
            description:
              type: string
              description: Description of the purpose and capabilities of the SLA.
              format: text
            evaluation_period:
              $ref: '#/components/schemas/sla-evaluation-period'
            name:
              type: string
              description: Human-readable name.
              format: text
            policies:
              type: array
              description: |
                The policies encompassed by this SLA, ordered in decreasing
                priority.
              items:
                $ref: '#/components/schemas/sla-policy'
            sla_type:
              $ref: '#/components/schemas/sla-type'
            status:
              $ref: '#/components/schemas/sla-status'
          required:
            - name
            - status
      title: sla
    sla-applies-to:
      type: string
      description: |
        The object types on which the SLA applies. An external SLA can apply to
        multiple object types, but an internal SLA can apply to only one object
        type.
      enum:
        - conversation
        - issue
        - ticket
    sla-assign-result:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/error'
        rev_org:
          $ref: '#/components/schemas/rev-org-summary'
      required:
        - rev_org
      title: sla-assign-result
    sla-compensation:
      type: object
      additionalProperties: false
      description: |
        Describes the compensation to be provided in case of SLA breach. It is
        not 'self-executing', it is the responsibility of the organization
        providing the SLA to actually transfer the promised credit, resource or
        other payment.
      title: sla-compensation
    sla-evaluation-period:
      type: string
      description: |
        Specifies the frequency of when the contractually-meaningful evaluation
        of the SLA happens. The organization for their own information might
        evaluate the various metrics contained in the policy as often as we can
        make it feasible for them, but only the evaluation at the end of the
        evaluation period triggers a compensation and needs to be shared with
        the customer.
      enum:
        - monthly
        - quarterly
        - weekly
        - yearly
    sla-policy:
      type: object
      additionalProperties: false
      description: A policy that represents a promise to your revs.
      title: sla-policy
    sla-selector-applies-to:
      type: string
      description: The item type for which the SLA policy applies.
      enum:
        - conversation
        - issue
        - ticket
    sla-selector-priority:
      type: string
      description: |
        The SLA policy applies to conversations with these priorities.
      enum:
        - p0
        - p1
        - p2
    sla-selector-severity:
      type: string
      description: The SLA policy applies to tickets with these severities.
      enum:
        - blocker
        - high
        - low
        - medium
    sla-status:
      type: string
      description: |
        Status determines how an item can be used. In 'draft' status an item
        can be edited but can't be used. When 'published' the item can longer
        be edited but can be used. 'Archived' is read-only.
      enum:
        - archived
        - draft
        - published
    sla-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            name:
              type: string
              description: Human-readable name.
              format: text
            sla_type:
              $ref: '#/components/schemas/sla-type'
            status:
              $ref: '#/components/schemas/sla-status'
          required:
            - name
            - status
      title: sla-summary
    sla-summary-filter:
      type: object
      description: The filter for SLA summary.
      properties:
        stage:
          type: array
          description: Filters for records with any of the provided SLA stages.
          items:
            $ref: '#/components/schemas/sla-summary-stage'
        target_time:
          $ref: '#/components/schemas/date-filter'
      title: sla-summary-filter
    sla-summary-stage:
      type: string
      description: |
        The stage of the SLA. This is the metric stage which is closest to
        breach.
      enum:
        - breached
        - completed
        - paused
        - running
        - warning
    sla-tracker:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            applies_to_id:
              type: string
              description: Details of the object on which the SLA is being tracked.
              format: id
            applies_to_type:
              $ref: '#/components/schemas/sla-tracker-applies-to-type'
            metric_target_summaries:
              type: array
              description: |
                Summary of the metrics target being tracked in the SLA tracker.
              items:
                $ref: '#/components/schemas/archetype-metric-target'
            removed_sla_metric_history:
              type: array
              description: Information about removed metrics.
              items:
                $ref: '#/components/schemas/removed-sla-metric-history'
            sla:
              $ref: '#/components/schemas/sla-summary'
            sla_policy_id:
              type: string
              description: |
                Details of the applicable SLA policy. Can be omitted if no sla
                applies, or if no policy of the sla applies at the moment.
              format: id
            stage:
              type: string
              description: SLA stage of the object being tracked.
              format: text
            status:
              type: string
              description: |
                It is an indicator of whether the SLA has ever been breached
                (missed). If not, it shows whether the SLA is completed, in
                progress, or nil - if no policy is applied.
              format: text
          required:
            - metric_target_summaries
      title: sla-tracker
    sla-tracker-applies-to-type:
      type: string
      description: The type of the object on which the SLA is being tracked.
      enum:
        - conversation
        - issue
        - ticket
    sla-tracker-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            applies_to_type:
              $ref: '#/components/schemas/sla-tracker-applies-to-type'
      title: sla-tracker-summary
    sla-trackers-get-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the SLA tracker to get.
          format: id
      required:
        - id
      title: sla-trackers-get-request
    sla-trackers-get-response:
      type: object
      properties:
        sla_tracker:
          $ref: '#/components/schemas/sla-tracker'
      required:
        - sla_tracker
      title: sla-trackers-get-response
      x-go-name: SlaTrackersGetResponseBody
    sla-trackers-list-request:
      type: object
      properties:
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        limit:
          type: integer
          description: |
            The maximum number of SLA trackers to return. The default is '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        sort_by:
          type: array
          description: |
            Fields to sort the SLA Trackers by and the direction to sort them.
          items:
            type: string
            format: sort-by
        stage:
          type: array
          description: The SLA tracker stages the filter matches.
          items:
            type: string
            format: text
        status:
          type: array
          description: The SLA tracker statuses the filter matches.
          items:
            type: string
            format: text
      title: sla-trackers-list-request
    sla-trackers-list-response:
      type: object
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        sla_trackers:
          type: array
          description: The list of SLA trackers.
          items:
            $ref: '#/components/schemas/sla-tracker'
      required:
        - sla_trackers
      title: sla-trackers-list-response
      x-go-name: SlaTrackersListResponseBody
    sla-type:
      type: string
      description: Type of the SLA.
      enum:
        - external
        - internal
    slas-assign-request:
      type: object
      properties:
        id:
          type: string
          description: |
            The SLA which would be assigned to the Rev organizations. If
            omitted, the SLA of all the rev organizations referenced will be
            unset.
          format: id
        rev_orgs:
          type: array
          description: The Rev organizations to apply the SLA to.
          example:
            - REV-AbCdEfGh
          items:
            type: string
            format: id
      required:
        - rev_orgs
      title: slas-assign-request
    slas-assign-response:
      type: object
      properties:
        results:
          type: array
          description: The list of outcomes for each Rev organization.
          items:
            $ref: '#/components/schemas/sla-assign-result'
      required:
        - results
      title: slas-assign-response
      x-go-name: SlasAssignResponseBody
    slas-create-request:
      type: object
      properties:
        account_selector:
          $ref: '#/components/schemas/accounts-filters'
        applies_to:
          type: array
          description: The object types this SLA can apply to.
          items:
            $ref: '#/components/schemas/sla-applies-to'
        description:
          type: string
          description: Description of the purpose and capabilities of the SLA.
          format: text
        evaluation_period:
          $ref: '#/components/schemas/sla-evaluation-period'
        name:
          type: string
          description: Human-readable name.
          format: text
        policies:
          type: array
          description: |
            The policies encompassed by this SLA, ordered in decreasing
            priority.
          items:
            $ref: '#/components/schemas/set-sla-policy'
        sla_type:
          $ref: '#/components/schemas/sla-type'
      required:
        - name
      title: slas-create-request
    slas-create-response:
      type: object
      properties:
        sla:
          $ref: '#/components/schemas/sla'
      required:
        - sla
      title: slas-create-response
      x-go-name: SlasCreateResponseBody
    slas-filter-applies-to-operator-type:
      type: string
      enum:
        - all
        - any
    slas-get-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the SLA to get.
          format: id
      required:
        - id
      title: slas-get-request
    slas-get-response:
      type: object
      properties:
        sla:
          $ref: '#/components/schemas/sla'
      required:
        - sla
      title: slas-get-response
      x-go-name: SlasGetResponseBody
    slas-list-request:
      type: object
      properties:
        applies_to:
          type: array
          description: The object types the SLA applies to.
          items:
            $ref: '#/components/schemas/sla-applies-to'
        applies_to_op:
          $ref: '#/components/schemas/slas-filter-applies-to-operator-type'
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        limit:
          type: integer
          description: |
            The maximum number of SLAs to return. The default is '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        sla_type:
          type: array
          description: The SLA types the filter matches.
          items:
            $ref: '#/components/schemas/sla-type'
        sort_by:
          type: array
          description: |
            Fields to sort the SLAs by and the direction to sort them.
          items:
            type: string
            format: sort-by
        status:
          type: array
          description: The SLA statuses the filter matches.
          items:
            $ref: '#/components/schemas/sla-status'
      title: slas-list-request
    slas-list-response:
      type: object
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        slas:
          type: array
          description: The list of SLAs.
          items:
            $ref: '#/components/schemas/sla'
      required:
        - slas
      title: slas-list-response
      x-go-name: SlasListResponseBody
    slas-transition-request:
      type: object
      properties:
        id:
          type: string
          description: The updated SLA.
          format: id
        status:
          $ref: '#/components/schemas/sla-status'
      required:
        - id
        - status
      title: slas-transition-request
    slas-transition-response:
      type: object
      properties:
        sla:
          $ref: '#/components/schemas/sla'
      required:
        - sla
      title: slas-transition-response
      x-go-name: SlasTransitionResponseBody
    slas-update-request:
      type: object
      properties:
        account_selector:
          $ref: '#/components/schemas/accounts-filters'
        description:
          type: string
          description: Description of the purpose and capabilities of the SLA.
          format: text
        evaluation_period:
          $ref: '#/components/schemas/sla-evaluation-period'
        id:
          type: string
          description: The SLA's ID.
          format: id
        name:
          type: string
          description: Human-readable name.
          format: text
        policies:
          type: array
          description: |
            The policies encompassed by this SLA, ordered in decreasing
            priority, the whole array will be overwritten by the contents of
            this array.
          items:
            $ref: '#/components/schemas/set-sla-policy'
      required:
        - id
      title: slas-update-request
    slas-update-response:
      type: object
      properties:
        sla:
          $ref: '#/components/schemas/sla'
      required:
        - sla
      title: slas-update-response
      x-go-name: SlasUpdateResponseBody
    snap-kit-action-execute-deferred-request:
      type: object
      properties:
        actions:
          type: array
          description: List of actions triggered in the request.
          items:
            $ref: '#/components/schemas/snap-kit-action-request'
          maxItems: 5
        id:
          type: string
          description: ID of the deferred snap-kit action to be executed.
          format: id
      required:
        - actions
        - id
      title: snap-kit-action-execute-deferred-request
    snap-kit-action-execute-deferred-response:
      type: object
      additionalProperties: false
      title: snap-kit-action-execute-deferred-response
      x-go-name: SnapKitActionExecuteDeferredResponseBody
    snap-kit-action-request:
      type: object
      discriminator:
        mapping:
          button: '#/components/schemas/snap-kit-action-request-button'
          form: '#/components/schemas/snap-kit-action-request-form'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/snap-kit-action-request-button'
        - $ref: '#/components/schemas/snap-kit-action-request-form'
      properties:
        type:
          $ref: '#/components/schemas/snap-kit-action-request-element-type-value'
        action_id:
          type: string
          description: |
            Id of the interactive element specified by developer in a snap-kit
            object.
          format: text
        action_type:
          type: string
          description: Action interaction type.
          format: text
        block_id:
          type: string
          description: |
            Id of the block within the surface which is the container for the
            interactive element.
          format: text
        timestamp:
          type: string
          description: Timestamp when the action was originated.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
      required:
        - action_id
        - timestamp
        - type
      title: snap-kit-action-request
    snap-kit-action-request-button:
      type: object
      properties:
        value:
          type: string
          description: Value for the button interactive element.
          format: text
      required:
        - value
      title: snap-kit-action-request-button
    snap-kit-action-request-element-type-value:
      type: string
      enum:
        - button
        - form
    snap-kit-action-request-form:
      type: object
      properties:
        value:
          type: object
          description: Value for the form interactive element.
      required:
        - value
      title: snap-kit-action-request-form
    snap-widget:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          $ref: '#/components/schemas/snap-widget-type'
      required:
        - type
      title: snap-widget
    snap-widget-type:
      type: string
    snap-widgets-create-request:
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          $ref: '#/components/schemas/snap-widgets-create-request-type'
        shared_with:
          type: array
          description: Sets the members that the snap widget is shared with.
          items:
            $ref: '#/components/schemas/set-shared-with-membership'
          maxItems: 8
      required:
        - type
      title: snap-widgets-create-request
    snap-widgets-create-request-type:
      type: string
    snap-widgets-create-response:
      type: object
      properties:
        snap_widget:
          $ref: '#/components/schemas/snap-widget'
      required:
        - snap_widget
      title: snap-widgets-create-response
      x-go-name: SnapWidgetsCreateResponseBody
    stage:
      type: object
      additionalProperties: false
      description: Describes the current stage of a object.
      title: stage
    stage-diagram:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            is_custom_leaf_type:
              type: boolean
              description: |
                True if this stage diagram corresponds to a custom leaf type.
            is_default:
              type: boolean
              description: |
                True if this stage diagram is the default for the leaf type.
            leaf_type:
              type: string
              description: The leaf type this stage diagram applies to.
              format: text
            name:
              type: string
              description: The human readable name of the stage diagram.
              format: text
            stages:
              type: array
              description: |
                List of stages with their allowed transitions in this stage
                diagram.
              items:
                $ref: '#/components/schemas/stage-node'
          required:
            - stages
      title: stage-diagram
    stage-diagram-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            name:
              type: string
              description: The human readable name of the stage diagram.
              format: text
      title: stage-diagram-summary
    stage-diagrams-create-request:
      type: object
      properties:
        is_custom_leaf_type:
          type: boolean
          description: Whether the leaf type corresponds to a custom object.
        is_default:
          type: boolean
          description: Whether this is a default stage diagram.
        leaf_type:
          type: string
          description: The leaf type this stage diagram applies to.
          format: text
        name:
          type: string
          description: |
            The name of the stage diagram. Stage diagram is used for defining
            stage transitions.
          format: text
        stages:
          type: array
          description: List of stages in the diagram.
          items:
            $ref: '#/components/schemas/create-stage-node'
      required:
        - leaf_type
        - name
        - stages
      title: stage-diagrams-create-request
    stage-diagrams-create-response:
      type: object
      properties:
        stage_diagram:
          $ref: '#/components/schemas/stage-diagram'
      required:
        - stage_diagram
      title: stage-diagrams-create-response
      x-go-name: StageDiagramsCreateResponseBody
    stage-diagrams-get-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the stage diagram to get.
          format: id
        is_custom_leaf_type:
          type: boolean
          description: |
            Whether the leaf type corresponds to a custom object. Specify this
            along with leaf_type to get the default custom object stage
            diagram.
        leaf_type:
          type: string
          description: |
            The leaf type. Should be specified to retrieve the default stage
            diagram for the leaf type. If not provided, then id is used.
          format: text
      title: stage-diagrams-get-request
    stage-diagrams-get-response:
      type: object
      properties:
        stage_diagram:
          $ref: '#/components/schemas/stage-diagram'
      required:
        - stage_diagram
      title: stage-diagrams-get-response
      x-go-name: StageDiagramsGetResponseBody
    stage-diagrams-list-request:
      type: object
      properties:
        cursor:
          type: string
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          format: text
        is_custom_leaf_type:
          type: boolean
          description: |
            Whether only custom object stage diagrams should be filtered.
        leaf_type:
          type: array
          description: The list of leaf types.
          items:
            type: string
            format: text
        limit:
          type: integer
          description: The maximum number of items.
          format: int32
        name:
          type: array
          description: The list of stage diagram names.
          items:
            type: string
            format: text
        sort_by:
          type: array
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
            format: sort-by
      title: stage-diagrams-list-request
    stage-diagrams-list-response:
      type: object
      properties:
        cursor:
          type: string
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          format: text
        result:
          type: array
          description: The stage diagram.
          items:
            $ref: '#/components/schemas/stage-diagram'
      required:
        - result
      title: stage-diagrams-list-response
      x-go-name: StageDiagramsListResponseBody
    stage-diagrams-update-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the stage diagram to update.
          format: id
        name:
          type: string
          description: The updated name of the stage diagram.
          format: text
        stages:
          type: array
          description: List of stages in the stage diagram.
          items:
            $ref: '#/components/schemas/update-stage-node'
      required:
        - id
      title: stage-diagrams-update-request
    stage-diagrams-update-response:
      type: object
      properties:
        stage_diagram:
          $ref: '#/components/schemas/stage-diagram'
      required:
        - stage_diagram
      title: stage-diagrams-update-response
      x-go-name: StageDiagramsUpdateResponseBody
    stage-filter:
      type: object
      description: The filter for stages.
      properties:
        name:
          type: array
          description: Filters for records in the provided stage(s) by name.
          items:
            type: string
            format: text
      title: stage-filter
    stage-init:
      type: object
      description: Sets an object's initial stage.
      properties:
        name:
          type: string
          description: The name of the stage.
          format: text
      title: stage-init
    stage-node:
      type: object
      description: Diagram stage.
      properties:
        is_deprecated:
          type: boolean
          description: True if this stage has been deprecated.
        is_start:
          type: boolean
          description: |
            True if this stage is the starting stage of the stage diagram.
        stage:
          $ref: '#/components/schemas/custom-stage-summary'
        transitions:
          type: array
          description: List of allowed transitions from this stage.
          items:
            $ref: '#/components/schemas/stage-transition'
      title: stage-node
    stage-transition:
      type: object
      description: Stage transition.
      properties:
        target_stage:
          $ref: '#/components/schemas/custom-stage-summary'
      title: stage-transition
    stage-update:
      type: object
      description: Updates an object's stage.
      properties:
        name:
          type: string
          description: |
            The updated name of the stage, otherwise unchanged if not set.
          format: text
      title: stage-update
    stage-validation-option-for-create:
      type: string
      description: Type of stage validation options when creating an object.
      enum:
        - allow_non_start
    stage-validation-option-for-update:
      type: string
      description: |
        Type of state validation options when updating the stage of an object.
      enum:
        - allow_invalid_transition
    staged-info-filter:
      type: object
      properties:
        is_staged:
          type: boolean
          description: Filters for issues that are staged.
      title: staged-info-filter
    stock-field-override:
      type: object
      description: A stock field override.
      properties:
        is_required:
          type: boolean
          description: Whether the field is required.
        name:
          type: string
          description: Name of the stock field to be overridden.
          format: text
        ui:
          $ref: '#/components/schemas/schema-field-ui-metadata'
      title: stock-field-override
    stock-schema-fragment:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            composite_schemas:
              type: array
              description: List of composite schemas.
              items:
                $ref: '#/components/schemas/composite-schema'
            description:
              type: string
              description: Description of the schema.
              format: text
            fields:
              type: array
              description: List of all fields in this schema.
              items:
                $ref: '#/components/schemas/schema-field-descriptor'
            leaf_type:
              type: string
              description: Leaf type this fragment applies to.
              format: text
            new_fragment_ref:
              $ref: '#/components/schemas/atom-summary'
            old_fragment_ref:
              $ref: '#/components/schemas/atom-summary'
          required:
            - composite_schemas
            - fields
      title: stock-schema-fragment
    stock-schema-fragments-get-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the stock schema fragment.
          format: id
        leaf_type:
          type: string
          description: The leaf type this fragment applies to.
          format: text
      title: stock-schema-fragments-get-request
    stock-schema-fragments-get-response:
      type: object
      properties:
        fragment:
          $ref: '#/components/schemas/stock-schema-fragment'
      required:
        - fragment
      title: stock-schema-fragments-get-response
      x-go-name: StockSchemaFragmentsGetResponseBody
    stock-schema-fragments-list-request:
      type: object
      properties:
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        filter_preset:
          $ref: '#/components/schemas/stock-schema-fragments-list-request-filter-preset'
        leaf_type:
          type: array
          description: The list of leaf types.
          items:
            type: string
            format: text
        limit:
          type: integer
          description: The maximum number of items.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        prune:
          type: array
          description: |
            List of fields which are not required in the payload and can be
            pruned away.
          items:
            $ref: '#/components/schemas/stock-schema-fragments-list-request-prune'
        sort_by:
          type: array
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
            format: sort-by
      title: stock-schema-fragments-list-request
    stock-schema-fragments-list-request-filter-preset:
      type: string
      enum:
        - customizable_types_preset
        - no_preset
    stock-schema-fragments-list-request-prune:
      type: string
      enum:
        - composite_schemas
        - fields
    stock-schema-fragments-list-response:
      type: object
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        result:
          type: array
          description: The stock schema fragments.
          items:
            $ref: '#/components/schemas/stock-schema-fragment'
      required:
        - result
      title: stock-schema-fragments-list-response
      x-go-name: StockSchemaFragmentsListResponseBody
    survey:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            description:
              type: string
              description: Description of the survey.
              format: text
            header:
              type: string
              description: Header of the survey.
              format: text
            introductory_text:
              type: string
              description: |
                Text posted when introducing the survey to the responder.
              format: text
            name:
              type: string
              description: |
                Survey name associated with schema. This name would be unique per
                dev org.
              format: text
            response_text:
              type: string
              description: Text posted after the response is collected.
              format: text
            schema:
              type: array
              description: List of all fields in the schema.
              items:
                $ref: '#/components/schemas/schema-field-descriptor'
            schema_with_metadata:
              type: array
              description: |
                List of all the fields and their respective metadata in the schema.
              items:
                $ref: '#/components/schemas/survey-field-with-metadata'
            title:
              type: string
              description: Title of the survey.
              format: text
      title: survey
    survey-aggregation-filter:
      type: object
      additionalProperties: false
      description: The filter for survey aggregation.
      title: survey-aggregation-filter
    survey-field-with-metadata:
      type: object
      description: Field descriptors with additional metadata for surveys.
      properties:
        field:
          $ref: '#/components/schemas/schema-field-descriptor'
        metadata:
          type: object
          description: Additional metadata for the input field.
        question:
          type: string
          description: The question linked to the input field.
          format: text
      title: survey-field-with-metadata
    survey-response:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            dispatch_id:
              type: string
              description: The unique ID associated with the dispatched survey.
              format: id
            dispatched_channels:
              type: array
              description: |
                Source channels on which the survey is sent. Stock allowed values:
                ```
                  {
                    "id": 1,
                    "label": "plug",
                    "ordinal": 1,
                    "overridable": false
                  },
                  {
                    "id": 2,
                    "label": "portal",
                    "ordinal": 2,
                    "overridable": false
                  },
                  {
                    "id": 3,
                    "label": "email",
                    "ordinal": 3,
                    "overridable": false
                  },
                  {
                    "id": 4,
                    "label": "slack",
                    "ordinal": 4,
                    "overridable": false
                  }
                ```
              items:
                $ref: '#/components/schemas/enum-value'
            object:
              type: string
              description: The ID of the object for which survey is taken.
              format: id
            recipient:
              $ref: '#/components/schemas/user-summary'
            response:
              type: object
              description: Response for the survey.
            response_channel:
              $ref: '#/components/schemas/enum-value'
            stage:
              $ref: '#/components/schemas/enum-value'
            survey:
              type: string
              description: The ID of the survey for which response is taken.
              format: id
      title: survey-response
    surveys-create-request:
      type: object
      properties:
        description:
          type: string
          description: Description about the survey.
          format: text
          maxLength: 1000
        header:
          type: string
          description: Header of the survey.
          format: text
          maxLength: 1000
        introductory_text:
          type: string
          description: |
            Text posted when introducing the survey to the responder.
          format: text
          maxLength: 1000
        name:
          type: string
          description: The survey's name.
          format: text
          maxLength: 100
          minLength: 1
        response_text:
          type: string
          description: Text posted after the response is collected.
          format: text
          maxLength: 1000
        schema:
          type: array
          description: Schema for the survey.
          items:
            $ref: '#/components/schemas/field-descriptor'
        schema_with_metadata:
          type: array
          description: The schema with metadata for the survey.
          items:
            $ref: '#/components/schemas/survey-field-with-metadata'
        title:
          type: string
          description: Title of the survey.
          format: text
          maxLength: 1000
      required:
        - name
      title: surveys-create-request
    surveys-create-response:
      type: object
      properties:
        survey:
          $ref: '#/components/schemas/survey'
      required:
        - survey
      title: surveys-create-response
      x-go-name: SurveysCreateResponseBody
    surveys-delete-request:
      type: object
      properties:
        id:
          type: string
          description: ID of the survey being deleted.
          format: id
      required:
        - id
      title: surveys-delete-request
    surveys-delete-response:
      type: object
      additionalProperties: false
      title: surveys-delete-response
      x-go-name: SurveysDeleteResponseBody
    surveys-get-request:
      type: object
      properties:
        id:
          type: string
          description: The ID of the survey to get.
          format: id
      required:
        - id
      title: surveys-get-request
    surveys-get-response:
      type: object
      properties:
        survey:
          $ref: '#/components/schemas/survey'
      required:
        - survey
      title: surveys-get-response
      x-go-name: SurveysGetResponseBody
    surveys-list-request:
      type: object
      properties:
        created_by:
          type: array
          description: Filters for surveys created by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        created_date:
          $ref: '#/components/schemas/date-filter'
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        limit:
          type: integer
          description: |
            The maximum number of surveys to return. If not set, then the
            default is '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-filter'
        name:
          type: array
          description: Filters for surveys by name(s).
          items:
            type: string
            format: text
        sort_by:
          type: array
          description: |
            Fields to sort the surveys by and the direction to sort them.
          items:
            type: string
            format: sort-by
      title: surveys-list-request
    surveys-list-response:
      type: object
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        surveys:
          type: array
          description: The list of the surveys.
          items:
            $ref: '#/components/schemas/survey'
      required:
        - surveys
      title: surveys-list-response
      x-go-name: SurveysListResponseBody
    surveys-responses-list-request:
      type: object
      properties:
        created_by:
          type: array
          description: |
            Filters for survey responses created by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        created_date:
          $ref: '#/components/schemas/date-filter'
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        dispatch_ids:
          type: array
          description: |
            Filters for survey responses associated with these unique IDs.
          items:
            type: string
            format: id
        limit:
          type: integer
          description: |
            The maximum number of survey responses to return. If not set, then
            the default is '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-filter'
        objects:
          type: array
          description: Filters for survey responses created for the objects.
          example:
            - ACC-12345
          items:
            type: string
            format: id
        recipient:
          type: array
          description: |
            Filters for survey responses dispatched to any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        sort_by:
          type: array
          description: |
            Fields to sort the survey responses by and the direction to sort
            them.
          items:
            type: string
            format: sort-by
        stages:
          type: array
          description: Filters for survey response stages.
          items:
            type: integer
            format: int64
        surveys:
          type: array
          description: |
            Filters for survey responses for the provided survey IDs.
          items:
            type: string
            format: id
      title: surveys-responses-list-request
    surveys-responses-list-response:
      type: object
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        survey_responses:
          type: array
          description: The list of the survey responses.
          items:
            $ref: '#/components/schemas/survey-response'
      required:
        - survey_responses
      title: surveys-responses-list-response
      x-go-name: SurveysResponsesListResponseBody
    surveys-responses-update-request:
      type: object
      properties:
        dispatch_id:
          type: string
          description: The unique ID associated with the dispatched survey.
          format: id
        response:
          type: object
          description: Survey response submitted for the object.
        response_channel:
          type: integer
          description: |
            The source channel ordinal which recorded the survey response.
          format: int64
        response_score:
          type: integer
          description: |
            The response score for the survey. Only applicable for CSAT and
            NPS.
          format: int32
          maximum: 10
          minimum: 1
        stage:
          type: integer
          description: The stage ordinal of the survey response object.
          format: int64
      required:
        - dispatch_id
      title: surveys-responses-update-request
    surveys-responses-update-response:
      type: object
      additionalProperties: false
      title: surveys-responses-update-response
      x-go-name: SurveysResponsesUpdateResponseBody
    surveys-send-request:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/surveys-send-request-email'
      required:
        - email
      title: surveys-send-request
    surveys-send-request-email:
      type: object
      properties:
        body:
          type: string
          description: Message body for a survey email.
          format: text
        recipients:
          type: array
          description: Recipients list for a survey email.
          items:
            type: string
            format: text
        sender:
          type: string
          description: Sender email address from which an email is sent.
          format: text
        subject:
          type: string
          description: Subject for an email where survey is sent.
          format: text
      required:
        - body
        - recipients
        - sender
        - subject
      title: surveys-send-request-email
    surveys-send-response:
      type: object
      additionalProperties: false
      title: surveys-send-response
      x-go-name: SurveysSendResponseBody
    surveys-submit-request:
      type: object
      properties:
        dispatch_id:
          type: string
          description: The unique ID associated with the dispatched survey.
          format: id
        dispatched_channels:
          type: array
          description: |
            The ordinals of the source channels on which the survey is sent.
          items:
            type: integer
            format: int64
        object:
          type: string
          description: |
            The ID of the object this survey is on (e.g. ticket, conversation,
            etc).
          example: ACC-12345
          format: id
        recipient:
          type: string
          description: |
            The unique ID associated with the recipient of the survey.
          example: DEVU-12345
          format: id
        response:
          type: object
          description: Survey response submitted for the object.
        response_score:
          type: integer
          description: |
            The response score for the survey. Only applicable for CSAT and
            NPS.
          format: int32
        source_channel:
          type: string
          description: |
            The source channel from which survey response is submitted.
          format: text
        stage:
          type: integer
          description: The stage ordinal of the survey response object.
          format: int64
        survey:
          type: string
          description: The ID of the survey to submit the response to.
          format: id
      required:
        - object
        - survey
      title: surveys-submit-request
    surveys-submit-response:
      type: object
      additionalProperties: false
      title: surveys-submit-response
      x-go-name: SurveysSubmitResponseBody
    surveys-update-request:
      type: object
      properties:
        description:
          type: string
          description: The updated description about the survey.
          format: text
          maxLength: 1000
        header:
          type: string
          description: Header of the survey.
          format: text
          maxLength: 1000
        id:
          type: string
          description: The ID of the survey to update.
          format: id
        introductory_text:
          type: string
          description: |
            The updated text posted when introducing the survey to the
            responder.
          format: text
          maxLength: 1000
        name:
          type: string
          description: The survey's updated name.
          format: text
          maxLength: 100
          minLength: 1
        response_text:
          type: string
          description: Text posted after the response is collected.
          format: text
          maxLength: 1000
        schema_with_metadata:
          type: array
          description: The updated schema with metadata for the survey.
          items:
            $ref: '#/components/schemas/survey-field-with-metadata'
        survey:
          type: string
          deprecated: true
          description: The ID of the survey to update.
          format: id
        title:
          type: string
          description: Title of the survey.
          format: text
          maxLength: 1000
      required:
        - id
      title: surveys-update-request
    surveys-update-response:
      type: object
      properties:
        survey:
          $ref: '#/components/schemas/survey'
      required:
        - survey
      title: surveys-update-response
      x-go-name: SurveysUpdateResponseBody
    sync-history:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            sync_run:
              $ref: '#/components/schemas/sync-run'
            sync_unit:
              type: string
              description: SyncUnit ID associated with this historical entry.
              format: id
      title: sync-history
    sync-metadata-filter:
      type: object
      properties:
        external_reference:
          type: array
          description: |
            Filters for issues with this specific external reference.
          items:
            type: string
            format: text
        last_sync_in:
          $ref: '#/components/schemas/sync-metadata-filter-sync-in-filter'
        last_sync_out:
          $ref: '#/components/schemas/sync-metadata-filter-sync-out-filter'
        origin_system:
          type: array
          description: |
            Filters for issues synced from this specific origin system.
          items:
            type: string
            format: text
      title: sync-metadata-filter
    sync-metadata-filter-sync-in-filter:
      type: object
      properties:
        status:
          type: array
          description: Filters for works with selected sync statuses.
          items:
            $ref: '#/components/schemas/sync-metadata-filter-sync-in-filter-status'
        sync_date:
          $ref: '#/components/schemas/date-filter'
        sync_history:
          type: array
          description: Filters for works modified with selected sync history.
          items:
            type: string
            format: id
        sync_unit:
          type: array
          description: Filters for works modified with selected sync units.
          items:
            type: string
            format: id
      title: sync-metadata-filter-sync-in-filter
    sync-metadata-filter-sync-in-filter-status:
      type: string
      enum:
        - failed
        - modified
        - staged
        - succeeded
    sync-metadata-filter-sync-out-filter:
      type: object
      properties:
        status:
          type: array
          description: Filters for works with selected sync statuses.
          items:
            $ref: '#/components/schemas/sync-metadata-filter-sync-out-filter-status'
        sync_date:
          $ref: '#/components/schemas/date-filter'
        sync_history:
          type: array
          description: Filters for works modified with selected sync history.
          items:
            type: string
            format: id
        sync_unit:
          type: array
          description: Filters for works modified with selected sync units.
          items:
            type: string
            format: id
      title: sync-metadata-filter-sync-out-filter
    sync-metadata-filter-sync-out-filter-status:
      type: string
      enum:
        - failed
        - modified
        - succeeded
    sync-progress:
      type: object
      description: Progress.
      properties:
        state:
          $ref: '#/components/schemas/sync-progress-state'
      title: sync-progress
    sync-progress-state:
      type: string
      description: The state of a sync progress.
      enum:
        - completed
        - delete_in_progress
        - deleted
        - deletion_error
        - extract_attachments
        - extract_attachments_error
        - extraction
        - extraction_error
        - loading
        - loading_attachments
        - loading_attachments_error
        - loading_error
        - recipe_discovery
        - recipe_discovery_error
        - recipe_discovery_waiting_for_user_input
        - starting
        - transformation
        - transformation_error
    sync-run:
      type: object
      description: Object for holding run-specific data.
      properties:
        ended_at:
          type: string
          description: The time when a sync was ended.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        mode:
          $ref: '#/components/schemas/sync-run-mode'
        progress:
          $ref: '#/components/schemas/sync-progress'
        started_at:
          type: string
          description: The time when a sync was started.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
      title: sync-run
    sync-run-mode:
      type: string
      description: The direction/mode of a sync run.
      enum:
        - initial
        - sync_from_devrev
        - sync_to_devrev
    sys-user:
      allOf:
        - $ref: '#/components/schemas/user-base'
      title: sys-user
    sys-user-summary:
      allOf:
        - $ref: '#/components/schemas/user-base-summary'
      title: sys-user-summary
    sys-users-list-request:
      type: object
      description: A request to get the list of system user's information.
      properties:
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        limit:
          type: integer
          description: |
            The maximum number of system users to return. Value can range from
            '1' to '100', with a default of '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        sort_by:
          type: array
          description: |
            Fields to sort the system users by and the direction to sort them.
          items:
            type: string
            format: sort-by
      title: sys-users-list-request
    sys-users-list-response:
      type: object
      description: The response to listing the system users.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        sys_users:
          type: array
          description: The list of system users.
          items:
            $ref: '#/components/schemas/sys-user'
      required:
        - sys_users
      title: sys-users-list-response
      x-go-name: SysUsersListResponseBody
    sys-users-update-request:
      type: object
      description: Request to update information of the system user.
      properties:
        display_name:
          type: string
          description: Updated display name for the system user.
          format: text
        display_picture:
          type: string
          description: Artifact ID of the system user's new display picture.
          example: ARTIFACT-12345
          format: id
          nullable: true
        full_name:
          type: string
          description: Updated full name for the system user.
          format: text
        id:
          type: string
          description: The ID of system user to update.
          format: id
      required:
        - id
      title: sys-users-update-request
    sys-users-update-response:
      type: object
      description: Updated Sys user object.
      properties:
        sys_user:
          $ref: '#/components/schemas/sys-user'
      required:
        - sys_user
      title: sys-users-update-response
      x-go-name: SysUsersUpdateResponseBody
    tag:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            allowed_values:
              type: array
              description: |
                The allowed values for the tag, where a value is provided when a
                tag is associated with an object. If empty, then no value should be
                provided when the association is made.
              items:
                type: string
                format: text
            description:
              type: string
              description: |
                An informative description for the tag that should provide context
                on the tag's purpose and usage.
              format: text
            name:
              type: string
              description: |
                The name of the tag, which denotes the logical concept by which all
                tagged objects will be associated. The name is guaranteed to be
                unique.
              format: text
          required:
            - name
      title: tag
    tag-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            name:
              type: string
              description: |
                The name of the tag, which denotes the logical concept by which all
                tagged objects will be associated. The name is guaranteed to be
                unique.
              format: text
          required:
            - name
      title: tag-summary
    tag-with-value:
      type: object
      properties:
        tag:
          $ref: '#/components/schemas/tag-summary'
        value:
          type: string
          description: The value for the object's association with the tag.
          format: text
      required:
        - tag
      title: tag-with-value
    tag-with-value-filter:
      type: object
      properties:
        id:
          type: string
          description: The ID of the tag.
          example: TAG-12345
          format: id
        value:
          type: string
          description: |
            The value for the object's association with the tag. If specified,
            the value must be one that's specified in the tag's allowed values.
          format: text
      title: tag-with-value-filter
    tags-create-request:
      type: object
      description: The request to create a new tag.
      properties:
        allowed_values:
          type: array
          description: |
            The allowed values for the tag, or empty if no values are
            permitted.
          items:
            type: string
            format: text
        description:
          type: string
          description: The description for the tag.
          format: text
        name:
          type: string
          description: |
            The name for the tag, which must be unique across all tags.
          format: text
      required:
        - name
      title: tags-create-request
    tags-create-response:
      type: object
      description: The response to creating a new tag.
      properties:
        tag:
          $ref: '#/components/schemas/tag'
      required:
        - tag
      title: tags-create-response
      x-go-name: TagsCreateResponseBody
    tags-delete-request:
      type: object
      description: The request to delete a tag.
      properties:
        id:
          type: string
          description: The ID of the tag to delete.
          example: TAG-12345
          format: id
      required:
        - id
      title: tags-delete-request
    tags-delete-response:
      type: object
      additionalProperties: false
      description: The response for deleting a tag.
      title: tags-delete-response
      x-go-name: TagsDeleteResponseBody
    tags-get-request:
      type: object
      description: The request to get a tag's information.
      properties:
        id:
          type: string
          description: The requested tag's ID.
          example: TAG-12345
          format: id
      required:
        - id
      title: tags-get-request
    tags-get-response:
      type: object
      description: The response to getting a tag's information.
      properties:
        tag:
          $ref: '#/components/schemas/tag'
      required:
        - tag
      title: tags-get-response
      x-go-name: TagsGetResponseBody
    tags-list-request:
      type: object
      description: The request to get information about a list of tags.
      properties:
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        limit:
          type: integer
          description: |
            The maximum number of tags to return. The default is '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        name:
          type: array
          description: Filters for tags with the provided names.
          items:
            type: string
            format: text
        sort_by:
          type: array
          description: Fields to sort tags by and the direction to sort them.
          items:
            type: string
            format: sort-by
      title: tags-list-request
    tags-list-response:
      type: object
      description: The response to listing the tags.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        tags:
          type: array
          description: The list of tags.
          items:
            $ref: '#/components/schemas/tag'
      required:
        - tags
      title: tags-list-response
      x-go-name: TagsListResponseBody
    tags-update-allowed-values:
      type: object
      description: Specifies an update to a tag's allowed values.
      properties:
        set:
          type: array
          description: Sets the allowed values for the tag.
          items:
            type: string
            format: text
      title: tags-update-allowed-values
    tags-update-request:
      type: object
      description: The request to update a tag.
      properties:
        allowed_values:
          $ref: '#/components/schemas/tags-update-allowed-values'
        description:
          type: string
          description: The updated description of the tag.
          format: text
        id:
          type: string
          description: The ID of the tag to update.
          example: TAG-12345
          format: id
        name:
          type: string
          description: |
            The updated name of the tag. The name must be unique across all
            tags.
          format: text
      required:
        - id
      title: tags-update-request
    tags-update-response:
      type: object
      description: The response for updating a tag.
      properties:
        tag:
          $ref: '#/components/schemas/tag'
      required:
        - tag
      title: tags-update-response
      x-go-name: TagsUpdateResponseBody
    ticket:
      allOf:
        - $ref: '#/components/schemas/work-base'
        - type: object
          properties:
            account:
              $ref: '#/components/schemas/account-summary'
            channels:
              type: array
              description: Channels of the ticket.
              items:
                $ref: '#/components/schemas/ticket-channels'
            channels_v2:
              type: array
              description: Channel IDs of the ticket.
              items:
                $ref: '#/components/schemas/external-communication-channel-summary'
            group:
              $ref: '#/components/schemas/group-summary'
            needs_response:
              type: boolean
              description: Whether the ticket needs a response.
            rev_org:
              $ref: '#/components/schemas/org-summary'
            sentiment:
              $ref: '#/components/schemas/enum-value'
            sentiment_modified_date:
              type: string
              description: Timestamp when the sentiment was last modified.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
            sentiment_summary:
              type: string
              description: Summary justifying the sentiment.
              format: text
            severity:
              $ref: '#/components/schemas/ticket-severity'
            sla_summary:
              $ref: '#/components/schemas/archetype-sla-summary'
            sla_tracker:
              $ref: '#/components/schemas/sla-tracker-summary'
            source_channel:
              type: string
              description: Source channel of the ticket.
              format: text
            source_channel_v2:
              $ref: '#/components/schemas/external-communication-channel-summary'
            visibility:
              $ref: '#/components/schemas/enum-value'
      title: ticket
    ticket-channels:
      type: string
      description: Channels of the ticket.
      enum:
        - email
        - plug
        - slack
        - twilio
        - twilio_sms
    ticket-severity:
      type: string
      description: Severity of the ticket.
      enum:
        - blocker
        - high
        - low
        - medium
    ticket-summary:
      allOf:
        - $ref: '#/components/schemas/work-base-summary'
        - type: object
          properties:
            account:
              $ref: '#/components/schemas/account-summary'
            rev_org:
              $ref: '#/components/schemas/org-summary'
            severity:
              $ref: '#/components/schemas/ticket-severity'
      title: ticket-summary
    timeline-comment:
      allOf:
        - $ref: '#/components/schemas/timeline-entry-base'
        - type: object
          properties:
            artifacts:
              type: array
              description: The artifacts for the comment.
              items:
                $ref: '#/components/schemas/artifact-summary'
            body:
              type: string
              description: |
                The comment's body. If the comment has been deleted, then no body
                will appear in the response.
              format: text
            body_type:
              $ref: '#/components/schemas/timeline-comment-body-type'
            references:
              type: array
              description: |
                Summary information about objects that are referenced in the
                comment.
              items:
                $ref: '#/components/schemas/atom-summary'
            snap_kit_body:
              $ref: '#/components/schemas/timeline-snap-kit-body'
            snap_widget_body:
              type: array
              description: The snap widget body of the comment.
              items:
                $ref: '#/components/schemas/snap-widget'
      title: timeline-comment
    timeline-comment-body-type:
      type: string
      description: The type of the body to use for the comment.
      enum:
        - data
        - snap_kit
        - snap_widget
        - text
    timeline-comment-summary:
      allOf:
        - $ref: '#/components/schemas/timeline-entry-base-summary'
      title: timeline-comment-summary
    timeline-entries-create-request:
      type: object
      description: The request to create a timeline entry for an object.
      discriminator:
        mapping:
          timeline_comment: '#/components/schemas/timeline-entries-create-request-timeline-comment'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/timeline-entries-create-request-timeline-comment'
      properties:
        type:
          $ref: '#/components/schemas/timeline-entries-create-request-type'
        expires_at:
          type: string
          description: |
            If set, then the entry is ephemeral and will be deleted after the
            provided time. The minimum value should be at least a minute more
            than the current timestamp.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        object:
          type: string
          description: The ID of the object to create the timeline entry for.
          example: PROD-12345
          format: id
        private_to:
          type: array
          description: |
            If the visibility of the entry is private, this specifies the users
            that the entry is private to. Note the creator is always implicitly
            included in this list.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        visibility:
          $ref: '#/components/schemas/timeline-entry-visibility'
      required:
        - object
        - type
      title: timeline-entries-create-request
    timeline-entries-create-request-timeline-comment:
      type: object
      properties:
        artifacts:
          type: array
          description: The IDs of the artifacts attached to the comment.
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
          maxItems: 50
        body:
          type: string
          description: The comment's body.
          format: text
        body_type:
          $ref: '#/components/schemas/timeline-comment-body-type'
        snap_kit_body:
          $ref: '#/components/schemas/timeline-snap-kit-body'
      title: timeline-entries-create-request-timeline-comment
    timeline-entries-create-request-type:
      type: string
      enum:
        - timeline_comment
    timeline-entries-create-response:
      type: object
      description: The response to creating a timeline entry for an object.
      properties:
        timeline_entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
        - timeline_entry
      title: timeline-entries-create-response
      x-go-name: TimelineEntriesCreateResponseBody
    timeline-entries-delete-request:
      type: object
      description: The request to delete a timeline entry from an object.
      properties:
        id:
          type: string
          description: The ID of the timeline entry to delete.
          example: don:core:dvrv-us-1:devo/example:ticket/123:comment/comment-id
          format: id
      required:
        - id
      title: timeline-entries-delete-request
    timeline-entries-delete-response:
      type: object
      additionalProperties: false
      description: The response to deleting a timeline entry from an object.
      title: timeline-entries-delete-response
      x-go-name: TimelineEntriesDeleteResponseBody
    timeline-entries-get-request:
      type: object
      description: The request to get a timeline entry.
      properties:
        id:
          type: string
          description: The ID of the timeline entry to get.
          example: don:core:dvrv-us-1:devo/example:ticket/123:comment/comment-id
          format: id
      required:
        - id
      title: timeline-entries-get-request
    timeline-entries-get-response:
      type: object
      description: The request to getting a timeline entry.
      properties:
        timeline_entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
        - timeline_entry
      title: timeline-entries-get-response
      x-go-name: TimelineEntriesGetResponseBody
    timeline-entries-list-request:
      type: object
      description: The request to list timeline entries for an object.
      properties:
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        limit:
          type: integer
          description: |
            The maximum number of entries to return. If not set, then this
            defaults to `50`.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        object:
          type: string
          description: The ID of the object to list timeline entries for.
          example: PROD-12345
          format: id
        visibility:
          type: array
          description: |
            The visibility of the timeline entries to filter for. Note this is
            a strict filter, such that only entries with the exact visibilities
            specified will be returned.
          items:
            $ref: '#/components/schemas/timeline-entry-visibility'
      required:
        - object
      title: timeline-entries-list-request
    timeline-entries-list-response:
      type: object
      description: The response to listing timeline entries for an object.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        timeline_entries:
          type: array
          description: The timeline entries for the object.
          items:
            $ref: '#/components/schemas/timeline-entry'
      required:
        - timeline_entries
      title: timeline-entries-list-response
      x-go-name: TimelineEntriesListResponseBody
    timeline-entries-update-request:
      type: object
      description: The request to update a timeline entry.
      discriminator:
        mapping:
          timeline_comment: '#/components/schemas/timeline-entries-update-request-timeline-comment'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/timeline-entries-update-request-timeline-comment'
      properties:
        type:
          $ref: '#/components/schemas/timeline-entries-update-request-type'
        id:
          type: string
          description: The ID of the timeline entry to update.
          example: don:core:dvrv-us-1:devo/example:ticket/123:comment/comment-id
          format: id
      required:
        - id
        - type
      title: timeline-entries-update-request
    timeline-entries-update-request-timeline-comment:
      type: object
      properties:
        artifacts:
          $ref: '#/components/schemas/timeline-entries-update-request-timeline-comment-artifacts'
        body:
          type: string
          description: The updated comment's body.
          format: text
        body_type:
          $ref: '#/components/schemas/timeline-comment-body-type'
        snap_kit_body:
          $ref: '#/components/schemas/timeline-snap-kit-body'
      title: timeline-entries-update-request-timeline-comment
    timeline-entries-update-request-timeline-comment-artifacts:
      type: object
      properties:
        add:
          type: array
          description: |
            Adds the provided artifacts to the comment. An artifact cannot be
            added more than once, i.e. nothing is done if the artifact is
            already attached. Mutually exclusive with `set`.
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
          maxItems: 10
        remove:
          type: array
          description: |
            Removes the provided artifacts from the comment. If an artifact is
            not present, then it's ignored. Mututally exclusive with `set`.
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
          maxItems: 10
        set:
          type: array
          description: Sets the field to the provided artifacts.
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
          maxItems: 50
      title: timeline-entries-update-request-timeline-comment-artifacts
    timeline-entries-update-request-type:
      type: string
      enum:
        - timeline_comment
    timeline-entries-update-response:
      type: object
      description: The response to updating a timeline entry.
      properties:
        timeline_entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
        - timeline_entry
      title: timeline-entries-update-response
      x-go-name: TimelineEntriesUpdateResponseBody
    timeline-entry:
      type: object
      discriminator:
        mapping:
          timeline_comment: '#/components/schemas/timeline-comment'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/timeline-comment'
      properties:
        type:
          $ref: '#/components/schemas/timeline-entry-type'
      required:
        - type
      title: timeline-entry
    timeline-entry-base:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            object:
              type: string
              description: The object that the Timeline entry belongs to.
              format: id
            object_display_id:
              type: string
              description: |
                The display ID of the object that the Timeline entry belongs to.
              format: text
            object_type:
              $ref: '#/components/schemas/timeline-entry-object-type'
            visibility:
              $ref: '#/components/schemas/timeline-entry-visibility'
          required:
            - object
            - object_display_id
      title: timeline-entry-base
    timeline-entry-base-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
      title: timeline-entry-base-summary
    timeline-entry-object-type:
      type: string
      description: The type of object that the Timeline entry belongs to.
      enum:
        - article
        - capability
        - conversation
        - enhancement
        - feature
        - issue
        - product
        - rev_org
        - rev_user
        - ticket
        - timeline_comment
    timeline-entry-type:
      type: string
      enum:
        - timeline_comment
    timeline-entry-visibility:
      type: string
      description: |
        The visibility of the entry. If 'private', then the entry is only
        visible to the creator, 'internal' is visible with the Dev
        organization, 'external' is visible to the Dev organzation and Rev
        users, and 'public' is visible to all. If not set, then the default
        visibility is 'external'.
      enum:
        - external
        - internal
        - private
        - public
    timeline-snap-kit-body:
      type: object
      description: Snap Kit Body of the comment.
      properties:
        body:
          type: object
          description: The JSON body of the SnapKit.
        snap_in_action_name:
          type: string
          description: |
            The name of an action defined in the SnapIn. The combination of
            snap_in_id and snap_in_action_name uniquely identifies the
            interaction object which is to be called when actions on a snapkit
            element is taken.
          format: text
        snap_in_id:
          type: string
          description: ID of the snap-in which created the SnapKit.
          format: text
      title: timeline-snap-kit-body
    update-command-action:
      type: object
      properties:
        action_details:
          $ref: '#/components/schemas/update-command-action-details'
        artifacts:
          type: array
          description: IDs of the new artifact items
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
        code:
          type: string
          description: |
            The raw code to execute, defined in the language specified by
            executor
          format: text
        executor_config:
          type: object
          description: Executor specific config
        message:
          type: string
          description: |
            The message to populate in discussion box, when the command is
            selected to execute.
          format: text
        snap_in_function_id:
          type: string
          description: |
            Function containing logic for the command. If function ID is
            specified the executor config is ignored and command is executed by
            functions.
          format: id
        template_type:
          $ref: '#/components/schemas/command-action-template-type'
      title: update-command-action
    update-command-action-details:
      type: object
      properties:
        object_update_payload:
          type: object
          description: |
            The payload to update the object in context upon command execution.
      title: update-command-action-details
    update-command-surface:
      type: object
      properties:
        object_types:
          type: array
          description: Objects types on which a command can be invoked
          items:
            $ref: '#/components/schemas/command-surface-object-types'
        surface:
          $ref: '#/components/schemas/command-surface-surface'
      title: update-command-surface
    update-stage-node:
      type: object
      properties:
        is_deprecated:
          type: boolean
          description: Whether this stage is deprecated.
        is_start:
          type: boolean
          description: Whether this is the start stage.
        stage_id:
          type: string
          description: The ID of the stage.
          format: id
        transitions:
          type: array
          description: List of transitions from this stage.
          items:
            $ref: '#/components/schemas/update-stage-transition'
      required:
        - stage_id
      title: update-stage-node
    update-stage-transition:
      type: object
      properties:
        target_stage_id:
          type: string
          description: The ID of the target stage.
          format: id
        ui:
          $ref: '#/components/schemas/update-stage-ui-metadata'
      required:
        - target_stage_id
      title: update-stage-transition
    update-stage-ui-metadata:
      type: object
      properties:
        is_hidden:
          type: boolean
          description: Whether the stage is hidden.
      title: update-stage-ui-metadata
    user-base:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            display_name:
              type: string
              description: |
                The user's display name. The name is non-unique and mutable.
              format: text
            display_picture:
              $ref: '#/components/schemas/artifact-summary'
            email:
              type: string
              description: Email address of the user.
              format: text
            full_name:
              type: string
              description: Full name of the user.
              format: text
            phone_numbers:
              type: array
              description: Phone numbers of the user.
              items:
                type: string
                format: text
            primary_identity:
              $ref: '#/components/schemas/user-summary'
            state:
              $ref: '#/components/schemas/user-state'
      title: user-base
    user-base-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            display_name:
              type: string
              description: |
                The user's display name. The name is non-unique and mutable.
              format: text
            display_picture:
              $ref: '#/components/schemas/artifact-summary'
            email:
              type: string
              description: Email address of the user.
              format: text
            full_name:
              type: string
              description: Full name of the user.
              format: text
            state:
              $ref: '#/components/schemas/user-state'
      title: user-base-summary
    user-skill:
      type: object
      description: Skill associated with the user.
      properties:
        name:
          type: string
          description: Name of the skill.
          format: text
      title: user-skill
    user-state:
      type: string
      description: State of the user.
      enum:
        - active
        - deactivated
        - deleted
        - locked
        - shadow
        - unassigned
    user-summary:
      type: object
      discriminator:
        mapping:
          dev_user: '#/components/schemas/dev-user-summary'
          rev_user: '#/components/schemas/rev-user-summary'
          service_account: '#/components/schemas/service-account-summary'
          sys_user: '#/components/schemas/sys-user-summary'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/dev-user-summary'
        - $ref: '#/components/schemas/rev-user-summary'
        - $ref: '#/components/schemas/service-account-summary'
        - $ref: '#/components/schemas/sys-user-summary'
      properties:
        type:
          $ref: '#/components/schemas/user-type'
      required:
        - type
      title: user-summary
    user-type:
      type: string
      enum:
        - dev_user
        - rev_user
        - service_account
        - sys_user
    view-override:
      type: object
      description: UI hint overrides for a view.
      properties:
        decimal_places:
          type: integer
          description: |
            Number of decimal places to show. Only applicable for number
            fields.
          format: int32
        display_name:
          type: string
          description: The display name of the field.
          format: text
        is_groupable:
          type: boolean
          description: Whether the field is groupable in the UI.
        is_hidden:
          type: boolean
          description: Whether the field is hidden in the UI.
        order:
          type: integer
          description: Relative order in which the field is shown.
          format: int32
        placeholder:
          type: string
          description: A placeholder for the field.
          format: text
        tooltip:
          type: string
          description: Tooltip for the field.
          format: text
        use_shorthand_notation:
          type: boolean
          description: |
            Whether to use shorthand notation. Example, 1K instead of 1000.
            Only applicable for number fields.
        view_name:
          type: string
          description: The name of the view.
          format: text
      title: view-override
    vista:
      type: object
      description: Represents a collection of DevRev objects.
      discriminator:
        mapping:
          curated: '#/components/schemas/curated-vista'
          dynamic: '#/components/schemas/dynamic-vista'
          grouped: '#/components/schemas/grouped-vista'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/curated-vista'
        - $ref: '#/components/schemas/dynamic-vista'
        - $ref: '#/components/schemas/grouped-vista'
      properties:
        type:
          $ref: '#/components/schemas/vista-type'
      required:
        - type
      title: vista
    vista-base:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            is_default:
              type: boolean
              description: Boolean to specify whether it's a default Vista or not.
            name:
              type: string
              description: Name of the vista.
              format: text
            shared_with:
              type: array
              description: Users and groups associated with vista.
              items:
                $ref: '#/components/schemas/shared-with-membership'
          required:
            - name
      title: vista-base
    vista-flavor:
      type: string
      description: Denotes the use case of the vista.
      enum:
        - nnl
        - sprint_board
        - support_inbox
    vista-group:
      type: object
      description: Represents a vista group item.
      discriminator:
        mapping:
          conversations: '#/components/schemas/conversations-vista-group-item'
          parts: '#/components/schemas/parts-vista-group-item'
          works: '#/components/schemas/works-vista-group-item'
        propertyName: object_type
      oneOf:
        - $ref: '#/components/schemas/conversations-vista-group-item'
        - $ref: '#/components/schemas/parts-vista-group-item'
        - $ref: '#/components/schemas/works-vista-group-item'
      properties:
        object_type:
          $ref: '#/components/schemas/grouped-vista-filter-type'
      required:
        - object_type
      title: vista-group
    vista-group-base:
      type: object
      properties:
        end_date:
          type: string
          description: Timestamp when the vista group item ends.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        id:
          type: string
          description: Globally unique object ID.
          format: id
        name:
          type: string
          description: Name of the group.
          format: text
        parent:
          $ref: '#/components/schemas/vista-group-base-vista-parent-composite'
        start_date:
          type: string
          description: Timestamp when the vista group item starts.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        state:
          $ref: '#/components/schemas/vista-group-item-state'
      required:
        - id
        - name
      title: vista-group-base
    vista-group-base-vista-parent-composite:
      type: object
      properties:
        type:
          type: string
          description: Type of the parent vista.
          format: text
        display_id:
          type: string
          description: Human-readable object ID unique to the Dev organization.
          format: text
        flavor:
          $ref: '#/components/schemas/vista-flavor'
        id:
          type: string
          description: Parent vista ID.
          example: VISTA-12345
          format: id
        name:
          type: string
          description: Name of the parent vista.
          format: text
      required:
        - display_id
        - id
        - name
        - type
      title: vista-group-base-vista-parent-composite
    vista-group-item-group-object-type:
      type: string
      description: |
        Type of DevRev object for which the vista group item is applicable.
      enum:
        - conversation
        - part
        - work
    vista-group-item-state:
      type: string
      description: Defines the state of the group item.
      enum:
        - active
        - completed
        - planned
    vista-group-item-summary:
      type: object
      description: Vista group item.
      properties:
        type:
          $ref: '#/components/schemas/vista-group-item-type'
        end_date:
          type: string
          description: Timestamp when the vista ends.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        id:
          type: string
          description: ID of the group item in don v2 format.
          format: id
        name:
          type: string
          description: Name of the group.
          format: text
        start_date:
          type: string
          description: Timestamp when the vista starts.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        state:
          $ref: '#/components/schemas/vista-group-item-state'
      required:
        - id
        - name
        - type
      title: vista-group-item-summary
    vista-group-item-type:
      type: string
      description: Type of the group object.
      enum:
        - curated
        - dynamic
    vista-type:
      type: string
      description: Type of vista object.
      enum:
        - curated
        - dynamic
        - grouped
    vistas-delete-request:
      type: object
      description: The request to delete a vista.
      properties:
        id:
          type: string
          description: The ID of the vista to delete.
          example: VISTA-12345
          format: id
      required:
        - id
      title: vistas-delete-request
    vistas-delete-response:
      type: object
      additionalProperties: false
      description: The response when deleting a vista.
      title: vistas-delete-response
      x-go-name: VistasDeleteResponseBody
    vistas-get-request:
      type: object
      description: The request to get a vista's information.
      properties:
        id:
          type: string
          description: The vista's ID.
          example: VISTA-12345
          format: id
      required:
        - id
      title: vistas-get-request
    vistas-get-response:
      type: object
      description: The response to getting a vista's information.
      properties:
        vista:
          $ref: '#/components/schemas/vista'
      required:
        - vista
      title: vistas-get-response
      x-go-name: VistasGetResponseBody
    vistas-groups-delete-request:
      type: object
      properties:
        id:
          type: string
          description: ID of the vista group item to be deleted.
          format: id
      required:
        - id
      title: vistas-groups-delete-request
    vistas-groups-delete-response:
      type: object
      additionalProperties: false
      title: vistas-groups-delete-response
      x-go-name: VistasGroupsDeleteResponseBody
    vistas-groups-get-request:
      type: object
      description: The request to get a vista group item's information.
      properties:
        id:
          type: string
          description: The vista group item's ID.
          format: id
      required:
        - id
      title: vistas-groups-get-request
    vistas-groups-get-response:
      type: object
      description: The response to getting a vista group item's information.
      properties:
        vista_group:
          $ref: '#/components/schemas/vista-group'
      required:
        - vista_group
      title: vistas-groups-get-response
      x-go-name: VistasGroupsGetResponseBody
    vistas-groups-list-request:
      type: object
      properties:
        type:
          type: array
          description: Filters for vista group items of the specific type.
          items:
            $ref: '#/components/schemas/group-item-type'
        ancestor_part:
          type: array
          description: |
            Filters for vista group items which have one of the parts linked as
            its ancestor part or primary part.
          example:
            - PROD-12345
          items:
            type: string
            format: id
        applies_to_part:
          $ref: '#/components/schemas/applies-to-part-filter'
        created_by:
          type: array
          description: |
            Filter for vistas group item created by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        created_date:
          $ref: '#/components/schemas/date-filter'
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        end_date:
          $ref: '#/components/schemas/date-filter'
        group_object_type:
          type: array
          description: |
            Filters for vista group items of the specific group object type.
          items:
            $ref: '#/components/schemas/vista-group-item-group-object-type'
        limit:
          type: integer
          description: |
            The request to get information about a list of vista groups.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-filter'
        parent_id:
          type: array
          description: Parent ID of the vista group item.
          example:
            - VISTA-12345
          items:
            type: string
            format: id
        sort_by:
          type: array
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
            format: sort-by
        start_date:
          $ref: '#/components/schemas/date-filter'
        state:
          type: array
          description: Denotes the state of the vista group item.
          items:
            $ref: '#/components/schemas/vista-group-item-state'
      title: vistas-groups-list-request
    vistas-groups-list-response:
      type: object
      description: The response to listing the vistas group items.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        vista_group:
          type: array
          description: List of vista group items.
          items:
            $ref: '#/components/schemas/vista-group'
      title: vistas-groups-list-response
      x-go-name: VistasGroupsListResponseBody
    vistas-list-request:
      type: object
      description: The request to get information about a list of vistas.
      properties:
        type:
          type: array
          description: Filters for vistas of the specific type.
          items:
            $ref: '#/components/schemas/vista-type'
        created_by:
          type: array
          description: Filters for vistas created by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        flavor:
          type: array
          description: Filters for vistas of specific flavor.
          items:
            $ref: '#/components/schemas/grouped-vista-flavor'
        is_default:
          type: boolean
          description: Whether the default vistas should be fetched or not.
        limit:
          type: integer
          description: |
            The maximum number of vistas to return. The default is '50', the
            maximum is '100'.
          format: int32
        members:
          type: array
          description: Filters for vistas accessible to the input members.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        mode:
          $ref: '#/components/schemas/list-mode'
        object_type:
          type: array
          description: |
            Filters for vistas of specific object types like works, parts etc.
          items:
            $ref: '#/components/schemas/dynamic-vista-filter-type'
        shared_with:
          type: array
          description: Filter for vistas accessible to the input members.
          items:
            $ref: '#/components/schemas/shared-with-membership-filter'
        skip_items:
          type: boolean
          description: |
            Denotes whether to skip items of vista_group_item in response.
        sort_by:
          type: array
          description: |
            Fields to sort the vistas by and the direction to sort them.
          items:
            type: string
            format: sort-by
        state:
          type: array
          description: Denotes the state of the vista group item.
          items:
            $ref: '#/components/schemas/vista-group-item-state'
      title: vistas-list-request
    vistas-list-response:
      type: object
      description: The response to listing the vistas.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        vistas:
          type: array
          description: The list of vistas.
          items:
            $ref: '#/components/schemas/vista'
      required:
        - vistas
      title: vistas-list-response
      x-go-name: VistasListResponseBody
    web-crawler-job:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            accept_regexs:
              type: array
              description: |
                URL patterns to accept (an empty value means accept all URLs)
                subject to explicit rejects (if any).
              items:
                type: string
                format: text
            description:
              type: string
              description: Description of the web crawler job.
              format: text
            domain_names:
              type: array
              description: |
                Domain names to crawl URLs for. If this field is not set, it is
                inferred based on the domain names in the seed set of URLs.
              items:
                type: string
                format: text
            frequency:
              type: integer
              description: Number of days between re-sync job runs.
              format: int32
            max_depth:
              type: integer
              description: |
                Specifies the maximum recursion depth from the seed URL that we
                will crawl. If this value is -1, there is no limit on recursion
                depth.
              format: int32
            no_parent:
              type: boolean
              description: |
                Specifies whether we should never ascend to the parent directory
                when crawling from a seed set URL.
            notify_on_complete:
              type: boolean
              description: Whether to notify via email.
            num_bytes:
              type: integer
              description: Number of bytes stored.
              format: int32
            num_timeout_urls:
              type: integer
              description: Number of URLs that timed out.
              format: int32
            num_urls_scraped:
              type: integer
              description: Number of URLs whose webpage are scraped.
              format: int32
            reject_regexs:
              type: array
              description: |
                URL patterns to reject (an empty value means no explicit
                rejections).
              items:
                type: string
                format: text
            sitemap_index_urls:
              type: array
              description: |
                Sitemap index URLs. The URLs in the referenced sitemaps add to the
                seed set of URLs to crawl from.
              items:
                type: string
                format: text
            sitemap_urls:
              type: array
              description: |
                Sitemap URLs. The URLs in the sitemap add to the seed set of URLs
                to crawl from.
              items:
                type: string
                format: text
            state:
              $ref: '#/components/schemas/web-crawler-job-state'
            urls:
              type: array
              description: URLs to add to the seed set of URLs to crawl from.
              items:
                type: string
                format: text
            user_agent:
              type: string
              description: User agent to use for crawling websites in this job.
              format: text
      title: web-crawler-job
    web-crawler-job-state:
      type: string
      description: State of the web crawler job.
      enum:
        - aborted
        - completed
        - running
        - scheduled
        - suspended
    web-crawler-jobs-control-request:
      type: object
      description: The request to resume a web crawler job.
      properties:
        action:
          $ref: '#/components/schemas/web-crawler-jobs-control-request-action'
        id:
          type: string
          description: The ID of the job.
          format: id
      required:
        - action
        - id
      title: web-crawler-jobs-control-request
    web-crawler-jobs-control-request-action:
      type: string
      enum:
        - abort
        - pause
        - resume
    web-crawler-jobs-control-response:
      type: object
      description: The response to resume a web crawler job.
      properties:
        web_crawler_job:
          $ref: '#/components/schemas/web-crawler-job'
      required:
        - web_crawler_job
      title: web-crawler-jobs-control-response
      x-go-name: WebCrawlerJobsControlResponseBody
    web-crawler-jobs-create-request:
      type: object
      description: |
        The request to create a web crawler job which will create webpages as
        artifacts.
      properties:
        accept_regex:
          type: string
          deprecated: true
          description: The regex a URL must satisfy to be crawled.
          format: text
        accept_regexes:
          type: array
          description: The list of regexes a URL must satisfy to be crawled.
          items:
            type: string
            format: text
          maxItems: 100
        applies_to_parts:
          type: array
          description: |
            The parts to which created webpage/articles during this crawler job
            will be linked to.
          example:
            - PROD-12345
          items:
            type: string
            format: id
          maxItems: 1
          minItems: 1
        description:
          type: string
          description: The description of the job.
          format: text
        domain_names:
          type: array
          description: The list of allowed domain names to crawl.
          items:
            type: string
            format: text
        frequency:
          type: integer
          description: |
            Number of days between re-sync job runs. If 0, the job will run
            only once.
          format: int32
        max_depth:
          type: integer
          description: The maximum depth to crawl.
          format: int32
        notify_on_complete:
          type: boolean
          description: |
            Whether to notify the user when the job is complete. Default is
            true.
        reject_regex:
          type: string
          deprecated: true
          description: |
            The regex which if satisfied by a URL results in rejection of the
            URL. If a URL matches both accept and reject regexes, it is
            rejected.
          format: text
        reject_regexes:
          type: array
          description: |
            The list of regexes which if satisfied by a URL results in
            rejection of the URL. If a URL matches both accept and reject
            regexes, it is rejected.
          items:
            type: string
            format: text
          maxItems: 100
        sitemap_index_urls:
          type: array
          description: The list of sitemap index URLs to crawl.
          items:
            type: string
            format: text
          maxItems: 2
        sitemap_urls:
          type: array
          description: The list of sitemap URLs to crawl.
          items:
            type: string
            format: text
          maxItems: 2
        urls:
          type: array
          description: The list of URLs to crawl.
          items:
            type: string
            format: text
          maxItems: 50
        user_agent:
          type: string
          description: User agent to use for crawling websites in this job.
          format: text
          maxLength: 1024
      required:
        - applies_to_parts
      title: web-crawler-jobs-create-request
    web-crawler-jobs-create-response:
      type: object
      description: The response to create a web crawler job.
      properties:
        web_crawler_job:
          $ref: '#/components/schemas/web-crawler-job'
      required:
        - web_crawler_job
      title: web-crawler-jobs-create-response
      x-go-name: WebCrawlerJobsCreateResponseBody
    web-crawler-jobs-get-request:
      type: object
      description: The request to get a web crawler job.
      properties:
        id:
          type: string
          description: The ID of the job.
          format: id
      required:
        - id
      title: web-crawler-jobs-get-request
    web-crawler-jobs-get-response:
      type: object
      description: The response to get a web crawler job.
      properties:
        web_crawler_job:
          $ref: '#/components/schemas/web-crawler-job'
      required:
        - web_crawler_job
      title: web-crawler-jobs-get-response
      x-go-name: WebCrawlerJobsGetResponseBody
    web-crawler-jobs-list-request:
      type: object
      description: The request to list web crawler jobs.
      properties:
        created_by:
          type: array
          description: |
            Filters for web crawler jobs created by any of the provided users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        created_date:
          $ref: '#/components/schemas/date-filter'
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        limit:
          type: integer
          description: |
            The maximum number of web crawler jobs to return. The default is
            '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-filter'
      title: web-crawler-jobs-list-request
    web-crawler-jobs-list-response:
      type: object
      description: The response to list web crawler jobs.
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        web_crawler_jobs:
          type: array
          description: The list of jobs.
          items:
            $ref: '#/components/schemas/web-crawler-job'
      required:
        - web_crawler_jobs
      title: web-crawler-jobs-list-response
      x-go-name: WebCrawlerJobsListResponseBody
    webhook:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            event_types:
              type: array
              description: The event types that the webhook will receive.
              items:
                $ref: '#/components/schemas/webhook-event-type'
            secret:
              type: string
              description: The secret to use for verifying webhook events.
              format: byte
            status:
              $ref: '#/components/schemas/webhook-status'
            url:
              type: string
              description: The URL of the webhook endpoint.
              format: text
          required:
            - secret
            - status
            - url
      title: webhook
    webhook-event-request:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/webhook-event-type'
        account_created:
          $ref: '#/components/schemas/event-account-created'
        account_deleted:
          $ref: '#/components/schemas/event-account-deleted'
        account_updated:
          $ref: '#/components/schemas/event-account-updated'
        ai_agent_response:
          $ref: '#/components/schemas/event-ai-agent-response'
        article_created:
          $ref: '#/components/schemas/event-article-created'
        article_deleted:
          $ref: '#/components/schemas/event-article-deleted'
        article_updated:
          $ref: '#/components/schemas/event-article-updated'
        conversation_created:
          $ref: '#/components/schemas/event-conversation-created'
        conversation_deleted:
          $ref: '#/components/schemas/event-conversation-deleted'
        conversation_updated:
          $ref: '#/components/schemas/event-conversation-updated'
        dashboard_created:
          $ref: '#/components/schemas/event-dashboard-created'
        dashboard_deleted:
          $ref: '#/components/schemas/event-dashboard-deleted'
        dashboard_updated:
          $ref: '#/components/schemas/event-dashboard-updated'
        dev_user_created:
          $ref: '#/components/schemas/event-dev-user-created'
        dev_user_deleted:
          $ref: '#/components/schemas/event-dev-user-deleted'
        dev_user_updated:
          $ref: '#/components/schemas/event-dev-user-updated'
        group_created:
          $ref: '#/components/schemas/event-group-created'
        group_deleted:
          $ref: '#/components/schemas/event-group-deleted'
        group_member_added:
          $ref: '#/components/schemas/event-group-member-added'
        group_member_removed:
          $ref: '#/components/schemas/event-group-member-removed'
        group_updated:
          $ref: '#/components/schemas/event-group-updated'
        id:
          type: string
          description: The event's ID.
          format: id
        incident_created:
          $ref: '#/components/schemas/event-incident-created'
        incident_deleted:
          $ref: '#/components/schemas/event-incident-deleted'
        incident_updated:
          $ref: '#/components/schemas/event-incident-updated'
        link_created:
          $ref: '#/components/schemas/event-link-created'
        link_deleted:
          $ref: '#/components/schemas/event-link-deleted'
        link_updated:
          $ref: '#/components/schemas/event-link-updated'
        part_created:
          $ref: '#/components/schemas/event-part-created'
        part_deleted:
          $ref: '#/components/schemas/event-part-deleted'
        part_updated:
          $ref: '#/components/schemas/event-part-updated'
        question_answer_created:
          $ref: '#/components/schemas/event-question-answer-created'
        question_answer_deleted:
          $ref: '#/components/schemas/event-question-answer-deleted'
        question_answer_updated:
          $ref: '#/components/schemas/event-question-answer-updated'
        rev_org_created:
          $ref: '#/components/schemas/event-rev-org-created'
        rev_org_deleted:
          $ref: '#/components/schemas/event-rev-org-deleted'
        rev_org_updated:
          $ref: '#/components/schemas/event-rev-org-updated'
        rev_user_created:
          $ref: '#/components/schemas/event-rev-user-created'
        rev_user_deleted:
          $ref: '#/components/schemas/event-rev-user-deleted'
        rev_user_updated:
          $ref: '#/components/schemas/event-rev-user-updated'
        sla_tracker_created:
          $ref: '#/components/schemas/event-sla-tracker-created'
        sla_tracker_deleted:
          $ref: '#/components/schemas/event-sla-tracker-deleted'
        sla_tracker_fetched:
          $ref: '#/components/schemas/event-sla-tracker-fetched'
        sla_tracker_updated:
          $ref: '#/components/schemas/event-sla-tracker-updated'
        survey_created:
          $ref: '#/components/schemas/event-survey-created'
        survey_deleted:
          $ref: '#/components/schemas/event-survey-deleted'
        survey_response_created:
          $ref: '#/components/schemas/event-survey-response-created'
        survey_response_deleted:
          $ref: '#/components/schemas/event-survey-response-deleted'
        survey_response_updated:
          $ref: '#/components/schemas/event-survey-response-updated'
        survey_updated:
          $ref: '#/components/schemas/event-survey-updated'
        sync_history_created:
          $ref: '#/components/schemas/event-sync-history-created'
        sync_history_deleted:
          $ref: '#/components/schemas/event-sync-history-deleted'
        sync_history_updated:
          $ref: '#/components/schemas/event-sync-history-updated'
        tag_created:
          $ref: '#/components/schemas/event-tag-created'
        tag_deleted:
          $ref: '#/components/schemas/event-tag-deleted'
        tag_updated:
          $ref: '#/components/schemas/event-tag-updated'
        timeline_entry_created:
          $ref: '#/components/schemas/event-timeline-entry-created'
        timeline_entry_deleted:
          $ref: '#/components/schemas/event-timeline-entry-deleted'
        timeline_entry_updated:
          $ref: '#/components/schemas/event-timeline-entry-updated'
        timestamp:
          type: string
          description: |
            Timestamp of the webhook's invocation for the event. Note this
            should be used to protect against replay attacks, where the event
            should only be processed if the timestamp isn't stale by several
            seconds.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        verify:
          $ref: '#/components/schemas/webhook-event-verify'
        webhook_created:
          $ref: '#/components/schemas/event-webhook-created'
        webhook_deleted:
          $ref: '#/components/schemas/event-webhook-deleted'
        webhook_id:
          type: string
          description: ID of the webhook for the event.
          example: don:integration:dvrv-us-1:devo/example:webhook/webhook-id
          format: id
        webhook_updated:
          $ref: '#/components/schemas/event-webhook-updated'
        widget_created:
          $ref: '#/components/schemas/event-widget-created'
        widget_deleted:
          $ref: '#/components/schemas/event-widget-deleted'
        widget_updated:
          $ref: '#/components/schemas/event-widget-updated'
        work_created:
          $ref: '#/components/schemas/event-work-created'
        work_deleted:
          $ref: '#/components/schemas/event-work-deleted'
        work_fetched:
          $ref: '#/components/schemas/event-work-fetched'
        work_updated:
          $ref: '#/components/schemas/event-work-updated'
      required:
        - id
        - webhook_id
      title: webhook-event-request
    webhook-event-response:
      type: object
      properties:
        challenge:
          type: string
          description: |
            The challenge from the "verify" request, otherwise this should not
            be set for other request types.
          format: byte
      title: webhook-event-response
      x-go-name: WebhookEventResponseBody
    webhook-event-type:
      type: string
      description: The event types that the webhook will receive.
      enum:
        - account_created
        - account_deleted
        - account_updated
        - ai_agent_response
        - article_created
        - article_deleted
        - article_updated
        - conversation_created
        - conversation_deleted
        - conversation_updated
        - dashboard_created
        - dashboard_deleted
        - dashboard_updated
        - dev_user_created
        - dev_user_deleted
        - dev_user_updated
        - group_created
        - group_deleted
        - group_member_added
        - group_member_removed
        - group_updated
        - incident_created
        - incident_deleted
        - incident_updated
        - job_created
        - job_deleted
        - job_updated
        - link_created
        - link_deleted
        - link_updated
        - part_created
        - part_deleted
        - part_updated
        - question_answer_created
        - question_answer_deleted
        - question_answer_updated
        - rev_org_created
        - rev_org_deleted
        - rev_org_updated
        - rev_user_created
        - rev_user_deleted
        - rev_user_updated
        - sla_tracker_created
        - sla_tracker_deleted
        - sla_tracker_fetched
        - sla_tracker_updated
        - survey_created
        - survey_deleted
        - survey_response_created
        - survey_response_deleted
        - survey_response_updated
        - survey_updated
        - sync_history_created
        - sync_history_deleted
        - sync_history_updated
        - sync_unit_updated
        - tag_created
        - tag_deleted
        - tag_updated
        - timeline_entry_created
        - timeline_entry_deleted
        - timeline_entry_updated
        - verify
        - webhook_created
        - webhook_deleted
        - webhook_updated
        - widget_created
        - widget_deleted
        - widget_updated
        - work_created
        - work_deleted
        - work_fetched
        - work_updated
    webhook-event-verify:
      type: object
      properties:
        challenge:
          type: string
          description: The challenge that must be echoed in the response.
          format: byte
      required:
        - challenge
      title: webhook-event-verify
    webhook-status:
      type: string
      description: The status of the webhook.
      enum:
        - active
        - inactive
        - unverified
    webhook-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
      title: webhook-summary
    webhooks-create-request:
      type: object
      description: The request to create a new webhook.
      properties:
        event_types:
          type: array
          description: The event types that the webhook endpoint will receive.
          items:
            $ref: '#/components/schemas/webhook-event-type'
        secret:
          type: string
          description: |
            The secret to use when verifying webhook events. If provided, the
            secret must be between 8 and 32 bytes (inclusive). If not set, a
            secret will be automatically generated and provided in the
            response.
          format: byte
        url:
          type: string
          description: The URL of the webhook endpoint.
          format: text
      required:
        - url
      title: webhooks-create-request
    webhooks-create-response:
      type: object
      description: The response to creating a new webhook.
      properties:
        webhook:
          $ref: '#/components/schemas/webhook'
      required:
        - webhook
      title: webhooks-create-response
      x-go-name: WebhooksCreateResponseBody
    webhooks-delete-request:
      type: object
      description: The request to delete a webhook.
      properties:
        id:
          type: string
          description: ID for the webhook.
          example: don:integration:dvrv-us-1:devo/example:webhook/webhook-id
          format: id
      required:
        - id
      title: webhooks-delete-request
    webhooks-delete-response:
      type: object
      additionalProperties: false
      description: The response to deleting the webhook.
      title: webhooks-delete-response
      x-go-name: WebhooksDeleteResponseBody
    webhooks-get-request:
      type: object
      description: The request to get a webhook's information.
      properties:
        id:
          type: string
          description: ID for the webhook.
          example: don:integration:dvrv-us-1:devo/example:webhook/webhook-id
          format: id
      required:
        - id
      title: webhooks-get-request
    webhooks-get-response:
      type: object
      description: The response to getting the information for the webhook.
      properties:
        webhook:
          $ref: '#/components/schemas/webhook'
      required:
        - webhook
      title: webhooks-get-response
      x-go-name: WebhooksGetResponseBody
    webhooks-list-request:
      type: object
      additionalProperties: false
      description: The request to list the webhooks.
      title: webhooks-list-request
    webhooks-list-response:
      type: object
      description: The response to listing the webhooks.
      properties:
        webhooks:
          type: array
          description: The list of webhooks.
          items:
            $ref: '#/components/schemas/webhook'
      required:
        - webhooks
      title: webhooks-list-response
      x-go-name: WebhooksListResponseBody
    webhooks-update-action:
      type: string
      description: The action to update the webhook's status.
      enum:
        - activate
        - deactivate
    webhooks-update-request:
      type: object
      description: The request to update a webhook.
      properties:
        action:
          $ref: '#/components/schemas/webhooks-update-action'
        event_types:
          $ref: '#/components/schemas/webhooks-update-request-event-types'
        id:
          type: string
          description: ID for the webhook.
          example: don:integration:dvrv-us-1:devo/example:webhook/webhook-id
          format: id
        secret:
          type: string
          description: |
            If provided, updates the secret that's used when verifying webhook
            events, which must be between 8 and 32 bytes (inclusive). Otherwise
            if empty, then a new secret is generated. If the webhook is active,
            then its status will transition to the 'unverified' state and it
            won't receive any object events until successfully verified.
          format: byte
        url:
          type: string
          description: |
            The webhook's updated URL. If the webhook is active, then the
            webhook's status will transition to the 'unverified' state and it
            won't receive any object events until successfully verified.
          format: text
      required:
        - id
      title: webhooks-update-request
    webhooks-update-request-event-types:
      type: object
      properties:
        add:
          type: array
          description: |
            The event types to add. If a provided event type is already set for
            the webhook, then nothing is done. Note this is mutually exclusive
            with 'set'.
          items:
            $ref: '#/components/schemas/webhook-event-type'
        remove:
          type: array
          description: |
            The event types to remove. If a provided event type isn't set for
            the webhook, then nothing is done. Note this is mutually exclusive
            with 'set'.
          items:
            $ref: '#/components/schemas/webhook-event-type'
        set:
          type: array
          description: |
            The updated event types, which will replace the webhook's current
            event types. Note this is mutually exclusive with 'add' and
            'remove'.
          items:
            $ref: '#/components/schemas/webhook-event-type'
      title: webhooks-update-request-event-types
    webhooks-update-response:
      type: object
      description: The response to updating the webhook.
      properties:
        webhook:
          $ref: '#/components/schemas/webhook'
      required:
        - webhook
      title: webhooks-update-response
      x-go-name: WebhooksUpdateResponseBody
    weekly-org-schedule:
      type: object
      additionalProperties: false
      description: The schedule for each week.
      title: weekly-org-schedule
    widget:
      allOf:
        - $ref: '#/components/schemas/atom-base'
      title: widget
    work:
      type: object
      discriminator:
        mapping:
          issue: '#/components/schemas/issue'
          ticket: '#/components/schemas/ticket'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/issue'
        - $ref: '#/components/schemas/ticket'
      properties:
        type:
          $ref: '#/components/schemas/work-type'
      required:
        - type
      title: work
    work-base:
      allOf:
        - $ref: '#/components/schemas/atom-base'
        - type: object
          properties:
            applies_to_part:
              $ref: '#/components/schemas/part-summary'
            artifacts:
              type: array
              description: The artifacts attached to the work item.
              items:
                $ref: '#/components/schemas/artifact-summary'
            body:
              type: string
              description: Body of the work object.
              format: text
            owned_by:
              type: array
              description: The users that own the work.
              items:
                $ref: '#/components/schemas/user-summary'
            reported_by:
              type: array
              description: Users that reported the work.
              items:
                $ref: '#/components/schemas/user-summary'
            stage:
              $ref: '#/components/schemas/legacy-stage'
            tags:
              type: array
              description: Tags associated with the object.
              items:
                $ref: '#/components/schemas/tag-with-value'
            target_close_date:
              type: string
              description: Timestamp when the work is expected to be complete.
              example: "2023-01-01T12:00:00.000Z"
              format: date-time
            title:
              type: string
              description: Title of the work object.
              format: text
          required:
            - owned_by
            - title
      title: work-base
    work-base-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
        - type: object
          properties:
            owned_by:
              type: array
              description: The users that own the work.
              items:
                $ref: '#/components/schemas/user-summary'
            stage:
              $ref: '#/components/schemas/legacy-stage-summary'
            title:
              type: string
              description: Title of the work object.
              format: text
          required:
            - owned_by
            - title
      title: work-base-summary
    work-type:
      type: string
      enum:
        - issue
        - ticket
    workflow-run-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
      title: workflow-run-summary
    workflow-summary:
      allOf:
        - $ref: '#/components/schemas/atom-base-summary'
      title: workflow-summary
    works-create-request:
      type: object
      discriminator:
        mapping:
          issue: '#/components/schemas/works-create-request-issue'
          ticket: '#/components/schemas/works-create-request-ticket'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/works-create-request-issue'
        - $ref: '#/components/schemas/works-create-request-ticket'
      properties:
        type:
          $ref: '#/components/schemas/work-type'
        applies_to_part:
          type: string
          description: |
            The [part](https://devrev.ai/docs/product/parts) that the work
            applies to. Specifying a part is required when creating tickets and
            issues.
          example: PROD-12345
          format: id
        artifacts:
          type: array
          description: |
            The IDs of the artifacts to associate with the work item.
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
        body:
          type: string
          description: Body of the work object.
          format: text
          maxLength: 65536
        owned_by:
          type: array
          description: The users that own the work.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        reported_by:
          type: array
          description: The users that reported the work.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        stage:
          $ref: '#/components/schemas/stage-init'
        stage_validation_options:
          type: array
          description: |
            The type of stage validations options when creating a work item.
          items:
            $ref: '#/components/schemas/stage-validation-option-for-create'
        tags:
          type: array
          description: Tags associated with the work item.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
        target_close_date:
          type: string
          description: Timestamp for when the work is expected to be complete.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        title:
          type: string
          description: Title of the work object.
          format: text
          maxLength: 256
          minLength: 1
      required:
        - applies_to_part
        - owned_by
        - title
        - type
      title: works-create-request
    works-create-request-issue:
      type: object
      properties:
        developed_with:
          type: array
          description: The IDs of the parts associated with issue.
          example:
            - PROD-12345
          items:
            type: string
            format: id
          maxItems: 8
        priority:
          $ref: '#/components/schemas/issue-priority'
        priority_v2:
          type: integer
          description: |
            Priority enum id of the work based upon impact and criticality. The
            allowed ids can be extended by the user. Stock allowed values:
            ```
              {
                "id": 1,
                "label": "P0",
                "ordinal": 1,
                "overridable": true
              },
              {
                "id": 2,
                "label": "P1",
                "ordinal": 2,
                "overridable": true
              },
              {
                "id": 3,
                "label": "P2",
                "ordinal": 3,
                "overridable": true
              },
              {
                "id": 4,
                "label": "P3",
                "ordinal": 4,
                "overridable": true
              }
            ```
          format: int64
          x-devrev-uenum-overridable: true
          x-devrev-uenum-values:
            - id: 1
              label: P0
              ordinal: 1
              overridable: true
            - id: 2
              label: P1
              ordinal: 2
              overridable: true
            - id: 3
              label: P2
              ordinal: 3
              overridable: true
            - id: 4
              label: P3
              ordinal: 4
              overridable: true
        sprint:
          type: string
          description: The sprint that the issue belongs to.
          format: id
        target_start_date:
          type: string
          description: Timestamp for when the work is expected to start.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
      title: works-create-request-issue
    works-create-request-ticket:
      type: object
      properties:
        account:
          type: string
          description: The account that the ticket is associated with.
          example: ACC-12345
          format: id
        channels:
          type: array
          description: Channels of the ticket.
          items:
            $ref: '#/components/schemas/ticket-channels'
        channels_v2:
          type: array
          description: Channel IDs of the ticket.
          items:
            type: string
            format: id
        group:
          type: string
          description: The group that the ticket is associated with.
          format: id
        is_spam:
          type: boolean
          description: Whether the ticket is spam.
        needs_response:
          type: boolean
          description: Whether the ticket needs a response.
        rev_org:
          type: string
          description: The Rev organization that the ticket is associated with.
          example: REV-AbCdEfGh
          format: id
        severity:
          $ref: '#/components/schemas/ticket-severity'
        source_channel:
          type: string
          description: The source channel of the ticket.
          format: text
        source_channel_v2:
          type: string
          description: Source channel ID of the ticket.
          format: id
      title: works-create-request-ticket
    works-create-response:
      type: object
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
        - work
      title: works-create-response
      x-go-name: WorksCreateResponseBody
    works-delete-request:
      type: object
      properties:
        id:
          type: string
          description: The work's ID.
          example: ISS-12345
          format: id
      required:
        - id
      title: works-delete-request
    works-delete-response:
      type: object
      additionalProperties: false
      title: works-delete-response
      x-go-name: WorksDeleteResponseBody
    works-export-request:
      type: object
      properties:
        type:
          type: array
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        applies_to_part:
          type: array
          description: Filters for work belonging to any of the provided parts.
          example:
            - PROD-12345
          items:
            type: string
            format: id
        created_by:
          type: array
          description: Filters for work created by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        created_date:
          $ref: '#/components/schemas/date-filter'
        first:
          type: integer
          description: |
            The number of work items to return. The default is '50', the
            maximum is '5000'.
          format: int32
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        modified_by:
          type: array
          description: Filters for work modified by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        modified_date:
          $ref: '#/components/schemas/date-filter'
        owned_by:
          type: array
          description: Filters for work owned by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        reported_by:
          type: array
          description: Filters for work reported by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        stage:
          $ref: '#/components/schemas/stage-filter'
        staged_info:
          $ref: '#/components/schemas/staged-info-filter'
        state:
          type: array
          description: Filters for work with any of the provided states.
          items:
            type: string
            format: text
        sync_metadata:
          $ref: '#/components/schemas/sync-metadata-filter'
        tags:
          type: array
          description: Filters for work with any of the provided tags.
          example:
            - TAG-12345
          items:
            type: string
            format: id
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
      title: works-export-request
    works-export-response:
      type: object
      properties:
        works:
          type: array
          description: The resulting collection of work items.
          items:
            $ref: '#/components/schemas/work'
      required:
        - works
      title: works-export-response
      x-go-name: WorksExportResponseBody
    works-filter-issue:
      type: object
      properties:
        accounts:
          type: array
          description: Filters for issues with any of the provided accounts.
          example:
            - ACC-12345
          items:
            type: string
            format: id
        actual_start_date:
          $ref: '#/components/schemas/date-filter'
        priority:
          type: array
          description: Filters for issues with any of the provided priorities.
          items:
            $ref: '#/components/schemas/issue-priority'
        priority_v2:
          type: array
          description: |
            Filters for issues with any of the provided priority enum ids.
          items:
            type: integer
            format: int64
        rev_orgs:
          type: array
          description: |
            Filters for issues with any of the provided Rev organizations.
          example:
            - REV-AbCdEfGh
          items:
            type: string
            format: id
        sla_summary:
          $ref: '#/components/schemas/sla-summary-filter'
        sprint:
          type: array
          description: Filters for issues with any of the sprint.
          items:
            type: string
            format: id
        target_start_date:
          $ref: '#/components/schemas/date-filter'
      title: works-filter-issue
    works-filter-ticket:
      type: object
      properties:
        brand:
          type: array
          description: |
            Filters for tickets that are associated with any of the brands.
          items:
            type: string
            format: id
        channels:
          type: array
          description: Filters for tickets with any of the provided channels.
          items:
            $ref: '#/components/schemas/ticket-channels'
        channels_v2:
          type: array
          description: |
            Filters for tickets that are associated with any of the channels.
          items:
            type: string
            format: id
        group:
          type: array
          description: Filters for tickets belonging to specific groups.
          items:
            type: string
            format: id
        is_frozen:
          type: boolean
          description: Filters for frozen tickets.
        is_spam:
          type: boolean
          description: Filters for tickets that are spam.
        needs_response:
          type: boolean
          description: Filters for tickets that need response.
        rev_org:
          type: array
          description: |
            Filters for tickets that are associated with any of the provided
            Rev organizations.
          example:
            - REV-AbCdEfGh
          items:
            type: string
            format: id
        severity:
          type: array
          description: Filters for tickets with any of the provided severities.
          items:
            $ref: '#/components/schemas/ticket-severity'
        sla_summary:
          $ref: '#/components/schemas/sla-summary-filter'
        source_channel:
          type: array
          description: |
            Filters for tickets with any of the provided source channels.
          items:
            type: string
            format: text
        source_channel_v2:
          type: array
          description: |
            Filters for tickets that are associated with any of the source
            channels.
          items:
            type: string
            format: id
        surveys:
          $ref: '#/components/schemas/survey-aggregation-filter'
      title: works-filter-ticket
    works-get-request:
      type: object
      properties:
        id:
          type: string
          description: The work's ID.
          example: ISS-12345
          format: id
      required:
        - id
      title: works-get-request
    works-get-response:
      type: object
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
        - work
      title: works-get-response
      x-go-name: WorksGetResponseBody
    works-list-request:
      type: object
      properties:
        type:
          type: array
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        applies_to_part:
          type: array
          description: Filters for work belonging to any of the provided parts.
          example:
            - PROD-12345
          items:
            type: string
            format: id
        created_by:
          type: array
          description: Filters for work created by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        created_date:
          $ref: '#/components/schemas/date-filter'
        cursor:
          type: string
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          format: text
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        limit:
          type: integer
          description: |
            The maximum number of works to return. The default is '50'.
          format: int32
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_by:
          type: array
          description: Filters for work modified by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        modified_date:
          $ref: '#/components/schemas/date-filter'
        owned_by:
          type: array
          description: Filters for work owned by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        reported_by:
          type: array
          description: Filters for work reported by any of these users.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
        sort_by:
          type: array
          description: |
            Fields to sort the works by and the direction to sort them.
          items:
            type: string
            format: sort-by
        stage:
          $ref: '#/components/schemas/stage-filter'
        staged_info:
          $ref: '#/components/schemas/staged-info-filter'
        state:
          type: array
          description: Filters for work with any of the provided states.
          items:
            type: string
            format: text
        sync_metadata:
          $ref: '#/components/schemas/sync-metadata-filter'
        tags:
          type: array
          description: Filters for work with any of the provided tags.
          example:
            - TAG-12345
          items:
            type: string
            format: id
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
      title: works-list-request
    works-list-response:
      type: object
      properties:
        next_cursor:
          type: string
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          format: text
        prev_cursor:
          type: string
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          format: text
        works:
          type: array
          description: The list of works.
          items:
            $ref: '#/components/schemas/work'
      required:
        - works
      title: works-list-response
      x-go-name: WorksListResponseBody
    works-update-request:
      type: object
      discriminator:
        mapping:
          issue: '#/components/schemas/works-update-request-issue'
          none: '#/components/schemas/empty'
          ticket: '#/components/schemas/works-update-request-ticket'
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/empty'
        - $ref: '#/components/schemas/works-update-request-issue'
        - $ref: '#/components/schemas/works-update-request-ticket'
      properties:
        type:
          $ref: '#/components/schemas/work-type'
        applies_to_part:
          type: string
          description: Updates the part that the work item applies to.
          example: PROD-12345
          format: id
        artifacts:
          $ref: '#/components/schemas/works-update-request-artifacts'
        body:
          type: string
          description: |
            Updated body of the work object, or unchanged if not provided.
          format: text
          maxLength: 65536
        id:
          type: string
          description: The work's ID.
          example: ISS-12345
          format: id
        owned_by:
          $ref: '#/components/schemas/works-update-request-owned-by'
        reported_by:
          $ref: '#/components/schemas/works-update-request-reported-by'
        stage:
          $ref: '#/components/schemas/stage-update'
        stage_validation_options:
          type: array
          description: |
            The type of stage validations options when updating the stage or
            the stage diagram of an object.
          items:
            $ref: '#/components/schemas/stage-validation-option-for-update'
        staged_info:
          $ref: '#/components/schemas/works-update-request-staged-info-update'
        tags:
          $ref: '#/components/schemas/works-update-request-tags'
        target_close_date:
          type: string
          description: |
            Updates the timestamp for when the work is expected to be complete.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          nullable: true
        title:
          type: string
          description: |
            Updated title of the work object, or unchanged if not provided.
          format: text
          maxLength: 256
          minLength: 1
      required:
        - id
      title: works-update-request
    works-update-request-artifacts:
      type: object
      properties:
        add:
          type: array
          description: |
            Adds the provided artifacts (if not already present) to the field.
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
          maxItems: 50
        remove:
          type: array
          description: |
            Removes the provided artifacts (if they exist) from the field.
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
          maxItems: 50
        set:
          type: array
          description: Sets the field to the provided artifacts.
          example:
            - ARTIFACT-12345
          items:
            type: string
            format: id
          maxItems: 50
      title: works-update-request-artifacts
    works-update-request-issue:
      type: object
      properties:
        developed_with:
          $ref: '#/components/schemas/works-update-request-issue-developed-with'
        priority:
          $ref: '#/components/schemas/issue-priority'
        priority_v2:
          type: integer
          description: |
            Priority enum id of the work based upon impact and criticality. The
            allowed ids can be extended by the user. Stock allowed values:
            ```
              {
                "id": 1,
                "label": "P0",
                "ordinal": 1,
                "overridable": true
              },
              {
                "id": 2,
                "label": "P1",
                "ordinal": 2,
                "overridable": true
              },
              {
                "id": 3,
                "label": "P2",
                "ordinal": 3,
                "overridable": true
              },
              {
                "id": 4,
                "label": "P3",
                "ordinal": 4,
                "overridable": true
              }
            ```
          format: int64
          x-devrev-uenum-overridable: true
          x-devrev-uenum-values:
            - id: 1
              label: P0
              ordinal: 1
              overridable: true
            - id: 2
              label: P1
              ordinal: 2
              overridable: true
            - id: 3
              label: P2
              ordinal: 3
              overridable: true
            - id: 4
              label: P3
              ordinal: 4
              overridable: true
        sprint:
          type: string
          description: Updates the sprint that the issue belongs to.
          format: id
          nullable: true
        target_start_date:
          type: string
          description: |
            Updates the timestamp for when the work is expected to start.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          nullable: true
      title: works-update-request-issue
    works-update-request-issue-developed-with:
      type: object
      properties:
        set:
          type: array
          description: Sets the IDs of the parts associated with issue.
          example:
            - PROD-12345
          items:
            type: string
            format: id
          maxItems: 8
      title: works-update-request-issue-developed-with
    works-update-request-owned-by:
      type: object
      properties:
        set:
          type: array
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
      title: works-update-request-owned-by
    works-update-request-reported-by:
      type: object
      properties:
        set:
          type: array
          description: |
            Sets the users that reported the work to the provided user IDs.
          example:
            - DEVU-12345
          items:
            type: string
            format: id
      title: works-update-request-reported-by
    works-update-request-staged-info-update:
      type: object
      properties:
        sync_in_unresolved_fields:
          type: array
          description: |
            Updates the sync in unresolved fields of the staged work.
          items:
            $ref: '#/components/schemas/works-update-request-staged-info-update-unresolved-field'
        sync_out_unresolved_fields:
          type: array
          description: |
            Updates the sync out unresolved fields of the staged work.
          items:
            $ref: '#/components/schemas/works-update-request-staged-info-update-unresolved-field'
        unresolved_fields:
          type: array
          description: Updates the unresolved fields of the staged work.
          items:
            type: string
            format: text
      title: works-update-request-staged-info-update
    works-update-request-staged-info-update-unresolved-field:
      type: object
      properties:
        devrev_field_name:
          type: string
          description: DevRev field name of the object's attribute.
          format: text
        external_display_name:
          type: string
          description: External field name as seen by the end user.
          format: text
        external_field_name:
          type: string
          description: Api name of the external object's field.
          format: text
      title: works-update-request-staged-info-update-unresolved-field
    works-update-request-tags:
      type: object
      properties:
        set:
          type: array
          description: Sets the provided tags on the work item.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
      title: works-update-request-tags
    works-update-request-ticket:
      type: object
      properties:
        account:
          type: string
          description: Updates the account that the ticket is associated with.
          example: ACC-12345
          format: id
          nullable: true
        channels:
          $ref: '#/components/schemas/works-update-request-ticket-channels'
        channels_v2:
          type: array
          description: Updates channel IDs of the ticket.
          items:
            type: string
            format: id
        group:
          type: string
          description: Updates the group that the ticket is associated with.
          format: id
          nullable: true
        is_archived:
          type: boolean
          description: Whether the ticket is archived.
        is_frozen:
          type: boolean
          description: Whether the ticket is frozen.
        is_spam:
          type: boolean
          description: Updates whether the ticket is spam.
        needs_response:
          type: boolean
          description: Updates whether the ticket needs a response.
        rev_org:
          type: string
          description: |
            Updates the Rev organization that the ticket is associated with.
          example: REV-AbCdEfGh
          format: id
          nullable: true
        sentiment:
          type: integer
          description: |
            The enum ID for the sentiment of the ticket. The allowed ids can be
            extended by the user. Stock allowed values:
            ```
              {
                "id": 1,
                "label": "Delighted",
                "ordinal": 1,
                "overridable": true
              },
              {
                "id": 2,
                "label": "Happy",
                "ordinal": 2,
                "overridable": true
              },
              {
                "id": 3,
                "label": "Neutral",
                "ordinal": 3,
                "overridable": true
              },
              {
                "id": 4,
                "label": "Unhappy",
                "ordinal": 4,
                "overridable": true
              },
              {
                "id": 5,
                "label": "Frustrated",
                "ordinal": 5,
                "overridable": true
              }
            ```
          format: int64
          x-devrev-uenum-overridable: true
          x-devrev-uenum-values:
            - id: 1
              label: Delighted
              ordinal: 1
              overridable: true
            - id: 2
              label: Happy
              ordinal: 2
              overridable: true
            - id: 3
              label: Neutral
              ordinal: 3
              overridable: true
            - id: 4
              label: Unhappy
              ordinal: 4
              overridable: true
            - id: 5
              label: Frustrated
              ordinal: 5
              overridable: true
        sentiment_modified_date:
          type: string
          description: Timestamp at which sentiment was last modified.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
        sentiment_summary:
          type: string
          description: Summary justifying the current sentiment.
          format: text
        severity:
          $ref: '#/components/schemas/ticket-severity'
        source_channel_v2:
          type: string
          description: Updates the source channel of the ticket.
          format: id
          nullable: true
      title: works-update-request-ticket
    works-update-request-ticket-channels:
      type: object
      properties:
        set:
          type: array
          description: Sets the channels to the provided channels.
          items:
            $ref: '#/components/schemas/ticket-channels'
      title: works-update-request-ticket-channels
    works-update-response:
      type: object
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
        - work
      title: works-update-response
      x-go-name: WorksUpdateResponseBody
    works-vista-group-item:
      allOf:
        - $ref: '#/components/schemas/vista-group-base'
        - type: object
          discriminator:
            propertyName: type
          properties:
            type:
              $ref: '#/components/schemas/works-vista-group-item-type'
          required:
            - type
      description: Represents a nested works vista group object.
      title: works-vista-group-item
    works-vista-group-item-type:
      type: string
      description: Type of works vista group item.
      enum:
        - curated
        - dynamic
  securitySchemes:
    auth-token:
      type: http
      description: |-
        All the DevRev APIs require a token to authenticate the user. Provide `Authorization: Bearer <TOKEN>` as a header to every API request.
        [How do I find my token?](https://devrev.ai/docs/apis/auth)
      scheme: bearer
      x-fern-bearer:
        env: DEVREV_TOKEN
        name: token
info:
  description: DevRev's REST API.
  title: DevRev REST API
  version: "2024-01-24"
openapi: 3.0.3
paths:
  /accounts.create:
    post:
      description: |
        Creates an account, which is a record representing a customer or an
        organization.
      operationId: accounts-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-create-response'
          description: The response to creating a new account.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Account
      tags:
        - accounts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /accounts.delete:
    post:
      description: Deletes an account.
      operationId: accounts-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-delete-response'
          description: The response to deleting an account.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Account
      tags:
        - accounts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /accounts.export:
    get:
      description: Exports a collection of accounts.
      operationId: accounts-export
      parameters:
        - description: Filters for accounts created by the specified user(s).
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            Filters for objects created after the provided timestamp (inclusive).
          explode: false
          in: query
          name: created_date.after
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          explode: false
          in: query
          name: created_date.before
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: Array of display names of accounts to be filtered.
          explode: false
          in: query
          name: display_name
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Array of references of accounts to be filtered.
          explode: false
          in: query
          name: external_refs
          schema:
            type: array
            items:
              type: string
              format: text
        - description: The number of accounts to return. The default is '50'.
          explode: false
          in: query
          name: first
          schema:
            type: integer
            format: int32
            maximum: 500
            minimum: 1
        - description: |
            Filters for objects created after the provided timestamp (inclusive).
          explode: false
          in: query
          name: modified_date.after
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          explode: false
          in: query
          name: modified_date.before
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Fields to sort the accounts by and the direction to sort them in.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
        - description: Filters for accounts on specified stages.
          explode: false
          in: query
          name: stage
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Tier of the accounts to be filtered.
          explode: false
          in: query
          name: tier
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Array of websites of accounts to be filtered.
          explode: false
          in: query
          name: websites
          schema:
            type: array
            items:
              type: string
              format: text
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-export-response'
          description: The response to exporting a collection of accounts.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Export Accounts
      tags:
        - accounts
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: AccountsExportQuery
    post:
      description: Exports a collection of accounts.
      operationId: accounts-export-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-export-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-export-response'
          description: The response to exporting a collection of accounts.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Export Accounts (POST)
      tags:
        - accounts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /accounts.get:
    get:
      description: Retrieves an account's information.
      operationId: accounts-get
      parameters:
        - description: The ID of the account to be retrieved.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            example: ACC-12345
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-get-response'
          description: The returned account.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Account
      tags:
        - accounts
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: AccountsGetQuery
    post:
      description: Retrieves an account's information.
      operationId: accounts-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-get-response'
          description: The returned account.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Account (POST)
      tags:
        - accounts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /accounts.list:
    get:
      description: Gets a list of accounts.
      operationId: accounts-list
      parameters:
        - description: Filters for accounts created by the specified user(s).
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            Filters for objects created after the provided timestamp (inclusive).
          explode: false
          in: query
          name: created_date.after
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          explode: false
          in: query
          name: created_date.before
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: Array of display names of accounts to be filtered.
          explode: false
          in: query
          name: display_name
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Array of references of accounts to be filtered.
          explode: false
          in: query
          name: external_refs
          schema:
            type: array
            items:
              type: string
              format: text
        - description: |
            The maximum number of accounts to return per page. The default is
            '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            Filters for objects created after the provided timestamp (inclusive).
          explode: false
          in: query
          name: modified_date.after
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          explode: false
          in: query
          name: modified_date.before
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Fields to sort the accounts by and the direction to sort them in.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
        - description: Filters for accounts on specified stages.
          explode: false
          in: query
          name: stage
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Tier of the accounts to be filtered.
          explode: false
          in: query
          name: tier
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Array of websites of accounts to be filtered.
          explode: false
          in: query
          name: websites
          schema:
            type: array
            items:
              type: string
              format: text
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-list-response'
          description: |
            The response to listing all accounts matching the filter criteria.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Accounts
      tags:
        - accounts
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: AccountsListQuery
    post:
      description: Gets a list of accounts.
      operationId: accounts-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-list-response'
          description: |
            The response to listing all accounts matching the filter criteria.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Accounts (POST)
      tags:
        - accounts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /accounts.merge:
    post:
      description: Merges two accounts.
      operationId: accounts-merge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-merge-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-merge-response'
          description: The response to merging an account.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Merge Accounts
      tags:
        - accounts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /accounts.update:
    post:
      description: Updates an account's information.
      operationId: accounts-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-update-response'
          description: Updated account object.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Account
      tags:
        - accounts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /articles.create:
    post:
      description: |
        Article is an object which can contain a URL or artifacts in the
        resource. It also contains the data regarding the owner, author, status
        and published date of the object. This call creates an article.
      operationId: create-article
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-create-response'
          description: Create article response.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Article
      tags:
        - articles
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /articles.delete:
    post:
      description: Deletes an article.
      operationId: delete-article
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Article
      tags:
        - articles
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /articles.get:
    get:
      description: Gets an article.
      operationId: get-article
      parameters:
        - description: The ID of the required article.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            example: ARTICLE-12345
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-get-response'
          description: Get article response.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Article
      tags:
        - articles
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: GetArticleQuery
    post:
      description: Gets an article.
      operationId: get-article-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-get-response'
          description: Get article response.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Article (POST)
      tags:
        - articles
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /articles.list:
    get:
      description: Lists a collection of articles.
      operationId: list-articles
      parameters:
        - description: |
            Filters for articles belonging to any of the provided parts.
          explode: false
          in: query
          name: applies_to_parts
          schema:
            type: array
            example:
              - PROD-12345
            items:
              type: string
              format: id
        - description: |
            Filter for the type of articles. If this is not provided, then
            articles that are not content blocks are returned.
          explode: false
          in: query
          name: article_type
          schema:
            type: array
            items:
              $ref: '#/components/schemas/article-type'
        - description: |
            Filters for articles authored by any of the provided users.
          explode: false
          in: query
          name: authored_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            Filters for articles belonging to any of the provided brands.
          explode: false
          in: query
          name: brands
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for articles created by any of the provided users.
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            The maximum number of articles to return. The default is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            Filters for articles modified by any of the provided users.
          explode: false
          in: query
          name: modified_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: Filters for articles owned by any of the provided users.
          explode: false
          in: query
          name: owned_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: Filter for the scope of the articles.
          explode: false
          in: query
          name: scope
          schema:
            type: array
            items:
              type: integer
              format: int64
        - description: ID of the group/member with whom the item is shared.
          explode: false
          in: query
          name: shared_with.member
          schema:
            type: string
            format: id
        - description: Role ID of the group/member with whom the item is shared.
          explode: false
          in: query
          name: shared_with.role
          schema:
            type: string
            format: id
        - description: Filters for article with any of the provided tags.
          explode: false
          in: query
          name: tags
          schema:
            type: array
            example:
              - TAG-12345
            items:
              type: string
              format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-list-response'
          description: List articles response.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Articles
      tags:
        - articles
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: ListArticlesQuery
    post:
      description: Lists a collection of articles.
      operationId: list-articles-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-list-response'
          description: List articles response.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Articles (POST)
      tags:
        - articles
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /articles.update:
    post:
      description: Updates an article.
      operationId: update-article
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Article
      tags:
        - articles
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /artifacts.get:
    get:
      description: Gets the requested artifact's information.
      operationId: artifacts-get
      parameters:
        - description: The requested artifact's ID.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            example: ARTIFACT-12345
            format: id
        - description: The version of the artifact that needs to be fetched.
          explode: false
          in: query
          name: version
          schema:
            type: string
            format: text
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-get-response'
          description: The response to getting an artifact's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Artifact
      tags:
        - artifacts
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: ArtifactsGetQuery
    post:
      description: Gets the requested artifact's information.
      operationId: artifacts-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/artifacts-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-get-response'
          description: The response to getting an artifact's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Artifact (POST)
      tags:
        - artifacts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /artifacts.list:
    get:
      description: List the artifacts attached to an object.
      operationId: artifacts-list
      parameters:
        - description: The ID of the object to filter artifacts.
          explode: false
          in: query
          name: parent_id
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-list-response'
          description: The response to list artifacts attached to an object.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Artifacts
      tags:
        - artifacts
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: ArtifactsListQuery
    post:
      description: List the artifacts attached to an object.
      operationId: artifacts-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/artifacts-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-list-response'
          description: The response to list artifacts attached to an object.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Artifacts (POST)
      tags:
        - artifacts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /artifacts.locate:
    get:
      description: Gets the download URL for the artifact.
      operationId: artifacts-locate
      parameters:
        - description: The ID of the artifact to get the URL for.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            example: ARTIFACT-12345
            format: id
        - description: The version of the artifact that needs to be fetched.
          explode: false
          in: query
          name: version
          schema:
            type: string
            format: text
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-locate-response'
          description: The response to getting an artifact's download URL.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Locate Artifacts
      tags:
        - artifacts
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: ArtifactsLocateQuery
    post:
      description: Gets the download URL for the artifact.
      operationId: artifacts-locate-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/artifacts-locate-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-locate-response'
          description: The response to getting an artifact's download URL.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Locate Artifacts (POST)
      tags:
        - artifacts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /artifacts.prepare:
    post:
      description: |
        Creates an artifact and generates an upload URL for its data.
      operationId: artifacts-prepare
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/artifacts-prepare-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-prepare-response'
          description: The response to preparing a URL to upload a file.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Prepare Artifacts
      tags:
        - artifacts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /artifacts.versions.delete:
    post:
      description: Permanently deletes a version of an artifact.
      operationId: artifacts-hard-delete-version
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/artifacts-hard-delete-version-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-hard-delete-version-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Artifacts Version
      tags:
        - artifacts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /artifacts.versions.prepare:
    post:
      description: |
        Prepares a new version for an artifact, returning the URL and form data
        to upload the updated file.
      operationId: artifacts-versions-prepare
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/artifacts-versions-prepare-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-versions-prepare-response'
          description: The response to preparing a new artifact version.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Prepare Artifacts Versions
      tags:
        - artifacts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /atoms.get:
    get:
      description: Gets the specified object.
      operationId: atoms-get
      parameters:
        - description: The ID of the object to get.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atoms-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Atom
      tags:
        - atoms
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: AtomsGetQuery
    post:
      description: Gets the specified object.
      operationId: atoms-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atoms-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atoms-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Atom (POST)
      tags:
        - atoms
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /auth-tokens.create:
    post:
      description: |
        Creates a JWT corresponding to the requested token type for the
        authenticated user.
      operationId: auth-tokens-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-create-response'
          description: |
            Response for the request to create a new token corresponding to the
            requested token type.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Auth Token
      tags:
        - auth-tokens
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /auth-tokens.delete:
    post:
      description: |
        Revokes the token that matches the given token ID issued under the
        given Dev organization.
      operationId: auth-tokens-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-delete-request'
        required: true
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Auth Token
      tags:
        - auth-tokens
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /auth-tokens.get:
    get:
      description: |
        Gets the token metadata corresponding to the given token ID under the
        given Dev organization.
      operationId: auth-tokens-get
      parameters:
        - description: |
            The unique identifier of the token under a given Dev organization.
          explode: false
          in: query
          name: token_id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-get-response'
          description: The response to get the token metadata.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Auth Token
      tags:
        - auth-tokens
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: AuthTokensGetQuery
    post:
      description: |
        Gets the token metadata corresponding to the given token ID under the
        given Dev organization.
      operationId: auth-tokens-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-get-response'
          description: The response to get the token metadata.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Auth Token (POST)
      tags:
        - auth-tokens
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /auth-tokens.info:
    get:
      description: |
        Returns the Dev organization, user and token attributes extracted from
        the auth token.
      operationId: auth-tokens-info
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-info-response'
          description: |
            The Dev organization, user and token attributes extracted from the auth
            token.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Info Auth Tokens
      tags:
        - auth-tokens
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: AuthTokensInfoQuery
    post:
      description: |
        Returns the Dev organization, user and token attributes extracted from
        the auth token.
      operationId: auth-tokens-info-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-info-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-info-response'
          description: |
            The Dev organization, user and token attributes extracted from the auth
            token.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Info Auth Tokens (POST)
      tags:
        - auth-tokens
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /auth-tokens.list:
    get:
      description: |
        Gets the token metadata for all the tokens corresponding to the given
        token type issued for a given subject.
      operationId: auth-tokens-list
      parameters:
        - description: |
            An identifier that represents the application, which requested the
            token. Only relevant for application access tokens.
          explode: false
          in: query
          name: client_id
          schema:
            type: string
            format: text
        - description: |
            The type of the requested token. If no value is specified, the
            response will include tokens of all the types.
          explode: false
          in: query
          name: requested_token_type
          schema:
            $ref: '#/components/schemas/auth-token-requested-token-type'
        - description: |
            The subject associated with the token. In the absence of this
            parameter, the ID of the authenticated entity is treated as the
            subject.
          explode: false
          in: query
          name: subject
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-list-response'
          description: The response to list the token metadata.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Auth Tokens
      tags:
        - auth-tokens
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: AuthTokensListQuery
    post:
      description: |
        Gets the token metadata for all the tokens corresponding to the given
        token type issued for a given subject.
      operationId: auth-tokens-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-list-response'
          description: The response to list the token metadata.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Auth Tokens (POST)
      tags:
        - auth-tokens
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /auth-tokens.self.delete:
    post:
      description: |
        Revokes all the tokens that matches the given token type created by the
        authenticated user.
      operationId: auth-tokens-self-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-self-delete-request'
        required: true
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Auth Tokens Self
      tags:
        - auth-tokens
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /auth-tokens.update:
    post:
      description: |
        Updates token metadata of a token issued under a given Dev
        organization.
      operationId: auth-tokens-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-update-response'
          description: Response for the request to update the token metadata.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Auth Token
      tags:
        - auth-tokens
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /chats.create:
    post:
      description: Creates a new chat, or optionally opens an existing one.
      operationId: chats-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chats-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chats-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Chat
      tags:
        - chats
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /chats.get:
    get:
      description: Gets a chat's information.
      operationId: chats-get
      parameters:
        - description: The chat's ID.
          explode: false
          in: query
          name: id
          schema:
            type: string
            example: CHAN-AbCdEfGh
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chats-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Chat
      tags:
        - chats
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: ChatsGetQuery
    post:
      description: Gets a chat's information.
      operationId: chats-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chats-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chats-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Chat (POST)
      tags:
        - chats
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /chats.update:
    post:
      description: Updates a chat's information.
      operationId: chats-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chats-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chats-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Chat
      tags:
        - chats
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /code-changes.create:
    post:
      description: Creates a code change object.
      operationId: code-changes-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/code-changes-create-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-changes-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Code Change
      tags:
        - code-changes
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /code-changes.delete:
    post:
      description: Deletes a code change object.
      operationId: code-changes-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/code-changes-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-changes-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Code Change
      tags:
        - code-changes
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /code-changes.get:
    get:
      description: Gets a code change object.
      operationId: code-changes-get
      parameters:
        - description: The code change object ID.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-changes-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Code Change
      tags:
        - code-changes
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: CodeChangesGetQuery
    post:
      description: Gets a code change object.
      operationId: code-changes-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/code-changes-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-changes-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Code Change (POST)
      tags:
        - code-changes
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /code-changes.list:
    get:
      description: Lists code change objects.
      operationId: code-changes-list
      parameters:
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            The maximum number of code change objects to return. The default is
            '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-changes-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Code Changes
      tags:
        - code-changes
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: CodeChangesListQuery
    post:
      description: Lists code change objects.
      operationId: code-changes-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/code-changes-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-changes-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Code Changes (POST)
      tags:
        - code-changes
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /code-changes.update:
    post:
      description: Updates a code change object.
      operationId: code-changes-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/code-changes-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-changes-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Code Change
      tags:
        - code-changes
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /commands.create:
    post:
      description: Creates a command.
      operationId: commands-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/command-create-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/command-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Command
      tags:
        - commands
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /commands.get:
    get:
      description: Gets a command.
      operationId: commands-get
      parameters:
        - description: The command's ID.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/command-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Command
      tags:
        - commands
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: CommandsGetQuery
    post:
      description: Gets a command.
      operationId: commands-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/command-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/command-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Command (POST)
      tags:
        - commands
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /commands.list:
    get:
      description: Lists commands for a Dev organization.
      operationId: commands-list
      parameters:
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: Filtering based on executor_type.
          explode: false
          in: query
          name: executor_type
          schema:
            type: array
            items:
              $ref: '#/components/schemas/command-action-executor-type'
        - description: |
            The maximum number of commands to return per page. The default is
            '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: Filter commands based on namespace.
          explode: false
          in: query
          name: namespace
          schema:
            type: array
            items:
              type: string
              format: text
        - description: |
            List of fields to sort the commands items by and how to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
        - description: |
            ID of the object where command is invoked (work/part/conversation).
          explode: false
          in: query
          name: source_object_id
          schema:
            type: string
            format: id
        - description: Filter commands based on status.
          explode: false
          in: query
          name: status
          schema:
            type: array
            items:
              $ref: '#/components/schemas/command-status'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commands-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Commands
      tags:
        - commands
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: CommandsListQuery
    post:
      description: Lists commands for a Dev organization.
      operationId: commands-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/commands-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commands-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Commands (POST)
      tags:
        - commands
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /commands.update:
    post:
      description: Updates a command.
      operationId: commands-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/command-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/command-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Command
      tags:
        - commands
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /conversations.create:
    post:
      description: Creates a conversation.
      operationId: conversations-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-create-response'
          description: The response to creating a new conversation.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Conversation
      tags:
        - conversations
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /conversations.delete:
    post:
      description: Deletes the requested conversation.
      operationId: conversations-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-delete-response'
          description: The response for deleting a conversation.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Conversation
      tags:
        - conversations
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /conversations.get:
    get:
      description: Gets the requested conversation's information.
      operationId: conversations-get
      parameters:
        - description: The requested conversation's ID.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-get-response'
          description: The response to getting a conversation's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Conversation
      tags:
        - conversations
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: ConversationsGetQuery
    post:
      description: Gets the requested conversation's information.
      operationId: conversations-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-get-response'
          description: The response to getting a conversation's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Conversation (POST)
      tags:
        - conversations
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /conversations.list:
    get:
      description: Lists the available conversations.
      operationId: conversations-list
      parameters:
        - description: |
            Filters for conversations belonging to any of the provided parts.
          explode: false
          in: query
          name: applies_to_parts
          schema:
            type: array
            example:
              - PROD-12345
            items:
              type: string
              format: id
        - description: |
            Filters for tickets that are associated with any of the brands.
          explode: false
          in: query
          name: brand
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            Filters for conversations that are associated with any of the
            channels.
          explode: false
          in: query
          name: channels
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: Filters for conversation that belong to the given groups.
          explode: false
          in: query
          name: group
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            Filters for conversations that are created by verified users.
          explode: false
          in: query
          name: is_creator_verified
          schema:
            type: boolean
        - description: Filters for conversations that are frozen.
          explode: false
          in: query
          name: is_frozen
          schema:
            type: boolean
        - description: Filters for conversations that are spam.
          explode: false
          in: query
          name: is_spam
          schema:
            type: boolean
        - description: |
            The maximum number of conversations to return. The default is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            Filters for conversations where these users are participants.
          explode: false
          in: query
          name: members
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            Filters for objects created after the provided timestamp (inclusive).
          explode: false
          in: query
          name: modified_date.after
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          explode: false
          in: query
          name: modified_date.before
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: Filters for conversations owned by any of these users.
          explode: false
          in: query
          name: owned_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - deprecated: true
          description: |
            Filters for conversations that are associated with any of the
            provided Rev organizations.
          explode: false
          in: query
          name: rev_org
          schema:
            type: array
            deprecated: true
            example:
              - REV-AbCdEfGh
            items:
              type: string
              format: id
        - description: |
            Filters for conversations that are associated with any of the
            provided Rev organizations.
          explode: false
          in: query
          name: rev_orgs
          schema:
            type: array
            example:
              - REV-AbCdEfGh
            items:
              type: string
              format: id
        - description: Filters for records with any of the provided SLA stages.
          explode: false
          in: query
          name: sla_summary.stage
          schema:
            type: array
            items:
              $ref: '#/components/schemas/sla-summary-stage'
        - description: |
            Filters for conversations with any of the provided source channels.
          explode: false
          in: query
          name: source_channel
          schema:
            type: array
            items:
              type: string
              format: text
        - description: |
            Filters for conversations that are associated with the source
            channel.
          explode: false
          in: query
          name: source_channel_v2
          schema:
            type: array
            items:
              type: string
              format: id
        - deprecated: true
          description: |
            Filters for conversations with any of the provided source channels.
          explode: false
          in: query
          name: source_channels
          schema:
            type: array
            deprecated: true
            items:
              type: string
              format: text
        - description: Filters for records in the provided stage(s) by name.
          explode: false
          in: query
          name: stage.name
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Filters for conversations with any of the provided states.
          explode: false
          in: query
          name: state
          schema:
            type: array
            items:
              type: string
              format: text
        - deprecated: true
          description: Filters for conversations with any of the provided tags.
          explode: false
          in: query
          name: tags
          schema:
            type: array
            deprecated: true
            example:
              - TAG-12345
            items:
              type: string
              format: id
        - description: The ID of the tag.
          explode: false
          in: query
          name: tags_v2.id
          schema:
            type: string
            example: TAG-12345
            format: id
        - description: |
            The value for the object's association with the tag. If specified,
            the value must be one that's specified in the tag's allowed values.
          explode: false
          in: query
          name: tags_v2.value
          schema:
            type: string
            format: text
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-list-response'
          description: The response to listing the conversations.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Conversations
      tags:
        - conversations
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: ConversationsListQuery
    post:
      description: Lists the available conversations.
      operationId: conversations-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-list-response'
          description: The response to listing the conversations.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Conversations (POST)
      tags:
        - conversations
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /conversations.update:
    post:
      description: Updates the requested conversation.
      operationId: conversations-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-update-response'
          description: The response for updating a conversation.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Conversation
      tags:
        - conversations
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /custom-objects.count:
    get:
      description: Counts custom objects.
      operationId: custom-objects-count
      parameters:
        - description: Leaf type to filter.
          explode: false
          in: query
          name: leaf_type
          required: true
          schema:
            type: string
            format: text
        - description: List of filters to apply.
          explode: false
          in: query
          name: filters
          schema:
            type: array
            items: {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-objects-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Count Custom Objects
      tags:
        - customization
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: CustomObjectsCountQuery
    post:
      description: Counts custom objects.
      operationId: custom-objects-count-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-objects-count-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-objects-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Count Custom Objects (POST)
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /custom-objects.create:
    post:
      description: Creates a custom object.
      operationId: custom-objects-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-objects-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-objects-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Custom Object
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /custom-objects.delete:
    post:
      description: Deletes a custom object.
      operationId: custom-objects-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-objects-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-objects-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Custom Object
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /custom-objects.get:
    get:
      description: Gets a custom object.
      operationId: custom-objects-get
      parameters:
        - description: The ID of the custom object to get.
          explode: false
          in: query
          name: id
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-objects-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Custom Object
      tags:
        - customization
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: CustomObjectsGetQuery
    post:
      description: Gets a custom object.
      operationId: custom-objects-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-objects-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-objects-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Custom Object (POST)
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /custom-objects.list:
    get:
      description: Lists custom objects.
      operationId: custom-objects-list
      parameters:
        - description: Leaf type to filter.
          explode: false
          in: query
          name: leaf_type
          required: true
          schema:
            type: string
            format: text
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: List of filters to apply.
          explode: false
          in: query
          name: filter
          schema:
            type: array
            items: {}
        - description: List of filters to apply.
          explode: false
          in: query
          name: filters
          schema:
            type: array
            items: {}
        - description: The maximum number of items.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            The list of fields to sort the items by and how to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-objects-list-response'
          description: |
            The response to listing all custom objects matching the filter
            criteria.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Custom Objects
      tags:
        - customization
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: CustomObjectsListQuery
    post:
      description: Lists custom objects.
      operationId: custom-objects-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-objects-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-objects-list-response'
          description: |
            The response to listing all custom objects matching the filter
            criteria.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Custom Objects (POST)
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /custom-objects.update:
    post:
      description: Updates a custom object.
      operationId: custom-objects-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-objects-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-objects-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Custom Object
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-orgs.auth-connections.create:
    post:
      description: |
        Creates a new enterprise authentication connection for a Dev
        organization. This authentication connection will not be enabled by
        default for the organization and the user will need to explicitly
        enable this. Only 5 authentication connections can be created by an
        organization.
      operationId: dev-org-auth-connections-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-org-auth-connections-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-create-response'
          description: |
            Response for the request to create a new enterprise authentication
            connection.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Dev Orgs Auth Connection
      tags:
        - auth-connections
        - dev-orgs
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-orgs.auth-connections.delete:
    post:
      description: |
        Deletes an authentication connection. Only enterprise connections which
        are explicitly set up for a Dev organization can be deleted. Default
        connections can not be deleted using this method.
      operationId: dev-org-auth-connections-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-org-auth-connections-delete-request'
        required: true
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Dev Orgs Auth Connection
      tags:
        - auth-connections
        - dev-orgs
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-orgs.auth-connections.get:
    get:
      description: Retrieves the details for an authentication connection.
      operationId: dev-org-auth-connections-get
      parameters:
        - description: ID of the authentication connection.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: text
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-get-response'
          description: |
            Response object encapsulating the configuration details of an
            authentication connection.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Dev Orgs Auth Connection
      tags:
        - auth-connections
        - dev-orgs
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: DevOrgAuthConnectionsGetQuery
    post:
      description: Retrieves the details for an authentication connection.
      operationId: dev-org-auth-connections-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-org-auth-connections-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-get-response'
          description: |
            Response object encapsulating the configuration details of an
            authentication connection.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Dev Orgs Auth Connection (POST)
      tags:
        - auth-connections
        - dev-orgs
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-orgs.auth-connections.list:
    get:
      description: |
        Lists all the authentication connections available for a Dev
        organization. This list will include both social and enterprise
        connections which are either available by default or are explicitly
        created by the user.
      operationId: dev-org-auth-connections-list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-list-response'
          description: |
            Response object for the request to list all the social and enterprise
            authentication connections configured for a Dev organization.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Dev Orgs Auth Connections
      tags:
        - auth-connections
        - dev-orgs
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: DevOrgAuthConnectionsListQuery
    post:
      description: |
        Lists all the authentication connections available for a Dev
        organization. This list will include both social and enterprise
        connections which are either available by default or are explicitly
        created by the user.
      operationId: dev-org-auth-connections-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/empty'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-list-response'
          description: |
            Response object for the request to list all the social and enterprise
            authentication connections configured for a Dev organization.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Dev Orgs Auth Connections (POST)
      tags:
        - auth-connections
        - dev-orgs
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-orgs.auth-connections.toggle:
    post:
      description: |
        Enable or disable an authentication connection for a Dev organization.
        Atleast one authentication connection must be enabled for a Dev
        organization.
      operationId: dev-org-auth-connections-toggle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-org-auth-connections-toggle-request'
        required: true
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Toggle Dev Orgs Auth Connections
      tags:
        - auth-connections
        - dev-orgs
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-orgs.auth-connections.update:
    post:
      description: Updates an authentication connection.
      operationId: dev-org-auth-connections-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-org-auth-connections-update-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-update-response'
          description: |
            Response for the request to update an enterprise authentication
            connection.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Dev Orgs Auth Connection
      tags:
        - auth-connections
        - dev-orgs
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-orgs.get:
    get:
      description: |
        Gets the Dev organization's information of the authenticated user.
      operationId: dev-orgs-get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-get-response'
          description: The response to get a Dev organization's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Dev Org
      tags:
        - dev-orgs
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: DevOrgsGetQuery
    post:
      description: |
        Gets the Dev organization's information of the authenticated user.
      operationId: dev-orgs-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-orgs-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-get-response'
          description: The response to get a Dev organization's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Dev Org (POST)
      tags:
        - dev-orgs
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-users.activate:
    post:
      description: Activates the requested user.
      operationId: dev-users-activate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-activate-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-activate-response'
          description: The response to activate the Dev user.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Activate Dev Users
      tags:
        - dev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-users.create:
    post:
      description: Creates a Dev user for a Dev organization.
      operationId: dev-users-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-create-response'
          description: |
            Response object for request to create a new Dev user for a Dev
            organization.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Dev User
      tags:
        - dev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-users.deactivate:
    post:
      description: Deactivates the requested user.
      operationId: dev-users-deactivate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-deactivate-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-deactivate-response'
          description: The response to deactivate the Dev user.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Deactivate Dev Users
      tags:
        - dev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-users.get:
    get:
      description: Gets the requested user's information.
      operationId: dev-users-get
      parameters:
        - description: User ID of the requested Dev user.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-get-response'
          description: The response to getting the information for the Dev user.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Dev User
      tags:
        - dev-users
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: DevUsersGetQuery
    post:
      description: Gets the requested user's information.
      operationId: dev-users-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-get-response'
          description: The response to getting the information for the Dev user.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Dev User (POST)
      tags:
        - dev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-users.identities.link:
    post:
      description: Links an external/secondary identity to the Dev user.
      operationId: dev-users-identities-link
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-identities-link-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-identities-link-response'
          description: |
            Response for the request to link an external identity to a Dev user.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Link Dev Users Identities
      tags:
        - dev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-users.identities.unlink:
    post:
      description: Unlinks an external/secondary identity from the Dev user.
      operationId: dev-users-identities-unlink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-identities-unlink-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-identities-unlink-response'
          description: |
            Response for the request to unlink an external identity from a Dev
            user.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Unlink Dev Users Identities
      tags:
        - dev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-users.list:
    get:
      description: Lists users within your organization.
      operationId: dev-users-list
      parameters:
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: Filters Dev users based on email addresses.
          explode: false
          in: query
          name: email
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Unique ID of the user in the external source.
          explode: false
          in: query
          name: external_identity.id
          schema:
            type: string
            format: text
        - description: Issuer of the external identity of the user.
          explode: false
          in: query
          name: external_identity.issuer
          schema:
            type: string
            format: text
        - description: |
            The maximum number of Dev users to return. The default is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            Fields to sort the Dev users by and the direction to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
        - description: Filters Dev users based on state.
          explode: false
          in: query
          name: state
          schema:
            type: array
            items:
              $ref: '#/components/schemas/user-state'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-list-response'
          description: The response to listing the Dev users.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Dev Users
      tags:
        - dev-users
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: DevUsersListQuery
    post:
      description: Lists users within your organization.
      operationId: dev-users-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-list-response'
          description: The response to listing the Dev users.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Dev Users (POST)
      tags:
        - dev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-users.merge:
    post:
      description: |
        Merges the identity of a secondary Dev user with the primary Dev user.
        The account of the secondary Dev user will be deactivated and will no
        longer be able to log into DevRev. All objects - issues, tickets, parts
        etc. owned by the secondary Dev user will be transferred to the primary
        Dev user.
      operationId: dev-users-merge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-merge-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-merge-response'
          description: Response object for request to merge Dev users.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Merge Dev Users
      tags:
        - dev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-users.self:
    get:
      description: Gets the authenticated user's information.
      operationId: dev-users-self
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-self-response'
          description: |
            The response to getting the information for the authenticated user.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Self Dev User
      tags:
        - dev-users
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: DevUsersSelfQuery
    post:
      description: Gets the authenticated user's information.
      operationId: dev-users-self-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-self-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-self-response'
          description: |
            The response to getting the information for the authenticated user.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Self Dev User (POST)
      tags:
        - dev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-users.self.update:
    post:
      description: Updates the authenticated user.
      operationId: dev-users-self-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-self-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-update-response'
          description: The response to update a Dev user.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Dev Users Self
      tags:
        - dev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /dev-users.update:
    post:
      description: Updates the user corresponding to the input Id.
      operationId: dev-users-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-update-response'
          description: The response to update a Dev user.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Dev User
      tags:
        - dev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /directories.count:
    get:
      description: Get count of directories matching given filter.
      operationId: directories-count
      parameters:
        - description: |
            Filters for directories created by any of the provided users.
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            Filters for directories modified by any of the provided users.
          explode: false
          in: query
          name: modified_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/directories-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Count Directories
      tags:
        - directory
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: DirectoriesCountQuery
    post:
      description: Get count of directories matching given filter.
      operationId: directories-count-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/directories-count-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/directories-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Count Directories (POST)
      tags:
        - directory
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /directories.create:
    post:
      description: Creates a directory for the specified inputs.
      operationId: directories-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/directories-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/directories-create-response'
          description: Create directory response.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Directory
      tags:
        - directory
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /directories.delete:
    post:
      description: Delete the specified directory.
      operationId: directories-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/directories-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/directories-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Directory
      tags:
        - directory
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /directories.get:
    get:
      description: Gets the specified directory.
      operationId: directories-get
      parameters:
        - description: The ID of the requested directory.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/directories-get-response'
          description: Get directory response.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Directory
      tags:
        - directory
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: DirectoriesGetQuery
    post:
      description: Gets the specified directory.
      operationId: directories-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/directories-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/directories-get-response'
          description: Get directory response.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Directory (POST)
      tags:
        - directory
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /directories.list:
    get:
      description: Lists directories matching the request.
      operationId: directories-list
      parameters:
        - description: |
            Filters for directories created by any of the provided users.
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            The maximum number of directories to return. The default is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            Filters for directories modified by any of the provided users.
          explode: false
          in: query
          name: modified_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/directories-list-response'
          description: List directory response.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Directories
      tags:
        - directory
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: DirectoriesListQuery
    post:
      description: Lists directories matching the request.
      operationId: directories-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/directories-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/directories-list-response'
          description: List directory response.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Directories (POST)
      tags:
        - directory
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /directories.update:
    post:
      description: Updates the specified directory.
      operationId: directories-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/directories-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/directories-update-response'
          description: Update directory response.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Directory
      tags:
        - directory
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /groups.create:
    post:
      description: Creates a new group. A group is a collection of users.
      operationId: groups-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-create-response'
          description: The response to group creation.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Group
      tags:
        - groups
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /groups.get:
    get:
      description: Gets the requested group.
      operationId: groups-get
      parameters:
        - description: The ID of the group to get.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-get-response'
          description: The response to getting the group.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Group
      tags:
        - groups
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: GroupsGetQuery
    post:
      description: Gets the requested group.
      operationId: groups-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-get-response'
          description: The response to getting the group.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Group (POST)
      tags:
        - groups
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /groups.list:
    get:
      description: Lists the available groups.
      operationId: groups-list
      parameters:
        - description: Filters the groups on the basis of creator.
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: Filters the groups based on the group type.
          explode: false
          in: query
          name: group_type
          schema:
            type: array
            items:
              $ref: '#/components/schemas/group-type'
        - description: Filter groups by ingestion source(s).
          explode: false
          in: query
          name: ingestion_source
          schema:
            type: array
            items:
              $ref: '#/components/schemas/group-ingestion-source'
        - description: Whether to fetch default or custom groups.
          explode: false
          in: query
          name: is_default
          schema:
            type: boolean
        - description: |
            The maximum number of groups to return. The default is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: Filters the groups on basis of member type.
          explode: false
          in: query
          name: member_type
          schema:
            type: array
            items:
              $ref: '#/components/schemas/group-member-type'
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: Filters the groups on the basis of group name.
          explode: false
          in: query
          name: name
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Comma-separated fields to sort the groups by.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
        - description: Filters for issues with this specific external reference.
          explode: false
          in: query
          name: sync_metadata.external_reference
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Filters for works with selected sync statuses.
          explode: false
          in: query
          name: sync_metadata.last_sync_in.status
          schema:
            type: array
            items:
              $ref: '#/components/schemas/sync-metadata-filter-sync-in-filter-status'
        - description: Filters for works modified with selected sync history.
          explode: false
          in: query
          name: sync_metadata.last_sync_in.sync_history
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for works modified with selected sync units.
          explode: false
          in: query
          name: sync_metadata.last_sync_in.sync_unit
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for works with selected sync statuses.
          explode: false
          in: query
          name: sync_metadata.last_sync_out.status
          schema:
            type: array
            items:
              $ref: '#/components/schemas/sync-metadata-filter-sync-out-filter-status'
        - description: Filters for works modified with selected sync history.
          explode: false
          in: query
          name: sync_metadata.last_sync_out.sync_history
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for works modified with selected sync units.
          explode: false
          in: query
          name: sync_metadata.last_sync_out.sync_unit
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            Filters for issues synced from this specific origin system.
          explode: false
          in: query
          name: sync_metadata.origin_system
          schema:
            type: array
            items:
              type: string
              format: text
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-list-response'
          description: The response to listing the groups.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Groups
      tags:
        - groups
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: GroupsListQuery
    post:
      description: Lists the available groups.
      operationId: groups-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-list-response'
          description: The response to listing the groups.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Groups (POST)
      tags:
        - groups
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /groups.members.add:
    post:
      description: Adds a member to a group.
      operationId: group-members-add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-members-add-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-members-add-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Add Groups Members
      tags:
        - groups
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /groups.members.list:
    get:
      description: Lists the members in a group.
      operationId: group-members-list
      parameters:
        - description: ID of the group for which to list members.
          explode: false
          in: query
          name: group
          required: true
          schema:
            type: string
            format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            The maximum number of members to return. If not set, then the default
            is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-members-list-response'
          description: List of group members.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Groups Members
      tags:
        - groups
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: GroupMembersListQuery
    post:
      description: Lists the members in a group.
      operationId: group-members-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-members-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-members-list-response'
          description: List of group members.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Groups Members (POST)
      tags:
        - groups
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /groups.members.remove:
    post:
      description: Removes a member from a group.
      operationId: group-members-remove
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-members-remove-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-members-remove-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Remove Groups Members
      tags:
        - groups
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /groups.update:
    post:
      description: Updates the requested group.
      operationId: groups-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-update-response'
          description: The response to group update.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Group
      tags:
        - groups
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /keyrings.authorize:
    get:
      description: OAuth2 authorization callback.
      operationId: keyrings-create-callback
      parameters:
        - description: Code to exchange for an access token.
          explode: false
          in: query
          name: code
          required: true
          schema:
            type: string
            format: text
        - description: State value given to the authorization request.
          explode: false
          in: query
          name: state
          required: true
          schema:
            type: string
            format: text
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      security: []
      summary: Authorize Keyrings
      tags:
        - keyrings
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: KeyringsCreateCallbackQuery
    post:
      description: OAuth2 authorization callback.
      operationId: keyrings-create-callback-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/keyrings-create-callback-request'
        required: true
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Authorize Keyrings (POST)
      tags:
        - keyrings
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /links.create:
    post:
      description: |
        Creates a link between two objects to indicate a relationship.
      operationId: links-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-create-response'
          description: The response to creating a new link.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Link
      tags:
        - links
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /links.delete:
    post:
      description: Deletes a link.
      operationId: links-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-delete-response'
          description: The response for deleting a link.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Link
      tags:
        - links
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /links.get:
    get:
      description: Gets the requested link's information.
      operationId: links-get
      parameters:
        - description: The requested link's ID.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-get-response'
          description: The response to getting a link's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Link
      tags:
        - links
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: LinksGetQuery
    post:
      description: Gets the requested link's information.
      operationId: links-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-get-response'
          description: The response to getting a link's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Link (POST)
      tags:
        - links
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /links.list:
    get:
      description: Lists the available links.
      operationId: links-list
      parameters:
        - description: The ID of the object to list the links for.
          explode: false
          in: query
          name: object
          required: true
          schema:
            type: string
            format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            The direction of the links to list, otherwise if not present, then
            links in both directions (source and target) are included.
          explode: false
          in: query
          name: direction
          schema:
            $ref: '#/components/schemas/links-direction'
        - description: |
            The maximum number of links to return. If not set, then the default
            is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The link type(s) to filter for, otherwise if not present, all link
            types are included.
          explode: false
          in: query
          name: link_type
          schema:
            type: array
            items:
              $ref: '#/components/schemas/link-type'
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            The object types to filter for, otherwise if not present, all object
            types are included.
          explode: false
          in: query
          name: object_types
          schema:
            type: array
            items:
              $ref: '#/components/schemas/link-endpoint-type'
        - deprecated: true
          description: |
            The link types to filter for, otherwise if not present, all link
            types are included.
          explode: false
          in: query
          name: types
          schema:
            type: array
            deprecated: true
            items:
              $ref: '#/components/schemas/link-type'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-list-response'
          description: The response to listing the links.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Links
      tags:
        - links
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: LinksListQuery
    post:
      description: Lists the available links.
      operationId: links-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-list-response'
          description: The response to listing the links.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Links (POST)
      tags:
        - links
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /links.replace:
    post:
      description: Replaces a link.
      operationId: links-replace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links-replace-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-replace-response'
          description: The response to replacing a link.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Replace Links
      tags:
        - links
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /meetings.count:
    get:
      description: Counts the meeting records.
      operationId: meetings-count
      parameters:
        - description: Filters for meeting on specified channels.
          explode: false
          in: query
          name: channel
          schema:
            type: array
            items:
              $ref: '#/components/schemas/meeting-channel'
        - description: Filters for meetings created by the specified user(s).
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for meetings with the provided external_ref(s).
          explode: false
          in: query
          name: external_ref
          schema:
            type: array
            items:
              type: string
              format: text
        - description: |
            Filters for link type in links associated with the meeting.
          explode: false
          in: query
          name: links.link_type
          schema:
            type: string
            format: text
        - description: |
            Filters for target id in links associated with the meeting.
          explode: false
          in: query
          name: links.target
          schema:
            type: string
            format: id
        - description: |
            Filters for target object type in links associated with the meeting.
          explode: false
          in: query
          name: links.target_object_type
          schema:
            type: string
            format: text
        - description: Filter for meeting on specified Member Ids.
          explode: false
          in: query
          name: members
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filter for meeting on specified organizers.
          explode: false
          in: query
          name: organizer
          schema:
            type: array
            items:
              type: string
              format: id
        - deprecated: true
          description: Filters for meetings with the provided parent.
          explode: false
          in: query
          name: parent
          schema:
            type: array
            deprecated: true
            example:
              - ACC-12345
            items:
              type: string
              format: id
        - description: Filters for meeting on specified state or outcomes.
          explode: false
          in: query
          name: state
          schema:
            type: array
            items:
              $ref: '#/components/schemas/meeting-state'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Count Meetings
      tags:
        - meetings
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: MeetingsCountQuery
    post:
      description: Counts the meeting records.
      operationId: meetings-count-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/meetings-count-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Count Meetings (POST)
      tags:
        - meetings
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /meetings.create:
    post:
      description: Creates a new meeting record.
      operationId: meetings-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/meetings-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Meeting
      tags:
        - meetings
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /meetings.delete:
    post:
      description: Deletes the meeting record.
      operationId: meetings-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/meetings-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Meeting
      tags:
        - meetings
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /meetings.get:
    get:
      description: Gets the meeting record.
      operationId: meetings-get
      parameters:
        - description: The meeting's ID.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Meeting
      tags:
        - meetings
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: MeetingsGetQuery
    post:
      description: Gets the meeting record.
      operationId: meetings-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/meetings-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Meeting (POST)
      tags:
        - meetings
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /meetings.list:
    get:
      description: Lists the meeting records.
      operationId: meetings-list
      parameters:
        - description: Filters for meeting on specified channels.
          explode: false
          in: query
          name: channel
          schema:
            type: array
            items:
              $ref: '#/components/schemas/meeting-channel'
        - description: Filters for meetings created by the specified user(s).
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: Filters for meetings with the provided external_ref(s).
          explode: false
          in: query
          name: external_ref
          schema:
            type: array
            items:
              type: string
              format: text
        - description: The maximum number of meetings to return.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            Filters for link type in links associated with the meeting.
          explode: false
          in: query
          name: links.link_type
          schema:
            type: string
            format: text
        - description: |
            Filters for target id in links associated with the meeting.
          explode: false
          in: query
          name: links.target
          schema:
            type: string
            format: id
        - description: |
            Filters for target object type in links associated with the meeting.
          explode: false
          in: query
          name: links.target_object_type
          schema:
            type: string
            format: text
        - description: Filter for meeting on specified Member Ids.
          explode: false
          in: query
          name: members
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: Filter for meeting on specified organizers.
          explode: false
          in: query
          name: organizer
          schema:
            type: array
            items:
              type: string
              format: id
        - deprecated: true
          description: Filters for meetings with the provided parent.
          explode: false
          in: query
          name: parent
          schema:
            type: array
            deprecated: true
            example:
              - ACC-12345
            items:
              type: string
              format: id
        - description: |
            Fields to sort the meetings by and the direction to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
        - description: Filters for meeting on specified state or outcomes.
          explode: false
          in: query
          name: state
          schema:
            type: array
            items:
              $ref: '#/components/schemas/meeting-state'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Meetings
      tags:
        - meetings
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: MeetingsListQuery
    post:
      description: Lists the meeting records.
      operationId: meetings-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/meetings-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Meetings (POST)
      tags:
        - meetings
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /meetings.update:
    post:
      description: Updates the meeting record.
      operationId: meetings-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/meetings-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Meeting
      tags:
        - meetings
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /metric-action.execute:
    post:
      description: Executes the metric action on the given object.
      operationId: metric-action-execute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metric-action-execute-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metric-action-execute-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Execute Metric Action
      tags:
        - slas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /metric-definitions.create:
    post:
      description: Creates a custom metric definition
      operationId: metric-definitions-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metric-definitions-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metric-definitions-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Metric Definition
      tags:
        - slas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /metric-definitions.delete:
    post:
      description: Deletes a custom metric definition
      operationId: metric-definitions-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metric-definitions-delete-request'
        required: true
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metric-definitions-delete-response'
          description: The response to deleting a metric definition.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Metric Definition
      tags:
        - slas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /metric-definitions.get:
    get:
      description: Gets a custom metric definition
      operationId: metric-definitions-get
      parameters:
        - description: The ID of the metric definition to get.
          explode: false
          in: query
          name: id
          schema:
            type: string
            format: id
        - description: The unique human readable name of the metric.
          explode: false
          in: query
          name: name
          schema:
            type: string
            format: text
            maxLength: 64
            minLength: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metric-definitions-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Metric Definition
      tags:
        - slas
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: MetricDefinitionsGetQuery
    post:
      description: Gets a custom metric definition
      operationId: metric-definitions-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metric-definitions-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metric-definitions-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Metric Definition (POST)
      tags:
        - slas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /metric-definitions.list:
    get:
      description: Lists metric definitions matching a filter.
      operationId: metric-definitions-list
      parameters:
        - description: The type of objects the metric definition applies to.
          explode: false
          in: query
          name: applies_to_type
          schema:
            type: array
            items:
              $ref: '#/components/schemas/metric-definition-applies-to'
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            Whether to include custom metrics in the response. If not set, then
            custom metrics are excluded.
          explode: false
          in: query
          name: include_custom_metrics
          schema:
            type: boolean
        - description: |
            The maximum number of records to return. The default is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            Fields to sort the records by and the direction to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
        - description: The status of the metric definition.
          explode: false
          in: query
          name: status
          schema:
            type: array
            items:
              $ref: '#/components/schemas/metric-definition-status'
        - description: The type of metric definitions sought.
          explode: false
          in: query
          name: type
          schema:
            type: array
            items:
              $ref: '#/components/schemas/metric-definition-metric-type'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metric-definitions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Metric Definitions
      tags:
        - slas
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: MetricDefinitionsListQuery
    post:
      description: Lists metric definitions matching a filter.
      operationId: metric-definitions-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metric-definitions-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metric-definitions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Metric Definitions (POST)
      tags:
        - slas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /metric-definitions.update:
    post:
      description: Updates a custom metric definition
      operationId: metric-definitions-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metric-definitions-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metric-definitions-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Metric Definition
      tags:
        - slas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /metric-trackers.get:
    get:
      description: Gets a metric tracker.
      operationId: metric-trackers-get
      parameters:
        - description: The ID of the metric that is being tracked.
          explode: false
          in: query
          name: metric
          required: true
          schema:
            type: string
            format: id
        - description: |
            The ID of the underlying object on which the metric is being tracked.
          explode: false
          in: query
          name: object
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metric-trackers-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Metric Tracker
      tags:
        - slas
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: MetricTrackersGetQuery
    post:
      description: Gets a metric tracker.
      operationId: metric-trackers-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metric-trackers-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metric-trackers-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Metric Tracker (POST)
      tags:
        - slas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /org-schedule-fragments.create:
    post:
      description: Creates an organization schedule fragment.
      operationId: org-schedule-fragments-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedule-fragments-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedule-fragments-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Org Schedule Fragment
      tags:
        - schedules
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /org-schedule-fragments.get:
    get:
      description: Gets an organization schedule fragment.
      operationId: org-schedule-fragments-get
      parameters:
        - description: Organization schedule Fragment ID.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedule-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Org Schedule Fragment
      tags:
        - schedules
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: OrgScheduleFragmentsGetQuery
    post:
      description: Gets an organization schedule fragment.
      operationId: org-schedule-fragments-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedule-fragments-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedule-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Org Schedule Fragment (POST)
      tags:
        - schedules
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /org-schedule-fragments.transition:
    post:
      description: Changes stage of an organization schedule fragment.
      operationId: org-schedule-fragments-transition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedule-fragments-transition-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedule-fragments-transition-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Transition Org Schedule Fragments
      tags:
        - schedules
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /org-schedules.create:
    post:
      description: |
        Creates an organization schedule with a default weekly organization
        schedule and a list of organization schedule fragments.
      operationId: org-schedules-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Org Schedule
      tags:
        - schedules
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /org-schedules.evaluate:
    get:
      description: Evaluates an organization's schedule at specified instants.
      operationId: org-schedules-evaluate
      parameters:
        - description: Organization schedule ID.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
        - description: Time instants to evaluate the organization schedule for.
          explode: false
          in: query
          name: instants
          required: true
          schema:
            type: array
            example:
              - "2023-01-01T12:00:00.000Z"
            items:
              type: string
              format: date-time
            minItems: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-evaluate-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Evaluate Org Schedules
      tags:
        - schedules
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: OrgSchedulesEvaluateQuery
    post:
      description: Evaluates an organization's schedule at specified instants.
      operationId: org-schedules-evaluate-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-evaluate-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-evaluate-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Evaluate Org Schedules (POST)
      tags:
        - schedules
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /org-schedules.get:
    get:
      description: Gets an organization schedule.
      operationId: org-schedules-get
      parameters:
        - description: Organization schedule ID.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Org Schedule
      tags:
        - schedules
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: OrgSchedulesGetQuery
    post:
      description: Gets an organization schedule.
      operationId: org-schedules-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Org Schedule (POST)
      tags:
        - schedules
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /org-schedules.list:
    get:
      description: Gets list of organization schedules.
      operationId: org-schedules-list
      parameters:
        - description: Creator ID the filter matches.
          explode: false
          in: query
          name: created_by_id
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            Max number of organization schedules returned in a page. Default is
            50.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: The organization schedule statuses the filter matches.
          explode: false
          in: query
          name: status
          schema:
            type: array
            items:
              $ref: '#/components/schemas/org-schedule-status'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Org Schedules
      tags:
        - schedules
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: OrgSchedulesListQuery
    post:
      description: Gets list of organization schedules.
      operationId: org-schedules-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Org Schedules (POST)
      tags:
        - schedules
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /org-schedules.set-future:
    post:
      description: |
        Sets next organization schedule fragment which must begin the day the
        last existing fragment ends.
      operationId: org-schedules-set-future
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-set-future-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-set-future-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Set-Future Org Schedules
      tags:
        - schedules
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /org-schedules.transition:
    post:
      description: Publishes or archives an organization schedule.
      operationId: org-schedules-transition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-transition-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-transition-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Transition Org Schedules
      tags:
        - schedules
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /org-schedules.update:
    post:
      description: Updates an organization schedule.
      operationId: org-schedules-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-update-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Org Schedule
      tags:
        - schedules
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /parts.create:
    post:
      description: Creates new [part](https://devrev.ai/docs/product/parts).
      operationId: parts-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Part
      tags:
        - parts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /parts.delete:
    post:
      description: Deletes a [part](https://devrev.ai/docs/product/parts).
      operationId: parts-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Part
      tags:
        - parts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /parts.get:
    get:
      description: |
        Gets a [part's](https://devrev.ai/docs/product/parts) information.
      operationId: parts-get
      parameters:
        - description: The ID of the part to retrieve.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            example: PROD-12345
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Part
      tags:
        - parts
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: PartsGetQuery
    post:
      description: |
        Gets a [part's](https://devrev.ai/docs/product/parts) information.
      operationId: parts-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Part (POST)
      tags:
        - parts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /parts.list:
    get:
      description: |
        Lists a collection of [parts](https://devrev.ai/docs/product/parts).
      operationId: parts-list
      parameters:
        - description: Filters for parts created by any of these users.
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            The maximum number of parts to return. The default is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: Filters for parts modified by any of these users.
          explode: false
          in: query
          name: modified_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: Filters for parts of the provided name(s).
          explode: false
          in: query
          name: name
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Filters for parts owned by any of these users.
          explode: false
          in: query
          name: owned_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: Number of levels to fetch the part hierarchy up to.
          explode: false
          in: query
          name: parent_part.level
          schema:
            type: integer
            format: int32
            minimum: 1
        - description: |
            Part IDs to fetch the hierarchy for. Required if any parent_part.*
            fields are provided.
          explode: false
          in: query
          name: parent_part.parts
          schema:
            type: array
            example:
              - PROD-12345
            items:
              type: string
              format: id
            minItems: 1
        - description: |
            Fields to sort the parts by and the direction to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
        - description: Filters for part with any of the provided tags.
          explode: false
          in: query
          name: tags
          schema:
            type: array
            example:
              - TAG-12345
            items:
              type: string
              format: id
        - description: Filters for parts of the provided type(s).
          explode: false
          in: query
          name: type
          schema:
            type: array
            items:
              $ref: '#/components/schemas/part-type'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Parts
      tags:
        - parts
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: PartsListQuery
    post:
      description: |
        Lists a collection of [parts](https://devrev.ai/docs/product/parts).
      operationId: parts-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Parts (POST)
      tags:
        - parts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /parts.update:
    post:
      description: |
        Updates a [part's](https://devrev.ai/docs/product/parts) information.
      operationId: parts-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Part
      tags:
        - parts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /reactions.list:
    get:
      description: Lists the reactors for an object.
      operationId: reactions-list
      parameters:
        - description: |
            The emoji to list the reactors for. This can be the short name of the
            emoji (e.g. "joy"), or the code point (e.g. "1f602").
          explode: false
          in: query
          name: emoji
          required: true
          schema:
            type: string
            format: text
        - description: The ID of the object to list reactors for.
          explode: false
          in: query
          name: object
          required: true
          schema:
            type: string
            example: don:core:dvrv-us-1:devo/example:ticket/123:comment/comment-id
            format: id
        - description: |
            The cursor to resume iteration from, otherwise if not provided, then
            iteration starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: The maximum number of reactors to return.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Reactions
      tags:
        - timeline-entries
        - works
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: ReactionsListQuery
    post:
      description: Lists the reactors for an object.
      operationId: reactions-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reactions-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Reactions (POST)
      tags:
        - timeline-entries
        - works
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /reactions.update:
    post:
      description: Updates a reaction for an object.
      operationId: reactions-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reactions-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactions-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Reaction
      tags:
        - timeline-entries
        - works
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /rev-orgs.create:
    post:
      description: |
        Creates a Rev organization in the authenticated user's Dev
        organization.
      operationId: rev-orgs-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-create-response'
          description: |
            Response object for request to create a new Rev organization.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Rev Org
      tags:
        - rev-orgs
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /rev-orgs.delete:
    post:
      description: Deletes the Rev organization.
      operationId: rev-orgs-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-delete-response'
          description: The response to deleting a Rev organization.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Rev Org
      tags:
        - rev-orgs
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /rev-orgs.get:
    get:
      description: Retrieves the Rev organization's information.
      operationId: rev-orgs-get
      parameters:
        - description: |
            The ID of account for which default Rev organization is to be
            fetched.
          explode: false
          in: query
          name: account
          schema:
            type: string
            example: ACC-12345
            format: id
        - description: The ID of the required Rev organization.
          explode: false
          in: query
          name: id
          schema:
            type: string
            example: REV-AbCdEfGh
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-get-response'
          description: The response to getting a Rev organization's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Rev Org
      tags:
        - rev-orgs
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: RevOrgsGetQuery
    post:
      description: Retrieves the Rev organization's information.
      operationId: rev-orgs-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-get-response'
          description: The response to getting a Rev organization's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Rev Org (POST)
      tags:
        - rev-orgs
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /rev-orgs.list:
    get:
      description: |
        Gets the list of Rev organizations' information belonging to the
        authenticated user's Dev Organization which the user is also authorized
        to access.
      operationId: rev-orgs-list
      parameters:
        - description: Filters by creator.
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            Filters for objects created after the provided timestamp (inclusive).
          explode: false
          in: query
          name: created_date.after
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          explode: false
          in: query
          name: created_date.before
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: Array of display names of Rev orgs to be filtered.
          explode: false
          in: query
          name: display_name
          schema:
            type: array
            items:
              type: string
              format: text
        - description: List of external refs to filter Rev organizations for.
          explode: false
          in: query
          name: external_ref
          schema:
            type: array
            items:
              type: string
              format: text
        - description: |
            The maximum number of Rev organizations to be retrieved per page.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            Filters for objects created after the provided timestamp (inclusive).
          explode: false
          in: query
          name: modified_date.after
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          explode: false
          in: query
          name: modified_date.before
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Fields to sort the Rev organizations by and the direction to sort
            them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-list-response'
          description: |
            The response to getting a list of Rev organizations' information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Rev Orgs
      tags:
        - rev-orgs
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: RevOrgsListQuery
    post:
      description: |
        Gets the list of Rev organizations' information belonging to the
        authenticated user's Dev Organization which the user is also authorized
        to access.
      operationId: rev-orgs-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-list-response'
          description: |
            The response to getting a list of Rev organizations' information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Rev Orgs (POST)
      tags:
        - rev-orgs
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /rev-orgs.update:
    post:
      description: Updates the Rev organization's information.
      operationId: rev-orgs-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-update-response'
          description: Response object to updating Rev organization's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Rev Org
      tags:
        - rev-orgs
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /rev-users.create:
    post:
      description: |
        Creates a Rev user for a Rev organization. Rev user can be a customer
        or a lead of an organization.
      operationId: rev-users-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-create-response'
          description: |
            Response object for creating a new Rev user for Rev organization.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Rev User
      tags:
        - rev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /rev-users.delete:
    post:
      description: Deletes a Rev user.
      operationId: rev-users-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-delete-response'
          description: The response to deleting a Rev user of a Rev organization.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Rev User
      tags:
        - rev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /rev-users.get:
    get:
      description: Returns the Rev user of a Rev organization by its ID.
      operationId: rev-users-get
      parameters:
        - description: The ID of Rev user to be retrieved.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-get-response'
          description: The returned Rev user.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Rev User
      tags:
        - rev-users
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: RevUsersGetQuery
    post:
      description: Returns the Rev user of a Rev organization by its ID.
      operationId: rev-users-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-get-response'
          description: The returned Rev user.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Rev User (POST)
      tags:
        - rev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /rev-users.list:
    get:
      description: |
        Returns a list of all Rev Users belonging to the authenticated user's
        Dev organization.
      operationId: rev-users-list
      parameters:
        - description: |
            Filters for Rev users with specified associations
            (account/workspace).
          explode: false
          in: query
          name: associations
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            Filters for Rev users that were created by the specified user(s).
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            Filters for objects created after the provided timestamp (inclusive).
          explode: false
          in: query
          name: created_date.after
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          explode: false
          in: query
          name: created_date.before
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: List of emails of Rev users to be filtered.
          explode: false
          in: query
          name: email
          schema:
            type: array
            items:
              type: string
              format: text
        - description: List of external refs to filter Rev users for.
          explode: false
          in: query
          name: external_ref
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Value of is_verified field to filter the Rev users.
          explode: false
          in: query
          name: is_verified
          schema:
            type: boolean
        - description: |
            The maximum number of Rev users to return. The default is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            Filters for objects created after the provided timestamp (inclusive).
          explode: false
          in: query
          name: modified_date.after
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          explode: false
          in: query
          name: modified_date.before
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            List of phone numbers, in E.164 format, to filter Rev users on.
          explode: false
          in: query
          name: phone_numbers
          schema:
            type: array
            items:
              type: string
              format: text
        - description: List of IDs of Rev organizations to be filtered.
          explode: false
          in: query
          name: rev_org
          schema:
            type: array
            example:
              - REV-AbCdEfGh
            items:
              type: string
              format: id
        - description: |
            Fields to sort the Rev users by and the direction to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-list-response'
          description: |
            The response to listing all Rev users matching the filter criteria.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Rev Users
      tags:
        - rev-users
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: RevUsersListQuery
    post:
      description: |
        Returns a list of all Rev Users belonging to the authenticated user's
        Dev organization.
      operationId: rev-users-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-list-response'
          description: |
            The response to listing all Rev users matching the filter criteria.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Rev Users (POST)
      tags:
        - rev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /rev-users.merge:
    post:
      description: Merges the secondary Rev user into the primary Rev user.
      operationId: rev-users-merge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-merge-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-merge-response'
          description: |
            Acknowledgment response indicating that the merge request has been
            received for processing asynchronously.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Merge Rev Users
      tags:
        - rev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /rev-users.scan:
    get:
      description: Scans through all Rev users.
      operationId: rev-users-scan
      parameters:
        - description: |
            Filters for Rev users with specified associations
            (account/workspace).
          explode: false
          in: query
          name: associations
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            Filters for Rev users that were created by the specified user(s).
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            Filters for objects created after the provided timestamp (inclusive).
          explode: false
          in: query
          name: created_date.after
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          explode: false
          in: query
          name: created_date.before
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            The cursor to resume iteration, otherwise the beginning if not
            provided.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: List of emails of Rev users to be filtered.
          explode: false
          in: query
          name: email
          schema:
            type: array
            items:
              type: string
              format: text
        - description: List of external refs to filter Rev users for.
          explode: false
          in: query
          name: external_ref
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Value of is_verified field to filter the Rev users.
          explode: false
          in: query
          name: is_verified
          schema:
            type: boolean
        - description: |
            Filters for objects created after the provided timestamp (inclusive).
          explode: false
          in: query
          name: modified_date.after
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          explode: false
          in: query
          name: modified_date.before
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            List of phone numbers, in E.164 format, to filter Rev users on.
          explode: false
          in: query
          name: phone_numbers
          schema:
            type: array
            items:
              type: string
              format: text
        - description: List of IDs of Rev organizations to be filtered.
          explode: false
          in: query
          name: rev_org
          schema:
            type: array
            example:
              - REV-AbCdEfGh
            items:
              type: string
              format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-scan-response'
          description: The response to scanning Rev users.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Scan Rev Users
      tags:
        - rev-users
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: RevUsersScanQuery
    post:
      description: Scans through all Rev users.
      operationId: rev-users-scan-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-scan-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-scan-response'
          description: The response to scanning Rev users.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Scan Rev Users (POST)
      tags:
        - rev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /rev-users.update:
    post:
      description: Updates a Rev user.
      operationId: rev-users-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-update-response'
          description: Updated Rev user object.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Rev User
      tags:
        - rev-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /schemas.aggregated.get:
    get:
      description: Gets the aggregated schema.
      operationId: aggregated-schema-get
      parameters:
        - description: List of apps.
          explode: false
          in: query
          name: custom_schema_spec.apps
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Name of the subtype.
          explode: false
          in: query
          name: custom_schema_spec.subtype
          schema:
            type: string
            format: text
        - description: Whether the leaf type corresponds to a custom object.
          explode: false
          in: query
          name: is_custom_leaf_type
          schema:
            type: boolean
        - description: |
            The leaf type. Used for inferring the default stage diagram and
            tenant fragment ID.
          explode: false
          in: query
          name: leaf_type
          schema:
            type: string
            format: text
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aggregated-schema-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Schemas Aggregated
      tags:
        - customization
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: AggregatedSchemaGetQuery
    post:
      description: Gets the aggregated schema.
      operationId: aggregated-schema-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/aggregated-schema-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aggregated-schema-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Schemas Aggregated (POST)
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /schemas.custom.get:
    get:
      description: Gets a custom schema fragment.
      operationId: custom-schema-fragments-get
      parameters:
        - description: The ID of the custom schema fragment.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Schemas Custom
      tags:
        - customization
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: CustomSchemaFragmentsGetQuery
    post:
      description: Gets a custom schema fragment.
      operationId: custom-schema-fragments-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-schema-fragments-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Schemas Custom (POST)
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /schemas.custom.list:
    get:
      description: Lists custom schema fragments.
      operationId: custom-schema-fragments-list
      parameters:
        - description: The list of app names.
          explode: false
          in: query
          name: app
          schema:
            type: array
            items:
              type: string
              format: text
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - deprecated: true
          description: Whether only deprecated fragments should be filtered.
          explode: false
          in: query
          name: deprecated
          schema:
            type: boolean
            deprecated: true
        - description: Whether the leaf type corresponds to a custom object
          explode: false
          in: query
          name: is_custom_leaf_type
          schema:
            type: boolean
        - description: Whether the fragment has been deprecated.
          explode: false
          in: query
          name: is_deprecated
          schema:
            type: boolean
        - description: The list of leaf types.
          explode: false
          in: query
          name: leaf_type
          schema:
            type: array
            items:
              type: string
              format: text
        - description: The maximum number of items.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            List of fields which are not required in the payload and can be
            pruned away.
          explode: false
          in: query
          name: prune
          schema:
            type: array
            items:
              $ref: '#/components/schemas/custom-schema-fragments-list-request-prune'
        - description: |
            The list of fields to sort the items by and how to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
        - description: The list of subtypes.
          explode: false
          in: query
          name: subtype
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Filters for custom schema fragment of the provided types.
          explode: false
          in: query
          name: types
          schema:
            type: array
            items:
              $ref: '#/components/schemas/custom-schema-fragment-type'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Schemas Custom
      tags:
        - customization
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: CustomSchemaFragmentsListQuery
    post:
      description: Lists custom schema fragments.
      operationId: custom-schema-fragments-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-schema-fragments-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Schemas Custom (POST)
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /schemas.custom.set:
    post:
      description: Creates or updates a custom schema fragment.
      operationId: custom-schema-fragments-set
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-schema-fragments-set-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-set-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Set Schemas Custom
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /schemas.stock.get:
    get:
      description: Gets a stock schema fragment.
      operationId: stock-schema-fragments-get
      parameters:
        - description: The ID of the stock schema fragment.
          explode: false
          in: query
          name: id
          schema:
            type: string
            format: id
        - description: The leaf type this fragment applies to.
          explode: false
          in: query
          name: leaf_type
          schema:
            type: string
            format: text
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Schemas Stock
      tags:
        - customization
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: StockSchemaFragmentsGetQuery
    post:
      description: Gets a stock schema fragment.
      operationId: stock-schema-fragments-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stock-schema-fragments-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Schemas Stock (POST)
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /schemas.stock.list:
    get:
      description: Lists stock schema fragments.
      operationId: stock-schema-fragments-list
      parameters:
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            Filter preset to specify whether to filter only customization enabled
            leaf types.
          explode: false
          in: query
          name: filter_preset
          schema:
            $ref: '#/components/schemas/stock-schema-fragments-list-request-filter-preset'
        - description: The list of leaf types.
          explode: false
          in: query
          name: leaf_type
          schema:
            type: array
            items:
              type: string
              format: text
        - description: The maximum number of items.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            List of fields which are not required in the payload and can be
            pruned away.
          explode: false
          in: query
          name: prune
          schema:
            type: array
            items:
              $ref: '#/components/schemas/stock-schema-fragments-list-request-prune'
        - description: |
            The list of fields to sort the items by and how to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Schemas Stock
      tags:
        - customization
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: StockSchemaFragmentsListQuery
    post:
      description: Lists stock schema fragments.
      operationId: stock-schema-fragments-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stock-schema-fragments-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Schemas Stock (POST)
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /schemas.subtypes.prepare-update:
    post:
      description: |
        Gets the new fragment IDs and fields resulting from changing a subtype.
      operationId: schemas-subtype-prepare-update-get
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/schemas-subtype-prepare-update-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemas-subtype-prepare-update-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Prepare-Update Schemas Subtypes
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /service-accounts.create:
    post:
      description: Creates a service account.
      operationId: service-accounts-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-accounts-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-create-response'
          description: |
            The response object to the corresponding create service account
            request.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Service Account
      tags:
        - service-accounts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /service-accounts.get:
    get:
      description: Gets a service account.
      operationId: service-accounts-get
      parameters:
        - description: The ID of the requested service account.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-get-response'
          description: |
            The response object that carries the service account's information
            corresponding to the request.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Service Account
      tags:
        - service-accounts
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: ServiceAccountsGetQuery
    post:
      description: Gets a service account.
      operationId: service-accounts-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-accounts-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-get-response'
          description: |
            The response object that carries the service account's information
            corresponding to the request.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Service Account (POST)
      tags:
        - service-accounts
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /sla-trackers.get:
    get:
      description: Gets an SLA tracker.
      operationId: sla-trackers-get
      parameters:
        - description: The ID of the SLA tracker to get.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sla-trackers-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get SLA Tracker
      tags:
        - slas
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: SlaTrackersGetQuery
    post:
      description: Gets an SLA tracker.
      operationId: sla-trackers-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sla-trackers-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sla-trackers-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get SLA Tracker (POST)
      tags:
        - slas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /sla-trackers.list:
    get:
      description: Lists SLA trackers matching a filter.
      operationId: sla-trackers-list
      parameters:
        - description: |
            Filters for objects created after the provided timestamp (inclusive).
          explode: false
          in: query
          name: created_date.after
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          explode: false
          in: query
          name: created_date.before
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            The maximum number of SLA trackers to return. The default is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            Filters for objects created after the provided timestamp (inclusive).
          explode: false
          in: query
          name: modified_date.after
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          explode: false
          in: query
          name: modified_date.before
          schema:
            type: string
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
        - description: |
            Fields to sort the SLA Trackers by and the direction to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
        - description: The SLA tracker stages the filter matches.
          explode: false
          in: query
          name: stage
          schema:
            type: array
            items:
              type: string
              format: text
        - description: The SLA tracker statuses the filter matches.
          explode: false
          in: query
          name: status
          schema:
            type: array
            items:
              type: string
              format: text
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sla-trackers-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List SLA Trackers
      tags:
        - slas
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: SlaTrackersListQuery
    post:
      description: Lists SLA trackers matching a filter.
      operationId: sla-trackers-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sla-trackers-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sla-trackers-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List SLA Trackers (POST)
      tags:
        - slas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /slas.assign:
    post:
      description: ' Assigns the SLA to a set of Rev organizations.'
      operationId: slas-assign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-assign-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-assign-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Assign SLAs
      tags:
        - slas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /slas.create:
    post:
      description: Creates an SLA in draft status.
      operationId: slas-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create SLA
      tags:
        - slas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /slas.get:
    get:
      description: Gets an SLA.
      operationId: slas-get
      parameters:
        - description: The ID of the SLA to get.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get SLA
      tags:
        - slas
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: SlasGetQuery
    post:
      description: Gets an SLA.
      operationId: slas-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get SLA (POST)
      tags:
        - slas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /slas.list:
    get:
      description: Lists SLAs matching a filter.
      operationId: slas-list
      parameters:
        - description: The object types the SLA applies to.
          explode: false
          in: query
          name: applies_to
          schema:
            type: array
            items:
              $ref: '#/components/schemas/sla-applies-to'
        - description: |
            The Filter operator to be applied on the applies to object types
            filter.
          explode: false
          in: query
          name: applies_to_op
          schema:
            $ref: '#/components/schemas/slas-filter-applies-to-operator-type'
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: The maximum number of SLAs to return. The default is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: The SLA types the filter matches.
          explode: false
          in: query
          name: sla_type
          schema:
            type: array
            items:
              $ref: '#/components/schemas/sla-type'
        - description: Fields to sort the SLAs by and the direction to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
        - description: The SLA statuses the filter matches.
          explode: false
          in: query
          name: status
          schema:
            type: array
            items:
              $ref: '#/components/schemas/sla-status'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List SLAs
      tags:
        - slas
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: SlasListQuery
    post:
      description: Lists SLAs matching a filter.
      operationId: slas-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List SLAs (POST)
      tags:
        - slas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /slas.transition:
    post:
      description: Changes the status of an SLA.
      operationId: slas-transition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-transition-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-transition-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Transition SLAs
      tags:
        - slas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /slas.update:
    post:
      description: Updates a draft SLA.
      operationId: slas-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-update-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update SLA
      tags:
        - slas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /snap-kit-action.execute.deferred:
    post:
      description: Executes deferred snap-kit actions.
      operationId: snap-kit-action-execute-deferred
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-kit-action-execute-deferred-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-kit-action-execute-deferred-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Deferred Snap Kit Action Execute
      tags:
        - snap-kit-execution
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /snap-widgets.create:
    post:
      description: Create a snap widget object.
      operationId: snap-widgets-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-widgets-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-widgets-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Snap Widget
      tags:
        - snap-widgets
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /stage-diagrams.create:
    post:
      description: Creates a stage diagram.
      operationId: stage-diagrams-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stage-diagrams-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stage-diagrams-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Stage Diagram
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /stage-diagrams.get:
    get:
      description: Gets a stage diagram.
      operationId: stage-diagrams-get
      parameters:
        - description: The ID of the stage diagram to get.
          explode: false
          in: query
          name: id
          schema:
            type: string
            format: id
        - description: |
            Whether the leaf type corresponds to a custom object. Specify this
            along with leaf_type to get the default custom object stage diagram.
          explode: false
          in: query
          name: is_custom_leaf_type
          schema:
            type: boolean
        - description: |
            The leaf type. Should be specified to retrieve the default stage
            diagram for the leaf type. If not provided, then id is used.
          explode: false
          in: query
          name: leaf_type
          schema:
            type: string
            format: text
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stage-diagrams-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Stage Diagram
      tags:
        - customization
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: StageDiagramsGetQuery
    post:
      description: Gets a stage diagram.
      operationId: stage-diagrams-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stage-diagrams-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stage-diagrams-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Stage Diagram (POST)
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /stage-diagrams.list:
    get:
      description: Lists stage diagrams.
      operationId: stage-diagrams-list
      parameters:
        - description: |
            The cursor to resume iteration from, otherwise if not provided, then
            iteration starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            Whether only custom object stage diagrams should be filtered.
          explode: false
          in: query
          name: is_custom_leaf_type
          schema:
            type: boolean
        - description: The list of leaf types.
          explode: false
          in: query
          name: leaf_type
          schema:
            type: array
            items:
              type: string
              format: text
        - description: The maximum number of items.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: The list of stage diagram names.
          explode: false
          in: query
          name: name
          schema:
            type: array
            items:
              type: string
              format: text
        - description: |
            The list of fields to sort the items by and how to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stage-diagrams-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Stage Diagrams
      tags:
        - customization
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: StageDiagramsListQuery
    post:
      description: Lists stage diagrams.
      operationId: stage-diagrams-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stage-diagrams-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stage-diagrams-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Stage Diagrams (POST)
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /stage-diagrams.update:
    post:
      description: Updates a stage diagram.
      operationId: stage-diagrams-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stage-diagrams-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stage-diagrams-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Stage Diagram
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /stages.custom.create:
    post:
      description: Creates a custom stage.
      operationId: custom-stages-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-stages-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Stages Custom
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /stages.custom.get:
    get:
      description: Gets a custom stage.
      operationId: custom-stages-get
      parameters:
        - description: The ID of the custom stage to get.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Stages Custom
      tags:
        - customization
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: CustomStagesGetQuery
    post:
      description: Gets a custom stage.
      operationId: custom-stages-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-stages-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Stages Custom (POST)
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /stages.custom.list:
    get:
      description: Lists custom stages.
      operationId: custom-stages-list
      parameters:
        - description: |
            The cursor to resume iteration from, otherwise if not provided, then
            iteration starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: The maximum number of items.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: The list of stage names.
          explode: false
          in: query
          name: name
          schema:
            type: array
            items:
              type: string
              format: text
        - description: The list of stage ordinals.
          explode: false
          in: query
          name: ordinal
          schema:
            type: array
            items:
              type: integer
              format: int32
        - description: |
            The list of fields to sort the items by and how to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Stages Custom
      tags:
        - customization
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: CustomStagesListQuery
    post:
      description: Lists custom stages.
      operationId: custom-stages-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-stages-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Stages Custom (POST)
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /stages.custom.update:
    post:
      description: Updates a custom stage.
      operationId: custom-stages-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-stages-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Stages Custom
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /states.custom.create:
    post:
      description: Creates a custom state.
      operationId: custom-states-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-states-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create States Custom
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /states.custom.get:
    get:
      description: Gets a custom state.
      operationId: custom-states-get
      parameters:
        - description: The ID of the custom state to get.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get States Custom
      tags:
        - customization
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: CustomStatesGetQuery
    post:
      description: Gets a custom state.
      operationId: custom-states-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-states-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get States Custom (POST)
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /states.custom.list:
    get:
      description: Lists custom states.
      operationId: custom-states-list
      parameters:
        - description: |
            The cursor to resume iteration from, otherwise if not provided, then
            iteration starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: Whether only final states should be filtered.
          explode: false
          in: query
          name: is_final
          schema:
            type: boolean
        - description: The maximum number of items.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: The list of state names.
          explode: false
          in: query
          name: name
          schema:
            type: array
            items:
              type: string
              format: text
        - description: The list of state ordinals.
          explode: false
          in: query
          name: ordinal
          schema:
            type: array
            items:
              type: integer
              format: int32
        - description: |
            The list of fields to sort the items by and how to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List States Custom
      tags:
        - customization
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: CustomStatesListQuery
    post:
      description: Lists custom states.
      operationId: custom-states-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-states-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List States Custom (POST)
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /states.custom.update:
    post:
      description: Updates a custom state.
      operationId: custom-states-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-states-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update States Custom
      tags:
        - customization
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /surveys.create:
    post:
      description: |
        Creates a schema for survey, which includes name and description of
        schema.
      operationId: surveys-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Survey
      tags:
        - surveys
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /surveys.delete:
    post:
      description: Deletes the specified survey.
      operationId: surveys-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Survey
      tags:
        - surveys
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /surveys.get:
    get:
      description: Gets a survey given the ID.
      operationId: surveys-get
      parameters:
        - description: The ID of the survey to get.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Survey
      tags:
        - surveys
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: SurveysGetQuery
    post:
      description: Gets a survey given the ID.
      operationId: surveys-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Survey (POST)
      tags:
        - surveys
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /surveys.list:
    get:
      description: List surveys requested by the user.
      operationId: surveys-list
      parameters:
        - description: Filters for surveys created by any of these users.
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            The maximum number of surveys to return. If not set, then the default
            is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: Filters for surveys by name(s).
          explode: false
          in: query
          name: name
          schema:
            type: array
            items:
              type: string
              format: text
        - description: |
            Fields to sort the surveys by and the direction to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Surveys
      tags:
        - surveys
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: SurveysListQuery
    post:
      description: List surveys requested by the user.
      operationId: surveys-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Surveys (POST)
      tags:
        - surveys
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /surveys.responses.list:
    get:
      description: List survey responses requested by the user.
      operationId: surveys-responses-list
      parameters:
        - description: |
            Filters for survey responses created by any of these users.
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            Filters for survey responses associated with these unique IDs.
          explode: false
          in: query
          name: dispatch_ids
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            The maximum number of survey responses to return. If not set, then
            the default is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: Filters for survey responses created for the objects.
          explode: false
          in: query
          name: objects
          schema:
            type: array
            example:
              - ACC-12345
            items:
              type: string
              format: id
        - description: |
            Filters for survey responses dispatched to any of these users.
          explode: false
          in: query
          name: recipient
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            Fields to sort the survey responses by and the direction to sort
            them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
        - description: Filters for survey response stages.
          explode: false
          in: query
          name: stages
          schema:
            type: array
            items:
              type: integer
              format: int64
        - description: Filters for survey responses for the provided survey IDs.
          explode: false
          in: query
          name: surveys
          schema:
            type: array
            items:
              type: string
              format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-responses-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Surveys Responses
      tags:
        - surveys
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: SurveysResponsesListQuery
    post:
      description: List survey responses requested by the user.
      operationId: surveys-responses-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-responses-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-responses-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Surveys Responses (POST)
      tags:
        - surveys
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /surveys.responses.update:
    post:
      description: |
        Updates a user's survey response for the provided dispatch ID.
      operationId: surveys-responses-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-responses-update-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-responses-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Surveys Response
      tags:
        - surveys
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /surveys.send:
    post:
      description: Sends a survey on the specified channels.
      operationId: surveys-send
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-send-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-send-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Send Surveys
      tags:
        - surveys
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /surveys.submit:
    post:
      description: |
        Submits a user response to a survey, which is defined by the survey ID.
      operationId: surveys-submit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-submit-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-submit-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Submit Surveys
      tags:
        - surveys
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /surveys.update:
    post:
      description: Updates a survey's metadata.
      operationId: surveys-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Survey
      tags:
        - surveys
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /sys-users.list:
    get:
      description: Lists system users within your organization.
      operationId: sys-users-list
      parameters:
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            The maximum number of system users to return. Value can range from
            '1' to '100', with a default of '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            Fields to sort the system users by and the direction to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys-users-list-response'
          description: The response to listing the system users.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Sys Users
      tags:
        - sys-users
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: SysUsersListQuery
    post:
      description: Lists system users within your organization.
      operationId: sys-users-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sys-users-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys-users-list-response'
          description: The response to listing the system users.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Sys Users (POST)
      tags:
        - sys-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /sys-users.update:
    post:
      description: Updates the system user.
      operationId: sys-users-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sys-users-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys-users-update-response'
          description: Updated Sys user object.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Sys User
      tags:
        - sys-users
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /tags.create:
    post:
      description: |
        Creates a new tag, which is used to create associations between objects
        and a logical concept denoted by the tag's name.
      operationId: tags-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-create-response'
          description: The response to creating a new tag.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Tag
      tags:
        - tags
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /tags.delete:
    post:
      description: Deletes a tag.
      operationId: tags-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-delete-response'
          description: The response for deleting a tag.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Tag
      tags:
        - tags
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /tags.get:
    get:
      description: Gets a tag's information.
      operationId: tags-get
      parameters:
        - description: The requested tag's ID.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            example: TAG-12345
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-get-response'
          description: The response to getting a tag's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Tag
      tags:
        - tags
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: TagsGetQuery
    post:
      description: Gets a tag's information.
      operationId: tags-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-get-response'
          description: The response to getting a tag's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Tag (POST)
      tags:
        - tags
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /tags.list:
    get:
      description: Lists the available tags.
      operationId: tags-list
      parameters:
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: The maximum number of tags to return. The default is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: Filters for tags with the provided names.
          explode: false
          in: query
          name: name
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Fields to sort tags by and the direction to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-list-response'
          description: The response to listing the tags.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Tags
      tags:
        - tags
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: TagsListQuery
    post:
      description: Lists the available tags.
      operationId: tags-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-list-response'
          description: The response to listing the tags.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Tags (POST)
      tags:
        - tags
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /tags.update:
    post:
      description: Updates a tag's information.
      operationId: tags-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-update-response'
          description: The response for updating a tag.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Tag
      tags:
        - tags
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /timeline-entries.create:
    post:
      description: Creates a new entry on an object's timeline.
      operationId: timeline-entries-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-create-response'
          description: The response to creating a timeline entry for an object.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Timeline Entry
      tags:
        - timeline-entries
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /timeline-entries.delete:
    post:
      description: Deletes an entry from an object's timeline.
      operationId: timeline-entries-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-delete-response'
          description: The response to deleting a timeline entry from an object.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Timeline Entry
      tags:
        - timeline-entries
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /timeline-entries.get:
    get:
      description: Gets an entry on an object's timeline.
      operationId: timeline-entries-get
      parameters:
        - description: The ID of the timeline entry to get.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            example: don:core:dvrv-us-1:devo/example:ticket/123:comment/comment-id
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-get-response'
          description: The request to getting a timeline entry.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Timeline Entry
      tags:
        - timeline-entries
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: TimelineEntriesGetQuery
    post:
      description: Gets an entry on an object's timeline.
      operationId: timeline-entries-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-get-response'
          description: The request to getting a timeline entry.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Timeline Entry (POST)
      tags:
        - timeline-entries
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /timeline-entries.list:
    get:
      description: Lists the timeline entries for an object.
      operationId: timeline-entries-list
      parameters:
        - description: The ID of the object to list timeline entries for.
          explode: false
          in: query
          name: object
          required: true
          schema:
            type: string
            example: PROD-12345
            format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            The maximum number of entries to return. If not set, then this
            defaults to `50`.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            The visibility of the timeline entries to filter for. Note this is a
            strict filter, such that only entries with the exact visibilities
            specified will be returned.
          explode: false
          in: query
          name: visibility
          schema:
            type: array
            items:
              $ref: '#/components/schemas/timeline-entry-visibility'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-list-response'
          description: The response to listing timeline entries for an object.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Timeline Entries
      tags:
        - timeline-entries
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: TimelineEntriesListQuery
    post:
      description: Lists the timeline entries for an object.
      operationId: timeline-entries-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-list-response'
          description: The response to listing timeline entries for an object.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Timeline Entries (POST)
      tags:
        - timeline-entries
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /timeline-entries.update:
    post:
      description: Updates an entry on an object's timeline.
      operationId: timeline-entries-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-update-response'
          description: The response to updating a timeline entry.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Timeline Entry
      tags:
        - timeline-entries
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /vistas.delete:
    post:
      description: Deletes the requested vista.
      operationId: vistas-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-delete-response'
          description: The response when deleting a vista.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Vista
      tags:
        - vistas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /vistas.get:
    get:
      description: Gets the requested vistas's information.
      operationId: vistas-get
      parameters:
        - description: The vista's ID.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            example: VISTA-12345
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-get-response'
          description: The response to getting a vista's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Vista
      tags:
        - vistas
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: VistasGetQuery
    post:
      description: Gets the requested vistas's information.
      operationId: vistas-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-get-response'
          description: The response to getting a vista's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Vista (POST)
      tags:
        - vistas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /vistas.groups.delete:
    post:
      description: Deletes the requested vista group item
      operationId: vistas-groups-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-groups-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-groups-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Vistas Group
      tags:
        - vistas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /vistas.groups.get:
    get:
      description: Gets the requested vista group item's information.
      operationId: vistas-groups-get
      parameters:
        - description: The vista group item's ID.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-groups-get-response'
          description: The response to getting a vista group item's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Vistas Group
      tags:
        - vistas
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: VistasGroupsGetQuery
    post:
      description: Gets the requested vista group item's information.
      operationId: vistas-groups-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-groups-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-groups-get-response'
          description: The response to getting a vista group item's information.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Vistas Group (POST)
      tags:
        - vistas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /vistas.groups.list:
    get:
      description: 'Lists the available vista group items. '
      operationId: vistas-groups-list
      parameters:
        - description: |
            Filters for vista group items which have one of the parts linked as
            its ancestor part or primary part.
          explode: false
          in: query
          name: ancestor_part
          schema:
            type: array
            example:
              - PROD-12345
            items:
              type: string
              format: id
        - description: |
            Whether to include items belonging to children of any of the provided
            parts.
          explode: false
          in: query
          name: applies_to_part.include_child_parts
          schema:
            type: boolean
        - description: |
            Part IDs to filter on. Required if any applies_to_part.* fields are
            provided.
          explode: false
          in: query
          name: applies_to_part.parts
          schema:
            type: array
            example:
              - PROD-12345
            items:
              type: string
              format: id
        - description: |
            Filter for vistas group item created by any of these users.
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            Filters for vista group items of the specific group object type.
          explode: false
          in: query
          name: group_object_type
          schema:
            type: array
            items:
              $ref: '#/components/schemas/vista-group-item-group-object-type'
        - description: |
            The request to get information about a list of vista groups.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: Parent ID of the vista group item.
          explode: false
          in: query
          name: parent_id
          schema:
            type: array
            example:
              - VISTA-12345
            items:
              type: string
              format: id
        - description: Comma-separated fields to sort the objects by.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
        - description: Denotes the state of the vista group item.
          explode: false
          in: query
          name: state
          schema:
            type: array
            items:
              $ref: '#/components/schemas/vista-group-item-state'
        - description: Filters for vista group items of the specific type.
          explode: false
          in: query
          name: type
          schema:
            type: array
            items:
              $ref: '#/components/schemas/group-item-type'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-groups-list-response'
          description: The response to listing the vistas group items.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Vistas Groups
      tags:
        - vistas
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: VistasGroupsListQuery
    post:
      description: 'Lists the available vista group items. '
      operationId: vistas-groups-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-groups-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-groups-list-response'
          description: The response to listing the vistas group items.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Vistas Groups (POST)
      tags:
        - vistas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /vistas.list:
    get:
      description: Lists the available vistas.
      operationId: vistas-list
      parameters:
        - description: Filters for vistas created by any of these users.
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: Filters for vistas of specific flavor.
          explode: false
          in: query
          name: flavor
          schema:
            type: array
            items:
              $ref: '#/components/schemas/grouped-vista-flavor'
        - description: Whether the default vistas should be fetched or not.
          explode: false
          in: query
          name: is_default
          schema:
            type: boolean
        - description: |
            The maximum number of vistas to return. The default is '50', the
            maximum is '100'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: Filters for vistas accessible to the input members.
          explode: false
          in: query
          name: members
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: |
            Filters for vistas of specific object types like works, parts etc.
          explode: false
          in: query
          name: object_type
          schema:
            type: array
            items:
              $ref: '#/components/schemas/dynamic-vista-filter-type'
        - description: ID of the group/member with whom the item is shared.
          explode: false
          in: query
          name: shared_with.member
          schema:
            type: string
            format: id
        - description: Role ID of the group/member with whom the item is shared.
          explode: false
          in: query
          name: shared_with.role
          schema:
            type: string
            format: id
        - description: |
            Denotes whether to skip items of vista_group_item in response.
          explode: false
          in: query
          name: skip_items
          schema:
            type: boolean
        - description: |
            Fields to sort the vistas by and the direction to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
        - description: Denotes the state of the vista group item.
          explode: false
          in: query
          name: state
          schema:
            type: array
            items:
              $ref: '#/components/schemas/vista-group-item-state'
        - description: Filters for vistas of the specific type.
          explode: false
          in: query
          name: type
          schema:
            type: array
            items:
              $ref: '#/components/schemas/vista-type'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-list-response'
          description: The response to listing the vistas.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Vistas
      tags:
        - vistas
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: VistasListQuery
    post:
      description: Lists the available vistas.
      operationId: vistas-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-list-response'
          description: The response to listing the vistas.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Vistas (POST)
      tags:
        - vistas
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /web-crawler-jobs.control:
    post:
      description: |
        Change state of a web crawler job to pause or resume it back to
        running.
      operationId: web-crawler-jobs-control
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/web-crawler-jobs-control-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/web-crawler-jobs-control-response'
          description: The response to resume a web crawler job.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Control Web Crawler Jobs
      tags:
        - web-crawler-job
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /web-crawler-jobs.create:
    post:
      description: |
        Creates a web crawler job whose objective is to crawl the provided
        URLs/sitemaps and generate corresponding webpages as artifacts.
      operationId: create-web-crawler-job
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/web-crawler-jobs-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/web-crawler-jobs-create-response'
          description: The response to create a web crawler job.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Web Crawler Job
      tags:
        - web-crawler-job
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /web-crawler-jobs.get:
    get:
      description: Gets a web crawler job.
      operationId: get-web-crawler-job
      parameters:
        - description: The ID of the job.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/web-crawler-jobs-get-response'
          description: The response to get a web crawler job.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Web Crawler Job
      tags:
        - web-crawler-job
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: GetWebCrawlerJobQuery
    post:
      description: Gets a web crawler job.
      operationId: get-web-crawler-job-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/web-crawler-jobs-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/web-crawler-jobs-get-response'
          description: The response to get a web crawler job.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Web Crawler Job (POST)
      tags:
        - web-crawler-job
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /web-crawler-jobs.list:
    get:
      description: Lists web crawler jobs.
      operationId: list-web-crawler-jobs
      parameters:
        - description: |
            Filters for web crawler jobs created by any of the provided users.
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: |
            The maximum number of web crawler jobs to return. The default is
            '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/web-crawler-jobs-list-response'
          description: The response to list web crawler jobs.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Web Crawler Jobs
      tags:
        - web-crawler-job
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: ListWebCrawlerJobsQuery
    post:
      description: Lists web crawler jobs.
      operationId: list-web-crawler-jobs-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/web-crawler-jobs-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/web-crawler-jobs-list-response'
          description: The response to list web crawler jobs.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Web Crawler Jobs (POST)
      tags:
        - web-crawler-job
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /webhooks.create:
    post:
      description: Creates a new webhook target.
      operationId: webhooks-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-create-response'
          description: The response to creating a new webhook.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Webhook
      tags:
        - webhooks
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /webhooks.delete:
    post:
      description: Deletes the requested webhook.
      operationId: webhooks-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-delete-response'
          description: The response to deleting the webhook.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Webhook
      tags:
        - webhooks
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /webhooks.event:
    post:
      description: |
        Describes a webhook invocation for an event from DevRev to a webhook's
        target URL, where the receiving handler must implement the specified
        protocol. Note the documented endpoint is for exposition and not
        provided by DevRev.
      operationId: webhooks-event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook-event-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook-event-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Event Webhooks
      tags:
        - webhooks
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /webhooks.get:
    get:
      description: Gets the requested webhook's information.
      operationId: webhooks-get
      parameters:
        - description: ID for the webhook.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            example: don:integration:dvrv-us-1:devo/example:webhook/webhook-id
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-get-response'
          description: The response to getting the information for the webhook.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Webhook
      tags:
        - webhooks
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: WebhooksGetQuery
    post:
      description: Gets the requested webhook's information.
      operationId: webhooks-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-get-response'
          description: The response to getting the information for the webhook.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Webhook (POST)
      tags:
        - webhooks
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /webhooks.list:
    get:
      description: Lists the webhooks.
      operationId: webhooks-list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-list-response'
          description: The response to listing the webhooks.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Webhooks
      tags:
        - webhooks
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: WebhooksListQuery
    post:
      description: Lists the webhooks.
      operationId: webhooks-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-list-response'
          description: The response to listing the webhooks.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Webhooks (POST)
      tags:
        - webhooks
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /webhooks.update:
    post:
      description: Updates the requested webhook.
      operationId: webhooks-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-update-response'
          description: The response to updating the webhook.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Webhook
      tags:
        - webhooks
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /works.create:
    post:
      description: |
        Creates new work ([issue](https://devrev.ai/docs/product/build),
        [ticket](https://devrev.ai/docs/product/support)) item.
        [task](https://devrev.ai/docs/product/tasks) and opportunity work types
        are supported in the beta version.
      operationId: works-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-create-request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Create Work
      tags:
        - works
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /works.delete:
    post:
      description: Deletes a work item.
      operationId: works-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-delete-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Delete Work
      tags:
        - works
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /works.export:
    get:
      description: Exports a collection of work items.
      operationId: works-export
      parameters:
        - description: Filters for work belonging to any of the provided parts.
          explode: false
          in: query
          name: applies_to_part
          schema:
            type: array
            example:
              - PROD-12345
            items:
              type: string
              format: id
        - description: Filters for work created by any of these users.
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            The number of work items to return. The default is '50', the maximum
            is '5000'.
          explode: false
          in: query
          name: first
          schema:
            type: integer
            format: int32
        - description: Filters for issues with any of the provided accounts.
          explode: false
          in: query
          name: issue.accounts
          schema:
            type: array
            example:
              - ACC-12345
            items:
              type: string
              format: id
        - description: Filters for issues with any of the provided priorities.
          explode: false
          in: query
          name: issue.priority
          schema:
            type: array
            items:
              $ref: '#/components/schemas/issue-priority'
        - description: |
            Filters for issues with any of the provided priority enum ids.
          explode: false
          in: query
          name: issue.priority_v2
          schema:
            type: array
            items:
              type: integer
              format: int64
        - description: |
            Filters for issues with any of the provided Rev organizations.
          explode: false
          in: query
          name: issue.rev_orgs
          schema:
            type: array
            example:
              - REV-AbCdEfGh
            items:
              type: string
              format: id
        - description: Filters for records with any of the provided SLA stages.
          explode: false
          in: query
          name: issue.sla_summary.stage
          schema:
            type: array
            items:
              $ref: '#/components/schemas/sla-summary-stage'
        - description: Filters for issues with any of the sprint.
          explode: false
          in: query
          name: issue.sprint
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for work modified by any of these users.
          explode: false
          in: query
          name: modified_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: Filters for work owned by any of these users.
          explode: false
          in: query
          name: owned_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: Filters for work reported by any of these users.
          explode: false
          in: query
          name: reported_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: Filters for records in the provided stage(s) by name.
          explode: false
          in: query
          name: stage.name
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Filters for issues that are staged.
          explode: false
          in: query
          name: staged_info.is_staged
          schema:
            type: boolean
        - description: Filters for work with any of the provided states.
          explode: false
          in: query
          name: state
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Filters for issues with this specific external reference.
          explode: false
          in: query
          name: sync_metadata.external_reference
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Filters for works with selected sync statuses.
          explode: false
          in: query
          name: sync_metadata.last_sync_in.status
          schema:
            type: array
            items:
              $ref: '#/components/schemas/sync-metadata-filter-sync-in-filter-status'
        - description: Filters for works modified with selected sync history.
          explode: false
          in: query
          name: sync_metadata.last_sync_in.sync_history
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for works modified with selected sync units.
          explode: false
          in: query
          name: sync_metadata.last_sync_in.sync_unit
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for works with selected sync statuses.
          explode: false
          in: query
          name: sync_metadata.last_sync_out.status
          schema:
            type: array
            items:
              $ref: '#/components/schemas/sync-metadata-filter-sync-out-filter-status'
        - description: Filters for works modified with selected sync history.
          explode: false
          in: query
          name: sync_metadata.last_sync_out.sync_history
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for works modified with selected sync units.
          explode: false
          in: query
          name: sync_metadata.last_sync_out.sync_unit
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            Filters for issues synced from this specific origin system.
          explode: false
          in: query
          name: sync_metadata.origin_system
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Filters for work with any of the provided tags.
          explode: false
          in: query
          name: tags
          schema:
            type: array
            example:
              - TAG-12345
            items:
              type: string
              format: id
        - description: |
            Filters for tickets that are associated with any of the brands.
          explode: false
          in: query
          name: ticket.brand
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for tickets with any of the provided channels.
          explode: false
          in: query
          name: ticket.channels
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ticket-channels'
        - description: |
            Filters for tickets that are associated with any of the channels.
          explode: false
          in: query
          name: ticket.channels_v2
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for tickets belonging to specific groups.
          explode: false
          in: query
          name: ticket.group
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for frozen tickets.
          explode: false
          in: query
          name: ticket.is_frozen
          schema:
            type: boolean
        - description: Filters for tickets that are spam.
          explode: false
          in: query
          name: ticket.is_spam
          schema:
            type: boolean
        - description: Filters for tickets that need response.
          explode: false
          in: query
          name: ticket.needs_response
          schema:
            type: boolean
        - description: |
            Filters for tickets that are associated with any of the provided Rev
            organizations.
          explode: false
          in: query
          name: ticket.rev_org
          schema:
            type: array
            example:
              - REV-AbCdEfGh
            items:
              type: string
              format: id
        - description: Filters for tickets with any of the provided severities.
          explode: false
          in: query
          name: ticket.severity
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ticket-severity'
        - description: Filters for records with any of the provided SLA stages.
          explode: false
          in: query
          name: ticket.sla_summary.stage
          schema:
            type: array
            items:
              $ref: '#/components/schemas/sla-summary-stage'
        - description: |
            Filters for tickets with any of the provided source channels.
          explode: false
          in: query
          name: ticket.source_channel
          schema:
            type: array
            items:
              type: string
              format: text
        - description: |
            Filters for tickets that are associated with any of the source
            channels.
          explode: false
          in: query
          name: ticket.source_channel_v2
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for work of the provided types.
          explode: false
          in: query
          name: type
          schema:
            type: array
            items:
              $ref: '#/components/schemas/work-type'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-export-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Export Works
      tags:
        - works
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: WorksExportQuery
    post:
      description: Exports a collection of work items.
      operationId: works-export-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-export-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-export-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Export Works (POST)
      tags:
        - works
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /works.get:
    get:
      description: Gets a work item's information.
      operationId: works-get
      parameters:
        - description: The work's ID.
          explode: false
          in: query
          name: id
          required: true
          schema:
            type: string
            example: ISS-12345
            format: id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Work
      tags:
        - works
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: WorksGetQuery
    post:
      description: Gets a work item's information.
      operationId: works-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-get-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Get Work (POST)
      tags:
        - works
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /works.list:
    get:
      description: Lists a collection of work items.
      operationId: works-list
      parameters:
        - description: Filters for work belonging to any of the provided parts.
          explode: false
          in: query
          name: applies_to_part
          schema:
            type: array
            example:
              - PROD-12345
            items:
              type: string
              format: id
        - description: Filters for work created by any of these users.
          explode: false
          in: query
          name: created_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            The cursor to resume iteration from. If not provided, then iteration
            starts from the beginning.
          explode: false
          in: query
          name: cursor
          schema:
            type: string
            format: text
        - description: Filters for issues with any of the provided accounts.
          explode: false
          in: query
          name: issue.accounts
          schema:
            type: array
            example:
              - ACC-12345
            items:
              type: string
              format: id
        - description: Filters for issues with any of the provided priorities.
          explode: false
          in: query
          name: issue.priority
          schema:
            type: array
            items:
              $ref: '#/components/schemas/issue-priority'
        - description: |
            Filters for issues with any of the provided priority enum ids.
          explode: false
          in: query
          name: issue.priority_v2
          schema:
            type: array
            items:
              type: integer
              format: int64
        - description: |
            Filters for issues with any of the provided Rev organizations.
          explode: false
          in: query
          name: issue.rev_orgs
          schema:
            type: array
            example:
              - REV-AbCdEfGh
            items:
              type: string
              format: id
        - description: Filters for records with any of the provided SLA stages.
          explode: false
          in: query
          name: issue.sla_summary.stage
          schema:
            type: array
            items:
              $ref: '#/components/schemas/sla-summary-stage'
        - description: Filters for issues with any of the sprint.
          explode: false
          in: query
          name: issue.sprint
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            The maximum number of works to return. The default is '50'.
          explode: false
          in: query
          name: limit
          schema:
            type: integer
            format: int32
        - description: |
            The iteration mode to use, otherwise if not set, then "after" is
            used.
          explode: false
          in: query
          name: mode
          schema:
            $ref: '#/components/schemas/list-mode'
        - description: Filters for work modified by any of these users.
          explode: false
          in: query
          name: modified_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: Filters for work owned by any of these users.
          explode: false
          in: query
          name: owned_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: Filters for work reported by any of these users.
          explode: false
          in: query
          name: reported_by
          schema:
            type: array
            example:
              - DEVU-12345
            items:
              type: string
              format: id
        - description: |
            Fields to sort the works by and the direction to sort them.
          explode: false
          in: query
          name: sort_by
          schema:
            type: array
            items:
              type: string
              format: sort-by
        - description: Filters for records in the provided stage(s) by name.
          explode: false
          in: query
          name: stage.name
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Filters for issues that are staged.
          explode: false
          in: query
          name: staged_info.is_staged
          schema:
            type: boolean
        - description: Filters for work with any of the provided states.
          explode: false
          in: query
          name: state
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Filters for issues with this specific external reference.
          explode: false
          in: query
          name: sync_metadata.external_reference
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Filters for works with selected sync statuses.
          explode: false
          in: query
          name: sync_metadata.last_sync_in.status
          schema:
            type: array
            items:
              $ref: '#/components/schemas/sync-metadata-filter-sync-in-filter-status'
        - description: Filters for works modified with selected sync history.
          explode: false
          in: query
          name: sync_metadata.last_sync_in.sync_history
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for works modified with selected sync units.
          explode: false
          in: query
          name: sync_metadata.last_sync_in.sync_unit
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for works with selected sync statuses.
          explode: false
          in: query
          name: sync_metadata.last_sync_out.status
          schema:
            type: array
            items:
              $ref: '#/components/schemas/sync-metadata-filter-sync-out-filter-status'
        - description: Filters for works modified with selected sync history.
          explode: false
          in: query
          name: sync_metadata.last_sync_out.sync_history
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for works modified with selected sync units.
          explode: false
          in: query
          name: sync_metadata.last_sync_out.sync_unit
          schema:
            type: array
            items:
              type: string
              format: id
        - description: |
            Filters for issues synced from this specific origin system.
          explode: false
          in: query
          name: sync_metadata.origin_system
          schema:
            type: array
            items:
              type: string
              format: text
        - description: Filters for work with any of the provided tags.
          explode: false
          in: query
          name: tags
          schema:
            type: array
            example:
              - TAG-12345
            items:
              type: string
              format: id
        - description: |
            Filters for tickets that are associated with any of the brands.
          explode: false
          in: query
          name: ticket.brand
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for tickets with any of the provided channels.
          explode: false
          in: query
          name: ticket.channels
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ticket-channels'
        - description: |
            Filters for tickets that are associated with any of the channels.
          explode: false
          in: query
          name: ticket.channels_v2
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for tickets belonging to specific groups.
          explode: false
          in: query
          name: ticket.group
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for frozen tickets.
          explode: false
          in: query
          name: ticket.is_frozen
          schema:
            type: boolean
        - description: Filters for tickets that are spam.
          explode: false
          in: query
          name: ticket.is_spam
          schema:
            type: boolean
        - description: Filters for tickets that need response.
          explode: false
          in: query
          name: ticket.needs_response
          schema:
            type: boolean
        - description: |
            Filters for tickets that are associated with any of the provided Rev
            organizations.
          explode: false
          in: query
          name: ticket.rev_org
          schema:
            type: array
            example:
              - REV-AbCdEfGh
            items:
              type: string
              format: id
        - description: Filters for tickets with any of the provided severities.
          explode: false
          in: query
          name: ticket.severity
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ticket-severity'
        - description: Filters for records with any of the provided SLA stages.
          explode: false
          in: query
          name: ticket.sla_summary.stage
          schema:
            type: array
            items:
              $ref: '#/components/schemas/sla-summary-stage'
        - description: |
            Filters for tickets with any of the provided source channels.
          explode: false
          in: query
          name: ticket.source_channel
          schema:
            type: array
            items:
              type: string
              format: text
        - description: |
            Filters for tickets that are associated with any of the source
            channels.
          explode: false
          in: query
          name: ticket.source_channel_v2
          schema:
            type: array
            items:
              type: string
              format: id
        - description: Filters for work of the provided types.
          explode: false
          in: query
          name: type
          schema:
            type: array
            items:
              $ref: '#/components/schemas/work-type'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Works
      tags:
        - works
      x-fern-audiences:
        - docs
      x-fern-availability: generally-available
      x-request-name: WorksListQuery
    post:
      description: Lists a collection of work items.
      operationId: works-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-list-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: List Works (POST)
      tags:
        - works
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
  /works.update:
    post:
      description: Updates a work item's information.
      operationId: works-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-update-request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      summary: Update Work
      tags:
        - works
      x-fern-audiences:
        - docs
        - sdks
      x-fern-availability: generally-available
security:
  - auth-token: []
servers:
  - description: DevRev API endpoint.
    url: '{protocol}://{hostname}'
    variables:
      hostname:
        default: api.devrev.ai
        description: API hostname.
      protocol:
        default: https
        description: API protocol.
tags:
  - description: Accounts management APIs.
    name: accounts
  - description: Articles management APIs.
    name: articles
  - description: Artifact (file) management APIs.
    name: artifacts
  - description: Common object ("atom") APIs.
    name: atoms
  - description: Auth Connections of DevOrg.
    name: auth-connections
  - description: Security token interactions.
    name: auth-tokens
  - description: DevRev chat APIs.
    name: chats
  - description: Code change interactions.
    name: code-changes
  - description: DevRev command interactions.
    name: commands
  - description: DevRev conversation interaction.
    name: conversations
  - description: DevRev customization.
    name: customization
  - description: Dev organization interactions.
    name: dev-orgs
  - description: Dev user interactions.
    name: dev-users
  - description: Directory APIs.
    name: directory
  - description: Manages groups in a Dev organization.
    name: groups
  - description: DevRev secrets interactions.
    name: keyrings
  - description: DevRev link interactions.
    name: links
  - description: DevRev meetings interaction.
    name: meetings
  - description: DevRev part interactions.
    name: parts
  - description: Rev organization interactions.
    name: rev-orgs
  - description: Rev user interactions.
    name: rev-users
  - description: Management APIs for availability schedules.
    name: schedules
  - description: Service account interactions.
    name: service-accounts
  - description: Management APIs for Service Level Agreements.
    name: slas
  - description: DevRev deferred snap-kit-executions.
    name: snap-kit-execution
  - description: SnapWidget APIs.
    name: snap-widgets
  - description: Surveys APIs.
    name: surveys
  - description: System user interactions.
    name: sys-users
  - description: DevRev tag interactions.
    name: tags
  - description: APIs to manage timeline entries for objects.
    name: timeline-entries
  - description: DevRev vista interactions.
    name: vistas
  - description: Web Crawler Jobs APIs.
    name: web-crawler-job
  - description: Webhook event APIs.
    name: webhooks
  - description: DevRev work interactions.
    name: works
x-fern-version:
  default: "2024-01-24"
  header: x-devrev-version
  values:
    - "2024-01-24"
